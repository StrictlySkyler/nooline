{
  "author": {
    "name": "Justin Warkentin",
    "email": "justin.warkentin@gmail.com"
  },
  "name": "node-monkey",
  "version": "0.2.8",
  "description": "A Node.js module for inspecting, profiling and debugging Node.js applications through a web browser",
  "keywords": [
    "inspect",
    "debug",
    "debugging",
    "console",
    "log",
    "profile",
    "profiler"
  ],
  "homepage": "https://github.com/jwarkentin/node-monkey",
  "bugs": "https://github.com/jwarkentin/node-monkey/issues",
  "main": "./index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/jwarkentin/node-monkey.git"
  },
  "dependencies": {
    "lodash": "*",
    "socket.io": "*"
  },
  "readme": "NodeMonkey\n==========\n\nA Node.js module for inspecting and debugging Node.js applications through a web browser\n\nNodeMonkey runs a simple server and uses [Socket.IO](https://github.com/LearnBoost/socket.io) to create a websocket connection between the browser and server.\nIt captures anything that would normally be logged to the terminal, converts it to JSON and passes it to the browser where it is then logged to the console for inspection.\n\nVersion 0.2.0 also introduces code profiling functionality and the ability to send commands to your Node.js application from your web browser.  \nVersion 0.2.1 introduces major changes and cleanup. You can now register your own commands that can be run from the browser's Javascript console.\n\n --\n\nThe motivation for this project came from trying to debug a Node.js server I wrote that used websockets.\nI found it problematic trying to inspect objects with the terminal.\nI tried using the built-in debugging that works with the [Chrome Developer Tools plugin](https://github.com/joyent/node/wiki/using-eclipse-as-node-applications-debugger) for Eclipse.\nUnfortunately, I ran into a problem where setting breakpoints to inspect objects would cause the server to stop responding to heartbeats thus causing the client to disconnect.\nThis would entirely mess up my debugging efforts. All I really needed to do was have a good way to inspect objects.\nI searched Google and found projects like [node-inspector](https://github.com/dannycoates/node-inspector), which doesn't work with the latest versions of Node, and [node-codein](http://thomashunter.name/blog/nodejs-console-object-debug-inspector/) which has many bugs.\nAnd neither works with Firefox.\n\nSo NodeMonkey was born!\n\nCompatibility\n-------------\n\nAny browser with a Javasript console and websocket support!\n\nInstallation\n------------\n\n```\nnpm install node-monkey\n```\n\nA note on security\n------------------\n\nNodeMonkey is primarily designed for debugging and for now should only be used for such. I haven't implemented any sort of authorization\nto prevent anyone from gaining access to the data that is dumped out. If you are concerned about other's potentially gaining access while\nyou are debugging, you should change the `host` from `0.0.0.0` to something more secure like `127.0.0.1`. Definitely don't include it in\nproduction code before authorization is in place, and even then it's debatable whether there's a good reason.\n\nComplete Documentation\n----------------------\nTo get a quick start see the limited examples below. For complete documentation see the following links:\n\n* [NodeMonkey API](doc/nomo.md)\n* [Profiler API](doc/profiler.md)\n\nQuick Usage\n-----------\n\nUsing NodeMonkey is extremely easy.\nAll you have to do is include the following line in your Node.js application.\nAnything that is logged to the console after this will show up in the browser console once connected.\nIt captures all output to `console.log()`, `console.warn()` and `console.error()`.\n\n```js\nvar nomo = require('node-monkey').start([options]);\n```\n\nTo connect your browser simply go to `http://0.0.0.0:50500` in your web browser.\nIf you change the default `host` and `port` bindings be sure to adjust your URL accordingly.\n\nAs an alternative to viewing output through this page, you can also view output in the console of your own web application by including the following lines\n(adjust the host and port as necessary, this is based on the defaults):\n\n```html\n<script type=\"text/javascript\" src=\"http://0.0.0.0:50500/socket.io/socket.io.js\"></script>\n<script type=\"text/javascript\" src=\"http://0.0.0.0:50500/lodash.js\"></script>\n<script type=\"text/javascript\" src=\"http://0.0.0.0:50500/cycle.js\"></script>\n<script type=\"text/javascript\" src=\"http://0.0.0.0:50500/client.js\"></script>\n```\n\n**NOTE**: You do NOT have to refresh the page when you restart your Node.js application to continue to receive output.\n          Socket.IO will automatically reconnect.\n\nOptions\n-------\n\n* **host**: The host network interface to bind to. Default is `0.0.0.0` which means ALL interfaces.\n* **port**: The port to listen on. Default is `50500`.\n* **overrideConsole**: Set this to `false` to prevent NodeMonkey from overriding the console functions when you start it. You can call `nomo.replaceConsole()` any time to override the console functions and `nomo.revertConsole()` to change it back. Default is `true`.\n* **suppressOutput**: Use this to suppress terminal output when `console.log()` is called, freeing the console from clutter and allowing you to only inspect objects through the browser. Default is `true`.\n* **saveOutput**: If data is logged before you are able to connect your browser, you may still want to be able to view this data. Setting this option to `true` causes node-monkey to save the output and dump it out to the browser once you connect. Default is `true`.\n* **silent**: If `true` then nothing will be logged to the console when started. Default is `false`.\n* **convertStyles**: Whether to convert style related terminal escape sequences to corresponding JS console styles. Default is `true`.\n\n<!---\n* **profiler**: This is a nested object of options for the profiler. It's options are listed below.\n\n    ### Profiler Options\n    * **active**: If `true`, the profiler will be enabled when NodeMonkey is included. Defaults to `true`.\n                  Note that it doesn't matter what this is set to if you never call any profiler functions.\n-->\n\nLogging Examples\n----------------\n\n**Example 1**\n```javascript\nrequire('node-monkey').start();\nconsole.log('It works!', {key1: 'test', key2: ['an', 'array']});\n```\n\n**Example 2**\n```javascript\nrequire('node-monkey').start({\n  suppressOutput: false\n});\n\nconsole.log('It works!');\nconsole.warn('You might have done something wrong');\nconsole.error('FATAL ERROR', {message: 'Something broke'});\n```\n\nContribute\n----------\n\nI welcome any pull requests, feature suggestions, bug fixes and bug reports. Let me know what you think.\n\nDependencies\n------------\n\n* [Socket.IO](https://github.com/LearnBoost/socket.io)\n* [Lo-Dash](https://github.com/bestiejs/lodash)\n\n## LICENSE - \"MIT License\"\n\nCopyright (c) 2012 Justin Warkentin\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "node-monkey@0.2.8",
  "dist": {
    "shasum": "5568198eecc6b5ba40843b85866e8e1b218d28f4"
  },
  "_from": "node-monkey@",
  "_resolved": "https://registry.npmjs.org/node-monkey/-/node-monkey-0.2.8.tgz"
}
