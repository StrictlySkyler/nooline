{
  "name": "express-route",
  "version": "0.1.4",
  "description": "express-route is a library that let you organize the routes for express applications.",
  "keywords": [
    "route",
    "router",
    "express"
  ],
  "bugs": {
    "url": "https://github.com/dreame4/express-route/issues",
    "email": "a.babik@designfortress.com"
  },
  "engines": {
    "node": "~0.8.0"
  },
  "main": "index.js",
  "scripts": {
    "test": "mocha tests"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/dreame4/express-route.git"
  },
  "devDependencies": {
    "express": "~3.2.0",
    "mocha": "~1.10.0"
  },
  "author": {
    "name": "Adam Babik"
  },
  "license": "MIT",
  "readme": "# express-route\n\nexpress-route is a library that let you organize the routes for the express applications.\n\n## Features\n\n* single method API to read and apply the routes\n* ability to read routes synchronously or asynchronously\n* versatile format of the route definition to support all cases\n\n## Usage\n\nFirstly, you need to define the routes. The route can be a function, an object or an array of objects. They can be in one file or in many files.\n\nThe simplest definition may look like this:\n\n```javascript\nmodule.exports = {\n\t'/home': function (req, res, next) {\n\t\tres.end('Hello!');\n\t}\n};\n```\n\nThis definition is simply translated to the following code:\n\n```javascript\napp.get('/', function (req, res, next) {\n\tres.end('Hello!');\n});\n```\n\n`get` is a default HTTP method. You can change it using an object definition:\n\n```javascript\nmodule.exports = {\n\t'/home': {\n\t\tmethods: ['post'],\n\t\tfn: function (req, res, next) {\n\t\t\tres.end('Hello!');\n\t\t}\n\t}\n};\n```\n\nTo apply the routes to the express application you need to call `route` with valid parameters:\n\n```javascript\nvar route = require('express-route');\n\n// app is a reference to the express application\n// './routes' is a path to the directory with the routes\n// the third parameter is a configuration object\nroute(app, './routes', {\n\t// retrieve routes synchronously\n\tsync: true,\n\n\t// action to invoke when route is marked as restricted: true\n\tensureRestriction: function (req, res, next) {\n\t\tif (!user.authorized()) {\n\t\t\tres.status(403).end('Forbidden');\n\t\t\treturn;\n\t\t}\n\t\tnext();\n\t}\n});\n```\n\n## Route definition examples\n\nThe definition of the route may be slightly more complicated:\n\n```javascript\n'use strict';\n\nmodule.exports = {\n\n\t// route with restricted setting on\n\n\t'/user': {\n\t\tfn: function (req, res) {\n\t\t\tres.end('user');\n\t\t},\n\t\trestricted: true\n\t},\n\n\t// route that accepts several methods\n\n\t'/user/categories': {\n\t\tfn: function (req, res) {\n\t\t\tres.end('method ' + req.method + ' post #' + req.params.id);\n\t\t},\n\t\tmethods: ['get', 'post']\n\t},\n\n\t// several actions with different HTTP methods for one route\n\n\t'/user/posts/:id': [\n\t\t{\n\t\t\tfn: function (req, res) {\n\t\t\t\tres.end('method ' + req.method + ' post #' + req.params.id);\n\t\t\t},\n\t\t\trestricted: true,\n\t\t\tmethods: ['get', 'delete']\n\t\t},\n\t\t{\n\t\t\tfn: function (req, res) {\n\t\t\t\tres.end('method ' + req.method + ' post #' + req.params.id);\n\t\t\t},\n\t\t\trestricted: true,\n\t\t\tmethods: ['post']\n\t\t}\n\t]\n};\n```\n\n## API\n\n#### **`route(app: Object, path: String, settings: Object)`**\n\nApply routes to the express application.\n\n* `app` - reference to the express application,\n* `path` - path to the folder or the file with the routes,\n* `settings` - a configuration object,\n\t* `sync: Boolean` - whether the load of the routings is synchronous or not (optional, `true` by default),\n\t* `ensureRestriction: Function` - middleware which check if the request is authenticated (optional, by default it's a function that accepts all requests),\n\t* `ext: Array` - array with valid file extensions, e.g. `['.route']` (optional, `['.js']` by default).\n\n\n\n\n",
  "readmeFilename": "README.md",
  "_id": "express-route@0.1.4",
  "_from": "express-route@0.1.4",
  "dist": {
    "shasum": "b68d80d6161ed2f51d33586914be90cad6760fc4"
  },
  "_resolved": "https://registry.npmjs.org/express-route/-/express-route-0.1.4.tgz"
}
