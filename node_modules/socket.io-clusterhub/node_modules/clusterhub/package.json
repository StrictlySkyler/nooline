{
  "name": "clusterhub",
  "description": "Easily and efficiently sync data in your cluster applications.",
  "keywords": [
    "cluster",
    "load balance",
    "database",
    "multi process",
    "sync"
  ],
  "version": "0.2.3",
  "repository": {
    "type": "git",
    "url": "git://github.com/fent/clusterhub.git"
  },
  "author": {
    "name": "Roly Fentanes",
    "url": "https://github.com/fent"
  },
  "main": "./lib/index.js",
  "scripts": {
    "test": "mocha test/masterworker-test.js && mocha test/workerworker-test.js && mocha test/master-test.js && mocha test/kill-worker-test.js"
  },
  "directories": {
    "lib": "./lib"
  },
  "engines": {
    "node": ">=0.8"
  },
  "dependencies": {
    "eventvat": "0.2.x"
  },
  "devDependencies": {
    "mocha": "x"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/fent/clusterhub/raw/master/LICENSE"
    }
  ],
  "readme": "# clusterhub [![Build Status](https://secure.travis-ci.org/fent/clusterhub.png)](http://travis-ci.org/fent/clusterhub)\n\nAn attempt at giving multi process node programs a simple and efficient way to share data.\n\n\n# Usage\n\n```js\nvar cluster = require('cluster');\nvar numCPUs = require('os').cpus().length;\nvar hub = require('clusterhub');\n\nif (cluster.isMaster) {\n  // Fork workers.\n  for (var i = 0; i < numCPUs; i++) {\n    cluster.fork();\n  }\n\n} else {\n  hub.on('event', function(data) {\n    // do something with `data`\n  });\n\n  // emit event to all workers\n  hub.emit('event', { foo: 'bar' });\n}\n```\n\n# Features\n\n* Efficient event emitter system. Clusterhub will waste no time sending an event to a process that isn't listening for it. Events from the same process of a listener will be immediately emitted.\n* In process database. Each hub has its own instance of a redis-like database powered by [EventVat](https://github.com/hij1nx/EventVat).\n* Cluster agnostic. Apps that use clusterhub will work regardless if it uses cluster or not.\n\n# Motive\n\nNode.js is a perfect candidate to developing [Date Intensive Real-time Applications](http://video.nextconf.eu/video/1914374/nodejs-digs-dirt-about). Load balancing in these applications can become complicated when having to share data between processes.\n\nA remote database can be an easy solution for this, but it's not the most optimal. Communicating with a local process is several times faster than opening remote requests from a database. And even if the database is hosted locally, the overhead of communicating with yet another program is lessened.\n\nNote that this module is still experimental. It currently works by using a process's internal messaging system.\n\n## Made with Clusterhub\n\n* [socket.io-clusterhub](https://github.com/fent/socket.io-clusterhub) - Sync data between multi-process socket.io applications.\n* [clusterchat](https://github.com/fent/clusterchat) - A multi-process chat that shows off socket.io-clusterhub.\n\n# API\n\n### hub.createHub(id)\nClusterhub already comes with a default global hub. Use this if you want to create a custom hub.\n\n### Hub#destroy()\nCall to disable hub from emitting and receiving remote messages/commands.\n\nAdditionally, all functions from the regular [EventEmitter](http://nodejs.org/docs/latest/api/events.html#events.EventEmitter) are included. Plus a couple of extras.\n\n### Hub#emitLocal(event, [args...])\nUse this to emit an event only to the current process.\n\n### Hub#emitRemote(event, [args...])\nUse this to emit an event only to other worker processes and master. Or only to workers if the current process is the master.\n\n```js\nhub.on('remotehello', function() {\n  // hello from another process\n});\n\nhub.emitRemote('remotehello', { hello: 'there' });\n```\n\nAll functions from [EventVat](https://github.com/hij1nx/EventVat) are included as well. Their returned value can be accessed by providing a callback as the last argument. Or optionally by its returned value if called by the master.\n\n#### worker process\n```\nhub.set('foo', 'bar', function() {\n  hub.get('foo', function(val) {\n    console.log(val === 'bar'); // true\n  });\n});\n```\n\n#### master process\n```\nvar returnedVal = hub.incr('foo', function(val) {\n  // can be given a callback for consistency\n  console.log(val === 1); // true\n});\n\n// but since it's the master process it has direct access to the database\nconsole.log(returnedVal === 1); // true\n```\n\n\n# Install\n\n    npm install clusterhub\n\nTo use with node v0.6.x look at the v0.1.x tag.\n\n    npm install clusterhub@0.1.x\n\n\n# Tests\nTests are written with [mocha](http://visionmedia.github.com/mocha/)\n\n```bash\nnpm test\n```\n\n# License\nMIT\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/fent/clusterhub/issues"
  },
  "_id": "clusterhub@0.2.3",
  "_from": "clusterhub@0.2.x"
}
