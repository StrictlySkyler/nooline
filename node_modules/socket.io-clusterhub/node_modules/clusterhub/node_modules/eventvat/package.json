{
  "name": "eventvat",
  "version": "0.2.1",
  "description": "Evented, in-process key/value store for Node.js and the browser",
  "main": "./lib/eventvat.js",
  "directories": {
    "lib": "./lib",
    "example": "./example"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/hij1nx/EventVat.git"
  },
  "keywords": [
    "storage",
    "database",
    "redis"
  ],
  "author": {
    "name": "hij1nx",
    "email": "hij1nx@me.com",
    "url": "http://www.nodejitsu.com"
  },
  "contributors": [
    {
      "name": "Roly Fentanes",
      "url": "https://github.com/fent"
    }
  ],
  "maintainers": [
    {
      "name": "hij1nx",
      "email": "hij1nx@me.com"
    }
  ],
  "dependencies": {
    "eventemitter2": ">=0.4.x"
  },
  "devDependencies": {
    "nodeunit": "*"
  },
  "scripts": {
    "test": "nodeunit test/*-test.js"
  },
  "license": "MIT",
  "engine": {
    "node": ">=0.4"
  },
  "readme": "![Alt text](https://github.com/hij1nx/EventVat/raw/master/logo.png)\n\n# Synopsis\n\n### EventVat is an evented in-process key/value store with an API like that of Redis. It's event based, which means that when a method is called that affects the data, corresponding events will be raised. It supports 5 data types, Strings, Numbers, Booleans, Arrays and Hashes.\n\n# Motivation\n\n - A datastore for small, volitile working sets\n - For processes who do not share data, it reduces unnecessary trips across the process boundary.\n - Portability, works in the browser and on the server.\n - Write to any storage end-point (such as local browser storage, a filesystem or couchdb).\n\n# Installation\n\n```bash\n$npm install eventvat\n```\n\n# Usage\nEach new instance of `EventVat` is a hash. There are lots of convenient methods attached to each new instance.\n\n## events\nEventVat uses <a href=\"https://github.com/hij1nx/EventEmitter2\">EventEmitter2</a>. Listeners can attached to an EventVat object. An EventVat object can emit and event and a listener will respond. An event has three characteristics, the event name, a listener and an associated data key or wildcard.\n\n```javascript\n  var vat = EventVat();\n\n  vat.on('get foo', function(key, value) {\n\n    console.log('`' + key + '` has the value: `' + value + '`');\n  });\n\n  vat.set('foo', 'hello, world');\n  vat.get('foo');\n```\n\n# API\n\n## instance methods\n\n### publish()\nSynonymous with `EventEmitter2.prototype.emit`\n\n### subscribe()\nSynonymous with `EventEmitter2.prototype.on`\n\n### unsubscribe()\nSynonymous with `EventEmitter2.prototype.removeListener`\n\n### die(key)\nExpire a key\n\n### del(key /* ... */)\nDelete a key\n\n### exists(key)\nDetermine if a key exists\n\n### expire(key, ttl)\nSet a key's time to live in seconds\n\n### expireat(key, dueDate)\nSet the expiration for a key as a UNIX timestamp\n\n### keys(regex)\nFind all keys matching the given pattern\n\n### move(key, db)\nMove a key to another database\n\n### object(subcommend /* ... */)\nInspect the internals of an object\n\n### persist(key)\nRemove the expiration from a key\n\n### randomkey()\nReturn a random key from the keyspace\n\n### rename(oldKey, newKey)\nRename a key\n\n### renamenx(oldKey, newKey)\nRename a key, only if the new key does not exist\n\n### sort()\nSort the elements in a list, set or sorted set\n\n### type(key)\nDetermine the type stored at key\n\n### ttl(key)\nGet the time to live for a key\n\n### append(key, value)\nAppend a value to a key\n\n### decr(key)\nDecrement the integer value of a key by one\n\n### decrby(key, value)\nDecrement the integer value of a key by the given number\n\n### get(key)\nGet the value of a key\n\n### getbit(key)\nReturns the bit value at offset in the string value stored at key\n\n### getrange(key, start, end)\nGet a substring of the string stored at a key\n\n### getset(key, value)\nSet the string value of a key and return its old value\n\n### incr(key)\nIncrement the integer value of a key by one\n\n### incrby(key, value)\nIncrement the integer value of a key by the given number\n\n### mget(key /* ... */)\nGet the values of all the given keys\n\n### mset(keys /* ... */, values /* ... */)\nSet multiple keys to multiple values\n\n### msetnx(keys /* ... */, values /* ... */)\nSet multiple keys to multiple values, only if none of the keys exist\n\n### set(key, value, ttl)\nSet the string value of a key\n\n### setbit(key, offset, value)\nSets or clears the bit at offset in the string value stored at key\n\n### setex(key, seconds, value)\nSet the value and expiration of a key\n\n### setnx(key, value, ttl)\nSet the value of a key, only if the key does not exist\n\n### setrange(key, offset, value)\nOverwrite part of a string at key starting at the specified offset\n\n### strlen(key)\nGet the length of the value stored in a key\n\n### hdel(key, field /* ... */)\nDelete one or more hash fields\n\n### hexists(key, field)\nDetermine if a hash field exists\n\n### hget(key, field)\nGet the value of a hash field\n\n### hgetall(key)\nGet all the fields and values in a hash\n\n### hincr(key, field)\nIncrement the integer value of a hash field by one\n\n### hincrby(key, field, value)\nIncrement the integer value of a hash field by the given number\n\n### hdecr(key, field)\nDecrement the integer value of a hash field by one\n\n### hdecrby(key, field, value)\nDecrement the integer value of a hash field by the given number  \n\n### hkeys(key)\nGet all the fields in a hash\n\n### hlen(key)\nGet the number of fields in a hash\n\n### hmget(key, field /* ... */)\nGet the values of all the given hash fields\n\n### hmset(key, fields /* ... */, values /* ... */)\nSet multiple hash fields to multiple values\n\n### hset(key, field, value)\nSet the string value of a hash field\n\n### hsetnx(key, field, value /* ... */)\nSet the value of a hash field, only if the field does not exist\n\n### hvals(key)\nGet all the values in a hash\n\n### dump(stringify)\nDump the current data store into a string\n\n### swap(a, b, depth)\nSwap two values\n\n### findin(key, value)\nSearch within the value of a key\n\n# Tests\n\n```bash\n$npm test\n```\n\n(The MIT License)\n\nCopyright (c) 2010 hij1nx <http://www.twitter.com/hij1nx>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE DBSIZEORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/hij1nx/EventVat/issues"
  },
  "_id": "eventvat@0.2.1",
  "dist": {
    "shasum": "a399a0c334cf891ad434837e1b1b95fab97cc46c"
  },
  "_from": "eventvat@0.2.x",
  "_resolved": "https://registry.npmjs.org/eventvat/-/eventvat-0.2.1.tgz"
}
