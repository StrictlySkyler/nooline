{
  "author": {
    "name": "Troy Goode",
    "email": "troygoode@gmail.com",
    "url": "http://github.com/troygoode/"
  },
  "name": "require-directory",
  "version": "1.0.0",
  "description": "Recursively iterates over specified directory, requiring each file, and returning a nested hash structure containing those libraries.",
  "keywords": [
    "require",
    "directory",
    "library",
    "recursive"
  ],
  "homepage": "https://github.com/troygoode/node-require-directory/",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/troygoode/node-require-directory.git"
  },
  "contributors": [
    {
      "name": "Troy Goode",
      "email": "troygoode@gmail.com",
      "url": "http://github.com/troygoode/"
    }
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/mit-license.php"
    }
  ],
  "bugs": {
    "url": "http://github.com/troygoode/node-require-directory/issues/"
  },
  "engines": {
    "node": ">=0.6.0"
  },
  "dependencies": {},
  "devDependencies": {
    "mocha": "latest"
  },
  "scripts": {
    "test": "./node_modules/mocha/bin/mocha"
  },
  "bin": {},
  "readme": "# require-directory\n\nRecursively iterates over specified directory, requiring each file, and returning a nested hash structure containing those libraries.\n\n## How To Use\n\n### Installation\n\n```bash\n$ npm install require-directory\n```\n\n### Usage\n\nA common pattern in node.js is to include an index file which creates a hash of the files in its current directory. Given a directory structure like so:\n\n* app.js\n* routes/index.js\n* routes/home.js\n* routes/auth/login.js\n* routes/auth/logout.js\n* routes/auth/register.js\n\n`routes/index.js` uses `require-directory` to build the hash rather than doing so manually:\n\n```javascript\nvar requireDirectory = require('require-directory');\nmodule.exports = requireDirectory(module);\n```\n\n`app.js` references `routes/index.js` like any other module, but it now has a hash/tree of the exports from the `./routes/` directory:\n\n```javascript\nvar routes = require('./routes');\n\n// snip\n\napp.get '/', routes.home;\napp.get '/register', routes.auth.register;\napp.get '/login', routes.auth.login;\napp.get '/logout', routes.auth.logout;\n```\n\n*Note that `routes.index` will be `undefined` as you would hope.*\n\n### Specifying Another Directory\n\nYou can specify which directory you want to build a tree of (if it isn't the current directory for whatever reason) by passing it as the second parameter. Not specifying the path (`requireDirectory(module)`) is the equivelant of `requireDirectory(module, __dirname)`:\n\n```javascript\nvar requireDirectory = require('require-directory');\nmodule.exports = requireDirectory(module, './some/other/directory');\n```\n\n### Blacklisting/Whitelisting\n\n`require-directory` takes an optional third parameter that defines which files that should not be included in the hash/tree via either a RegExp or a function. If you pass a function in, it should take a single argument (the path to a file) and return true if that file should be included in the tree. If you pass a RegExp it will be considered a blacklist - files that match that RegExp will **not** be included in the tree:\n\n```javascript\nvar blacklist = /dontinclude.js$/;\nvar requireDirectory = require('require-directory');\nvar hash = requireDirectory(module, __dirname, blacklist);\n```\n\n```javascript\nvar check = function(path){\n  if(/dontinclude.js$/.test(path)){\n    return false; // don't include\n  }else{\n    return true; // go ahead and include\n  }\n};\nvar requireDirectory = require('require-directory');\nvar hash = requireDirectory(module, __dirname, check);\n```\n\n## Run Unit Tests\n\n```bash\n$ npm test\n```\n\n## License\n\n[MIT License](http://www.opensource.org/licenses/mit-license.php)\n\n## Author\n\n[Troy Goode](https://github.com/TroyGoode) ([troygoode@gmail.com](mailto:troygoode@gmail.com))\n",
  "readmeFilename": "README.markdown",
  "_id": "require-directory@1.0.0",
  "_from": "require-directory@>= 1.0.0"
}
