function handler(n,e){fs.readFile(__dirname+"/../../dist/socket.io.js","utf8",function(n,t){return n?(e.writeHead(404),e.end("Error"),void 0):(e.writeHead(200,{"Content-Type":"application/javascript"}),e.end(t),void 0)})}function suite(n,e){currentSuite=testsPorts[n]={},e()}function server(n,e){currentSuite[n]=port;var t=sio.listen(port);t.configure(function(){t.set("transports",[transport])}),e(t),port++}var io,currentSuite,express=null,stylus=null,sio=null,path=null,fs=null,app=express.createServer(),port=3e3,args=process.argv.slice(2),transport=args.length?args[0]:"xhr-polling",testsPorts={};app.configure(function(){app.use(stylus.middleware({src:__dirname+"/public"})),app.use(express.static(__dirname+"/public")),app.use("/test",express.static(__dirname+"/../../test")),app.set("views",__dirname),app.set("view engine","jade")}),app.get("/",function(n,e){e.render("index",{layout:!1,testsPorts:testsPorts,transport:transport})}),app.listen(port++,function(){var n=app.address();console.error("   listening on http://"+n.address+":"+n.port)}),io=sio.listen(app),io.configure(function(){io.set("browser client handler",handler),io.set("transports",[transport])}),suite("socket.test.js",function(){server("test connecting the socket and disconnecting",function(n){n.sockets.on("connection",function(){})}),server("test receiving messages",function(n){n.sockets.on("connection",function(n){var e=0,t=setInterval(function(){n.send(++e),3==e&&(clearInterval(t),setTimeout(function(){n.disconnect()},500))},50)})}),server("test sending messages",function(n){n.sockets.on("connection",function(n){n.on("message",function(e){n.send(e)})})}),server("test manual buffer flushing",function(n){n.sockets.on("connection",function(n){n.on("message",function(e){n.send(e)})})}),server("test automatic buffer flushing",function(n){n.sockets.on("connection",function(n){n.on("message",function(e){n.send(e)})})}),server("test acks sent from client",function(n){n.sockets.on("connection",function(n){n.send("tobi",function(){n.send("tobi 2")})})}),server("test acks sent from server",function(n){n.sockets.on("connection",function(){})}),server("test connecting to namespaces",function(n){n.of("/woot").on("connection",function(n){n.send("connected to woot")}),n.of("/chat").on("connection",function(n){n.send("connected to chat")})}),server("test disconnecting from namespaces",function(n){n.of("/a").on("connection",function(){}),n.of("/b").on("connection",function(){})}),server("test authorizing for namespaces",function(n){n.of("/a").authorization(function(n,e){e(null,!1)}).on("connection",function(){})}),server("test sending json from server",function(n){n.sockets.on("connection",function(){n.sockets.json.send(3141592)})}),server("test sending json from client",function(n){n.sockets.on("connection",function(n){n.on("message",function(e){Array.isArray(e)&&3==e.length&&n.send("echo")})})}),server("test emitting an event from server",function(n){n.sockets.on("connection",function(n){n.emit("woot")})}),server("test emitting multiple events at once to the server",function(n){n.sockets.on("connection",function(n){var e=[];n.on("print",function(t){e.indexOf(t)>=0&&console.error("duplicate message"),e.push(t),2==e.length&&n.emit("done")})})}),server("test emitting an event to server",function(n){n.sockets.on("connection",function(n){n.on("woot",function(){n.emit("echo")})})}),server("test emitting an event from server and sending back data",function(n){n.sockets.on("connection",function(n){n.emit("woot",1,function(e){"test"===e&&n.emit("done")})})}),server("test emitting an event to server and sending back data",function(n){n.sockets.on("connection",function(n){n.on("tobi",function(n,e,t){1===n&&2===e&&t({hello:"world"})})})}),server("test encoding a payload",function(n){n.of("/woot").on("connection",function(n){var e=0;n.on("message",function(t){"ñ"==t&&4==++e&&n.emit("done")})})}),server("test sending query strings to the server",function(n){n.sockets.on("connection",function(n){n.json.send(n.handshake)})}),server("test sending newline",function(n){n.sockets.on("connection",function(n){n.on("message",function(e){"\n"==e&&n.emit("done")})})}),server("test sending unicode",function(n){n.sockets.on("connection",function(n){n.on("message",function(e){"☃"==e.test&&n.emit("done")})})}),server("test webworker connection",function(n){n.sockets.on("connection",function(n){n.on("message",function(e){"woot"==e&&n.emit("done")})})})});