var server=null,assert=null,request=null,s=server.createServer(),tests={testGet:{resp:server.createGetResponse("TESTING!"),expectBody:"TESTING!"},testGetChunkBreak:{resp:server.createChunkResponse([new Buffer([239]),new Buffer([163]),new Buffer([191]),new Buffer([206]),new Buffer([169]),new Buffer([226]),new Buffer([152]),new Buffer([131])]),expectBody:"Ω☃"},testGetBuffer:{resp:server.createGetResponse(new Buffer("TESTING!")),encoding:null,expectBody:new Buffer("TESTING!")},testGetJSON:{resp:server.createGetResponse('{"test":true}',"application/json"),json:!0,expectBody:{test:!0}},testPutString:{resp:server.createPostValidator("PUTTINGDATA"),method:"PUT",body:"PUTTINGDATA"},testPutBuffer:{resp:server.createPostValidator("PUTTINGDATA"),method:"PUT",body:new Buffer("PUTTINGDATA")},testPutJSON:{resp:server.createPostValidator(JSON.stringify({foo:"bar"})),method:"PUT",json:{foo:"bar"}},testPutMultipart:{resp:server.createPostValidator("--__BOUNDARY__\r\ncontent-type: text/html\r\n\r\n<html><body>Oh hi.</body></html>\r\n--__BOUNDARY__\r\n\r\nOh hi.\r\n--__BOUNDARY__--"),method:"PUT",multipart:[{"content-type":"text/html",body:"<html><body>Oh hi.</body></html>"},{body:"Oh hi."}]}};s.listen(s.port,function(){var e=0;for(i in tests)!function(){var t=tests[i];s.on("/"+i,t.resp),request(s.url+"/"+i,t,function(r,o,n){if(r)throw r;t.expectBody&&assert.deepEqual(t.expectBody,n),e-=1,0===e&&(assert.notEqual(typeof t.callback,"function"),console.log(1+Object.keys(tests).length+" tests passed."),s.close())}),e++}()});