var Lab=null,Hoek=null,internals={},expect=Lab.expect,before=Lab.before,after=Lab.after,describe=Lab.experiment,it=Lab.test;describe("Hoek",function(){describe("#escapeJavaScript",function(){it("encodes / characters",function(e){var t=Hoek.escapeJavaScript("<script>alert(1)</script>");expect(t).to.equal("\\x3cscript\\x3ealert\\x281\\x29\\x3c\\x2fscript\\x3e"),e()}),it("encodes ' characters",function(e){var t=Hoek.escapeJavaScript("something('param')");expect(t).to.equal("something\\x28\\x27param\\x27\\x29"),e()}),it("encodes large unicode characters with the correct padding",function(e){var t=Hoek.escapeJavaScript(String.fromCharCode(500)+String.fromCharCode(1e3));expect(t).to.equal("\\u0500\\u1000"),e()}),it("doesn't throw an exception when passed null",function(e){var t=Hoek.escapeJavaScript(null);expect(t).to.equal(""),e()})}),describe("#escapeHtml",function(){it("encodes / characters",function(e){var t=Hoek.escapeHtml("<script>alert(1)</script>");expect(t).to.equal("&lt;script&gt;alert&#x28;1&#x29;&lt;&#x2f;script&gt;"),e()}),it("encodes < and > as named characters",function(e){var t=Hoek.escapeHtml("<script><>");expect(t).to.equal("&lt;script&gt;&lt;&gt;"),e()}),it("encodes large unicode characters",function(e){var t=Hoek.escapeHtml(String.fromCharCode(500)+String.fromCharCode(1e3));expect(t).to.equal("&#500;&#1000;"),e()}),it("doesn't throw an exception when passed null",function(e){var t=Hoek.escapeHtml(null);expect(t).to.equal(""),e()})})});