function ctfParseInteger(t,r){var e,n,i,o;if(e=t.name,!("signed"in t.integer))throw Error("Malformed CTF JSON: integer missing signed value");if(!("length"in t.integer))throw Error("Malformed CTF JSON: integer missing length value");if(n=t.integer.signed,i=t.integer.length,o=null,n&&1==i?o="int8_t":1==i?o="uint8_t":n&&2==i?o="int16_t":2==i?o="uint16_t":n&&4==i?o="int32_t":4==i?o="uint32_t":n&&8==i?o="int64_t":8==i&&(o="uint64_t"),null===o)throw Error("Malformed CTF JSON: integer has unsupported length and sign - "+i+"/"+n);return e!=o?"char"==e?(ASSERT("int8_t"==o),void 0):(r.typedef(e,o),void 0):void 0}function ctfParseFloat(t,r){var e,n;if(e=t.name,!("length"in t["float"]))throw Error("Malformed CTF JSON: float missing length value");if(n=t["float"].length,4!=n&&8!=n)throw Error("Malformed CTF JSON: float has invalid length value");if(4==n){if("float"==e)return;r.typedef(e,"float")}else if(8==n){if("double"==e)return;r.typedef(e,"double")}}function ctfParseTypedef(t,r){var e,n,i;if(e=t.name,"string"!=typeof t.typedef)throw Error("Malformed CTF JSON: typedef value in not a string");for(n=t.typedef,i=0;i<ctf_deftypes.length;i++)if(e==ctf_deftypes[i])return;r.typedef(e,n)}function ctfParseStruct(t,r){var e,n,i,o,a,f,s;if(f=[],!Array.isArray(t.struct))throw Error("Malformed CTF JSON: struct value is not an array");for(i=0;i<t.struct.length;i++){if(o=t.struct[i],!("name"in o))throw Error("Malformed CTF JSON: struct member missing name");if(!("type"in o))throw Error("Malformed CTF JSON: struct member missing type");if("string"!=typeof o.name)throw Error("Malformed CTF JSON: struct member name isn't a string");if("string"!=typeof o.type)throw Error("Malformed CTF JSON: struct member type isn't a string");e=o.name,n=o.type,a=n.indexOf(" ["),-1!=a&&(n=n.substring(0,a)+n.substring(a+1,n.length)),s={},s[e]={type:n},f.push(s)}e=t.name,r.typedef(e,f)}function ctfParseEntry(t,r){var e,n;if(!("name"in t))throw Error('Malformed CTF JSON: entry missing "name" section');for(e=0;e<ctf_entries.length;e++)ctf_entries[e]in t&&n++;if(0===n)throw Error("Malformed CTF JSON: found no entries");if(n>=2)throw Error("Malformed CTF JSON: found more than one entry");return"integer"in t?(ctfParseInteger(t,r),void 0):"float"in t?(ctfParseFloat(t,r),void 0):"typedef"in t?(ctfParseTypedef(t,r),void 0):"struct"in t?(ctfParseStruct(t,r),void 0):(ASSERT(!1,"shouldn't reach here"),void 0)}function ctfParseJson(t,r){var e,n;if(ASSERT(t),ASSERT(r),!("metadata"in t))throw Error("Invalid CTF JSON: missing metadata section");if(!("ctf2json_version"in t.metadata))throw Error("Invalid CTF JSON: missing ctf2json_version");for(e=t.metadata.ctf2json_version,n=0;n<ctf_versions.length&&ctf_versions[n]!=e;n++);if(n==ctf_versions.length)throw Error("Unsuported ctf2json_version: "+e);if(!("data"in t))throw Error("Invalid CTF JSON: missing data section");if(!Array.isArray(t.data))throw Error("Malformed CTF JSON: data section is not an array");for(n=0;n<t.data.length;n++)ctfParseEntry(t.data[n],r)}var mod_assert=null,ASSERT=mod_assert.ok,ctf_versions=["1.0"],ctf_entries=["integer","float","typedef","struct"],ctf_deftypes=["int8_t","uint8_t","int16_t","uint16_t","int32_t","uint32_t","float","double"];exports.ctfParseJson=ctfParseJson;