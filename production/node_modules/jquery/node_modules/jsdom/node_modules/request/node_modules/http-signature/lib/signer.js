// Copyright 2012 Joyent, Inc.  All rights reserved.

function MissingHeaderError(r){this.name="MissingHeaderError",this.message=r,this.stack=Error().stack}function InvalidAlgorithmError(r){this.name="InvalidAlgorithmError",this.message=r,this.stack=Error().stack}function _pad(r){return parseInt(r,10)<10&&(r="0"+r),r}function _rfc1123(){var r=new Date,t=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],e=["Sun","Mon","Tue","Wed","Thu","Fri","Sat"];return e[r.getUTCDay()]+", "+_pad(r.getUTCDate())+" "+t[r.getUTCMonth()]+" "+r.getUTCFullYear()+" "+_pad(r.getUTCHours())+":"+_pad(r.getUTCMinutes())+":"+_pad(r.getUTCSeconds())+" GMT"}var assert=null,crypto=null,http=null,sprintf=null.format,Algorithms={"rsa-sha1":!0,"rsa-sha256":!0,"rsa-sha512":!0,"dsa-sha1":!0,"hmac-sha1":!0,"hmac-sha256":!0,"hmac-sha512":!0},Authorization='Signature keyId="%s",algorithm="%s",headers="%s",signature="%s"';MissingHeaderError.prototype=Error(),InvalidAlgorithmError.prototype=Error(),module.exports={signRequest:function(r,t){var e,a,s,o,i,n,h,g;if(assert.object(r,"request"),assert.object(t,"options"),assert.optionalString(t.algorithm,"options.algorithm"),assert.string(t.keyId,"options.keyId"),assert.optionalArrayOfString(t.headers,"options.headers"),assert.optionalString(t.httpVersion,"options.httpVersion"),r.getHeader("Date")||r.setHeader("Date",_rfc1123()),t.headers||(t.headers=["date"]),t.algorithm||(t.algorithm="rsa-sha256"),t.httpVersion||(t.httpVersion="1.1"),t.algorithm=t.algorithm.toLowerCase(),!Algorithms[t.algorithm])throw new InvalidAlgorithmError(t.algorithm+" is not supported");for(a="",e=0;e<t.headers.length;e++){if("string"!=typeof t.headers[e])throw new TypeError("options.headers must be an array of Strings");if(s=t.headers[e].toLowerCase(),"request-line"!==s){if(o=r.getHeader(s),!o)throw new MissingHeaderError(s+" was not in the request");a+=s+": "+o}else o=a+=r.method+" "+r.path+" HTTP/"+t.httpVersion;e+1<t.headers.length&&(a+="\n")}return i=t.algorithm.match(/(hmac|rsa)-(\w+)/),"hmac"===i[1]?(h=crypto.createHmac(i[2].toUpperCase(),t.key),h.update(a),n=h.digest("base64")):(g=crypto.createSign(t.algorithm.toUpperCase()),g.update(a),n=g.sign(t.key,"base64")),r.setHeader("Authorization",sprintf(Authorization,t.keyId,t.algorithm,t.headers.join(" "),n)),!0}};