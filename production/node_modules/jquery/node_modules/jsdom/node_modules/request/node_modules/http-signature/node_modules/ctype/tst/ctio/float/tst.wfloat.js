function testfloat(){var S=new Buffer(4);mod_ctype.wfloat(0,"big",S,0),ASSERT.equal(0,S[0]),ASSERT.equal(0,S[1]),ASSERT.equal(0,S[2]),ASSERT.equal(0,S[3]),mod_ctype.wfloat(0,"little",S,0),ASSERT.equal(0,S[0]),ASSERT.equal(0,S[1]),ASSERT.equal(0,S[2]),ASSERT.equal(0,S[3]),mod_ctype.wfloat(Number.POSITIVE_INFINITY,"big",S,0),ASSERT.equal(127,S[0]),ASSERT.equal(128,S[1]),ASSERT.equal(0,S[2]),ASSERT.equal(0,S[3]),mod_ctype.wfloat(Number.POSITIVE_INFINITY,"little",S,0),ASSERT.equal(127,S[3]),ASSERT.equal(128,S[2]),ASSERT.equal(0,S[1]),ASSERT.equal(0,S[0]),mod_ctype.wfloat(Number.NEGATIVE_INFINITY,"big",S,0),ASSERT.equal(255,S[0]),ASSERT.equal(128,S[1]),ASSERT.equal(0,S[2]),ASSERT.equal(0,S[3]),mod_ctype.wfloat(Number.NEGATIVE_INFINITY,"little",S,0),ASSERT.equal(255,S[3]),ASSERT.equal(128,S[2]),ASSERT.equal(0,S[1]),ASSERT.equal(0,S[0]),mod_ctype.wfloat(0/0,"big",S,0),ASSERT.equal(127,S[0]),ASSERT.equal(128,S[1]),ASSERT.equal(0,S[2]),ASSERT.equal(23,S[3]),mod_ctype.wfloat(0/0,"little",S,0),ASSERT.equal(127,S[3]),ASSERT.equal(128,S[2]),ASSERT.equal(0,S[1]),ASSERT.equal(23,S[0]),mod_ctype.wfloat(1.125,"big",S,0),ASSERT.equal(63,S[0]),ASSERT.equal(144,S[1]),ASSERT.equal(0,S[2]),ASSERT.equal(0,S[3]),mod_ctype.wfloat(1.125,"little",S,0),ASSERT.equal(63,S[3]),ASSERT.equal(144,S[2]),ASSERT.equal(0,S[1]),ASSERT.equal(0,S[0]),mod_ctype.wfloat(1.0000001192092896,"big",S,0),ASSERT.equal(63,S[0]),ASSERT.equal(128,S[1]),ASSERT.equal(0,S[2]),ASSERT.equal(1,S[3]),mod_ctype.wfloat(1.0000001192092896,"little",S,0),ASSERT.equal(63,S[3]),ASSERT.equal(128,S[2]),ASSERT.equal(0,S[1]),ASSERT.equal(1,S[0]),mod_ctype.wfloat(1.0000001192092896,"big",S,0),ASSERT.equal(63,S[0]),ASSERT.equal(128,S[1]),ASSERT.equal(0,S[2]),ASSERT.equal(1,S[3]),mod_ctype.wfloat(1.0000001192092896,"little",S,0),ASSERT.equal(63,S[3]),ASSERT.equal(128,S[2]),ASSERT.equal(0,S[1]),ASSERT.equal(1,S[0]),mod_ctype.wfloat(2.3283067140944524e-10,"big",S,0),ASSERT.equal(47,S[0]),ASSERT.equal(128,S[1]),ASSERT.equal(0,S[2]),ASSERT.equal(1,S[3]),mod_ctype.wfloat(2.3283067140944524e-10,"little",S,0),ASSERT.equal(47,S[3]),ASSERT.equal(128,S[2]),ASSERT.equal(0,S[1]),ASSERT.equal(1,S[0]),mod_ctype.wfloat(-2.4010576103645774e38,"big",S,0),ASSERT.equal(255,S[0]),ASSERT.equal(52,S[1]),ASSERT.equal(162,S[2]),ASSERT.equal(176,S[3]),mod_ctype.wfloat(-2.4010576103645774e38,"little",S,0),ASSERT.equal(255,S[3]),ASSERT.equal(52,S[2]),ASSERT.equal(162,S[1]),ASSERT.equal(176,S[0]),mod_ctype.wfloat(3.6468792534053364e-40,"big",S,0),ASSERT.equal(0,S[0]),ASSERT.equal(3,S[1]),ASSERT.equal(248,S[2]),ASSERT.equal(154,S[3]),mod_ctype.wfloat(3.6468792534053364e-40,"little",S,0),ASSERT.equal(0,S[3]),ASSERT.equal(3,S[2]),ASSERT.equal(248,S[1]),ASSERT.equal(154,S[0]),mod_ctype.wfloat(-3.6468792534053364e-40,"big",S,0),ASSERT.equal(128,S[0]),ASSERT.equal(3,S[1]),ASSERT.equal(248,S[2]),ASSERT.equal(154,S[3]),mod_ctype.wfloat(-3.6468792534053364e-40,"little",S,0),ASSERT.equal(128,S[3]),ASSERT.equal(3,S[2]),ASSERT.equal(248,S[1]),ASSERT.equal(154,S[0]),mod_ctype.wfloat(3.4028234663852886e38,"big",S,0),ASSERT.equal(127,S[0]),ASSERT.equal(127,S[1]),ASSERT.equal(255,S[2]),ASSERT.equal(255,S[3]),mod_ctype.wfloat(3.4028234663852886e38,"little",S,0),ASSERT.equal(127,S[3]),ASSERT.equal(127,S[2]),ASSERT.equal(255,S[1]),ASSERT.equal(255,S[0]),mod_ctype.wfloat(-3.4028234663852886e38,"big",S,0),ASSERT.equal(255,S[0]),ASSERT.equal(127,S[1]),ASSERT.equal(255,S[2]),ASSERT.equal(255,S[3]),mod_ctype.wfloat(-3.4028234663852886e38,"little",S,0),ASSERT.equal(255,S[3]),ASSERT.equal(127,S[2]),ASSERT.equal(255,S[1]),ASSERT.equal(255,S[0]),mod_ctype.wfloat(1.1754943508222875e-38,"big",S,0),ASSERT.equal(0,S[0]),ASSERT.equal(128,S[1]),ASSERT.equal(0,S[2]),ASSERT.equal(0,S[3]),mod_ctype.wfloat(1.1754943508222875e-38,"little",S,0),ASSERT.equal(0,S[3]),ASSERT.equal(128,S[2]),ASSERT.equal(0,S[1]),ASSERT.equal(0,S[0]),mod_ctype.wfloat(-1.1754943508222875e-38,"big",S,0),ASSERT.equal(128,S[0]),ASSERT.equal(128,S[1]),ASSERT.equal(0,S[2]),ASSERT.equal(0,S[3]),mod_ctype.wfloat(-1.1754943508222875e-38,"little",S,0),ASSERT.equal(128,S[3]),ASSERT.equal(128,S[2]),ASSERT.equal(0,S[1]),ASSERT.equal(0,S[0]),mod_ctype.wfloat(1.401298464324817e-45,"big",S,0),ASSERT.equal(0,S[0]),ASSERT.equal(0,S[1]),ASSERT.equal(0,S[2]),ASSERT.equal(1,S[3]),mod_ctype.wfloat(1.401298464324817e-45,"little",S,0),ASSERT.equal(0,S[3]),ASSERT.equal(0,S[2]),ASSERT.equal(0,S[1]),ASSERT.equal(1,S[0]),mod_ctype.wfloat(-1.401298464324817e-45,"big",S,0),ASSERT.equal(128,S[0]),ASSERT.equal(0,S[1]),ASSERT.equal(0,S[2]),ASSERT.equal(1,S[3]),mod_ctype.wfloat(-1.401298464324817e-45,"little",S,0),ASSERT.equal(128,S[3]),ASSERT.equal(0,S[2]),ASSERT.equal(0,S[1]),ASSERT.equal(1,S[0]),mod_ctype.wfloat(1.1754942106924411e-38,"big",S,0),ASSERT.equal(0,S[0]),ASSERT.equal(127,S[1]),ASSERT.equal(255,S[2]),ASSERT.equal(255,S[3]),mod_ctype.wfloat(1.1754942106924411e-38,"little",S,0),ASSERT.equal(0,S[3]),ASSERT.equal(127,S[2]),ASSERT.equal(255,S[1]),ASSERT.equal(255,S[0]),mod_ctype.wfloat(-1.1754942106924411e-38,"big",S,0),ASSERT.equal(128,S[0]),ASSERT.equal(127,S[1]),ASSERT.equal(255,S[2]),ASSERT.equal(255,S[3]),mod_ctype.wfloat(-1.1754942106924411e-38,"little",S,0),ASSERT.equal(128,S[3]),ASSERT.equal(127,S[2]),ASSERT.equal(255,S[1]),ASSERT.equal(255,S[0]),S=new Buffer(6),mod_ctype.wfloat(-1.2027516403607578e-32,"big",S,2),ASSERT.equal(138,S[2]),ASSERT.equal(121,S[3]),ASSERT.equal(205,S[4]),ASSERT.equal(63,S[5]),mod_ctype.wfloat(-1.2027516403607578e-32,"little",S,2),ASSERT.equal(138,S[5]),ASSERT.equal(121,S[4]),ASSERT.equal(205,S[3]),ASSERT.equal(63,S[2])}function testdouble(){var S=new Buffer(10);mod_ctype.wdouble(0,"big",S,0),ASSERT.equal(0,S[0]),ASSERT.equal(0,S[1]),ASSERT.equal(0,S[2]),ASSERT.equal(0,S[3]),ASSERT.equal(0,S[4]),ASSERT.equal(0,S[5]),ASSERT.equal(0,S[6]),ASSERT.equal(0,S[7]),mod_ctype.wdouble(0,"little",S,0),ASSERT.equal(0,S[7]),ASSERT.equal(0,S[6]),ASSERT.equal(0,S[5]),ASSERT.equal(0,S[4]),ASSERT.equal(0,S[3]),ASSERT.equal(0,S[2]),ASSERT.equal(0,S[1]),ASSERT.equal(0,S[0]),mod_ctype.wdouble(0/0,"big",S,0),ASSERT.equal(127,S[0]),ASSERT.equal(240,S[1]),ASSERT.equal(0,S[2]),ASSERT.equal(0,S[3]),ASSERT.equal(0,S[4]),ASSERT.equal(0,S[5]),ASSERT.equal(0,S[6]),ASSERT.equal(23,S[7]),mod_ctype.wdouble(0/0,"little",S,0),ASSERT.equal(127,S[7]),ASSERT.equal(240,S[6]),ASSERT.equal(0,S[5]),ASSERT.equal(0,S[4]),ASSERT.equal(0,S[3]),ASSERT.equal(0,S[2]),ASSERT.equal(0,S[1]),ASSERT.equal(23,S[0]),mod_ctype.wdouble(Number.POSITIVE_INFINITY,"big",S,0),ASSERT.equal(127,S[0]),ASSERT.equal(240,S[1]),ASSERT.equal(0,S[2]),ASSERT.equal(0,S[3]),ASSERT.equal(0,S[4]),ASSERT.equal(0,S[5]),ASSERT.equal(0,S[6]),ASSERT.equal(0,S[7]),mod_ctype.wdouble(Number.POSITIVE_INFINITY,"little",S,0),ASSERT.equal(127,S[7]),ASSERT.equal(240,S[6]),ASSERT.equal(0,S[5]),ASSERT.equal(0,S[4]),ASSERT.equal(0,S[3]),ASSERT.equal(0,S[2]),ASSERT.equal(0,S[1]),ASSERT.equal(0,S[0]),mod_ctype.wdouble(Number.NEGATIVE_INFINITY,"big",S,0),ASSERT.equal(255,S[0]),ASSERT.equal(240,S[1]),ASSERT.equal(0,S[2]),ASSERT.equal(0,S[3]),ASSERT.equal(0,S[4]),ASSERT.equal(0,S[5]),ASSERT.equal(0,S[6]),ASSERT.equal(0,S[7]),mod_ctype.wdouble(Number.NEGATIVE_INFINITY,"little",S,0),ASSERT.equal(255,S[7]),ASSERT.equal(240,S[6]),ASSERT.equal(0,S[5]),ASSERT.equal(0,S[4]),ASSERT.equal(0,S[3]),ASSERT.equal(0,S[2]),ASSERT.equal(0,S[1]),ASSERT.equal(0,S[0]),mod_ctype.wdouble(1.125,"big",S,0),ASSERT.equal(63,S[0]),ASSERT.equal(242,S[1]),ASSERT.equal(0,S[2]),ASSERT.equal(0,S[3]),ASSERT.equal(0,S[4]),ASSERT.equal(0,S[5]),ASSERT.equal(0,S[6]),ASSERT.equal(0,S[7]),mod_ctype.wdouble(1.125,"little",S,0),ASSERT.equal(63,S[7]),ASSERT.equal(242,S[6]),ASSERT.equal(0,S[5]),ASSERT.equal(0,S[4]),ASSERT.equal(0,S[3]),ASSERT.equal(0,S[2]),ASSERT.equal(0,S[1]),ASSERT.equal(0,S[0]),mod_ctype.wdouble(-1.125,"big",S,0),ASSERT.equal(191,S[0]),ASSERT.equal(242,S[1]),ASSERT.equal(0,S[2]),ASSERT.equal(0,S[3]),ASSERT.equal(0,S[4]),ASSERT.equal(0,S[5]),ASSERT.equal(0,S[6]),ASSERT.equal(0,S[7]),mod_ctype.wdouble(-1.125,"little",S,0),ASSERT.equal(191,S[7]),ASSERT.equal(242,S[6]),ASSERT.equal(0,S[5]),ASSERT.equal(0,S[4]),ASSERT.equal(0,S[3]),ASSERT.equal(0,S[2]),ASSERT.equal(0,S[1]),ASSERT.equal(0,S[0]),mod_ctype.wdouble(1.4397318913736026e283,"big",S,0),ASSERT.equal(122,S[0]),ASSERT.equal(184,S[1]),ASSERT.equal(201,S[2]),ASSERT.equal(52,S[3]),ASSERT.equal(114,S[4]),ASSERT.equal(22,S[5]),ASSERT.equal(249,S[6]),ASSERT.equal(14,S[7]),mod_ctype.wdouble(1.4397318913736026e283,"little",S,0),ASSERT.equal(122,S[7]),ASSERT.equal(184,S[6]),ASSERT.equal(201,S[5]),ASSERT.equal(52,S[4]),ASSERT.equal(114,S[3]),ASSERT.equal(22,S[2]),ASSERT.equal(249,S[1]),ASSERT.equal(14,S[0]),mod_ctype.wdouble(-1.4397318913736026e283,"big",S,0),ASSERT.equal(250,S[0]),ASSERT.equal(184,S[1]),ASSERT.equal(201,S[2]),ASSERT.equal(52,S[3]),ASSERT.equal(114,S[4]),ASSERT.equal(22,S[5]),ASSERT.equal(249,S[6]),ASSERT.equal(14,S[7]),mod_ctype.wdouble(-1.4397318913736026e283,"little",S,0),ASSERT.equal(250,S[7]),ASSERT.equal(184,S[6]),ASSERT.equal(201,S[5]),ASSERT.equal(52,S[4]),ASSERT.equal(114,S[3]),ASSERT.equal(22,S[2]),ASSERT.equal(249,S[1]),ASSERT.equal(14,S[0]),mod_ctype.wdouble(8.82521232268344e-309,"big",S,0),ASSERT.equal(0,S[0]),ASSERT.equal(6,S[1]),ASSERT.equal(88,S[2]),ASSERT.equal(148,S[3]),ASSERT.equal(19,S[4]),ASSERT.equal(39,S[5]),ASSERT.equal(138,S[6]),ASSERT.equal(205,S[7]),mod_ctype.wdouble(8.82521232268344e-309,"little",S,0),ASSERT.equal(0,S[7]),ASSERT.equal(6,S[6]),ASSERT.equal(88,S[5]),ASSERT.equal(148,S[4]),ASSERT.equal(19,S[3]),ASSERT.equal(39,S[2]),ASSERT.equal(138,S[1]),ASSERT.equal(205,S[0]),mod_ctype.wdouble(-8.82521232268344e-309,"big",S,0),ASSERT.equal(128,S[0]),ASSERT.equal(6,S[1]),ASSERT.equal(88,S[2]),ASSERT.equal(148,S[3]),ASSERT.equal(19,S[4]),ASSERT.equal(39,S[5]),ASSERT.equal(138,S[6]),ASSERT.equal(205,S[7]),mod_ctype.wdouble(-8.82521232268344e-309,"little",S,0),ASSERT.equal(128,S[7]),ASSERT.equal(6,S[6]),ASSERT.equal(88,S[5]),ASSERT.equal(148,S[4]),ASSERT.equal(19,S[3]),ASSERT.equal(39,S[2]),ASSERT.equal(138,S[1]),ASSERT.equal(205,S[0]),mod_ctype.wdouble(5e-324,"big",S,0),ASSERT.equal(0,S[0]),ASSERT.equal(0,S[1]),ASSERT.equal(0,S[2]),ASSERT.equal(0,S[3]),ASSERT.equal(0,S[4]),ASSERT.equal(0,S[5]),ASSERT.equal(0,S[6]),ASSERT.equal(1,S[7]),mod_ctype.wdouble(5e-324,"little",S,0),ASSERT.equal(0,S[7]),ASSERT.equal(0,S[6]),ASSERT.equal(0,S[5]),ASSERT.equal(0,S[4]),ASSERT.equal(0,S[3]),ASSERT.equal(0,S[2]),ASSERT.equal(0,S[1]),ASSERT.equal(1,S[0]),mod_ctype.wdouble(-5e-324,"big",S,0),ASSERT.equal(128,S[0]),ASSERT.equal(0,S[1]),ASSERT.equal(0,S[2]),ASSERT.equal(0,S[3]),ASSERT.equal(0,S[4]),ASSERT.equal(0,S[5]),ASSERT.equal(0,S[6]),ASSERT.equal(1,S[7]),mod_ctype.wdouble(-5e-324,"little",S,0),ASSERT.equal(128,S[7]),ASSERT.equal(0,S[6]),ASSERT.equal(0,S[5]),ASSERT.equal(0,S[4]),ASSERT.equal(0,S[3]),ASSERT.equal(0,S[2]),ASSERT.equal(0,S[1]),ASSERT.equal(1,S[0]),mod_ctype.wdouble(2.225073858507201e-308,"big",S,0),ASSERT.equal(0,S[0]),ASSERT.equal(15,S[1]),ASSERT.equal(255,S[2]),ASSERT.equal(255,S[3]),ASSERT.equal(255,S[4]),ASSERT.equal(255,S[5]),ASSERT.equal(255,S[6]),ASSERT.equal(255,S[7]),mod_ctype.wdouble(2.225073858507201e-308,"little",S,0),ASSERT.equal(0,S[7]),ASSERT.equal(15,S[6]),ASSERT.equal(255,S[5]),ASSERT.equal(255,S[4]),ASSERT.equal(255,S[3]),ASSERT.equal(255,S[2]),ASSERT.equal(255,S[1]),ASSERT.equal(255,S[0]),mod_ctype.wdouble(-2.225073858507201e-308,"big",S,0),ASSERT.equal(128,S[0]),ASSERT.equal(15,S[1]),ASSERT.equal(255,S[2]),ASSERT.equal(255,S[3]),ASSERT.equal(255,S[4]),ASSERT.equal(255,S[5]),ASSERT.equal(255,S[6]),ASSERT.equal(255,S[7]),mod_ctype.wdouble(-2.225073858507201e-308,"little",S,0),ASSERT.equal(128,S[7]),ASSERT.equal(15,S[6]),ASSERT.equal(255,S[5]),ASSERT.equal(255,S[4]),ASSERT.equal(255,S[3]),ASSERT.equal(255,S[2]),ASSERT.equal(255,S[1]),ASSERT.equal(255,S[0]),mod_ctype.wdouble(2.2250738585072014e-308,"big",S,0),ASSERT.equal(0,S[0]),ASSERT.equal(16,S[1]),ASSERT.equal(0,S[2]),ASSERT.equal(0,S[3]),ASSERT.equal(0,S[4]),ASSERT.equal(0,S[5]),ASSERT.equal(0,S[6]),ASSERT.equal(0,S[7]),mod_ctype.wdouble(2.2250738585072014e-308,"little",S,0),ASSERT.equal(0,S[7]),ASSERT.equal(16,S[6]),ASSERT.equal(0,S[5]),ASSERT.equal(0,S[4]),ASSERT.equal(0,S[3]),ASSERT.equal(0,S[2]),ASSERT.equal(0,S[1]),ASSERT.equal(0,S[0]),mod_ctype.wdouble(-2.2250738585072014e-308,"big",S,0),ASSERT.equal(128,S[0]),ASSERT.equal(16,S[1]),ASSERT.equal(0,S[2]),ASSERT.equal(0,S[3]),ASSERT.equal(0,S[4]),ASSERT.equal(0,S[5]),ASSERT.equal(0,S[6]),ASSERT.equal(0,S[7]),mod_ctype.wdouble(-2.2250738585072014e-308,"little",S,0),ASSERT.equal(128,S[7]),ASSERT.equal(16,S[6]),ASSERT.equal(0,S[5]),ASSERT.equal(0,S[4]),ASSERT.equal(0,S[3]),ASSERT.equal(0,S[2]),ASSERT.equal(0,S[1]),ASSERT.equal(0,S[0]),mod_ctype.wdouble(1.7976931348623157e308,"big",S,0),ASSERT.equal(127,S[0]),ASSERT.equal(239,S[1]),ASSERT.equal(255,S[2]),ASSERT.equal(255,S[3]),ASSERT.equal(255,S[4]),ASSERT.equal(255,S[5]),ASSERT.equal(255,S[6]),ASSERT.equal(255,S[7]),mod_ctype.wdouble(1.7976931348623157e308,"little",S,0),ASSERT.equal(127,S[7]),ASSERT.equal(239,S[6]),ASSERT.equal(255,S[5]),ASSERT.equal(255,S[4]),ASSERT.equal(255,S[3]),ASSERT.equal(255,S[2]),ASSERT.equal(255,S[1]),ASSERT.equal(255,S[0]),mod_ctype.wdouble(-1.7976931348623157e308,"big",S,0),ASSERT.equal(255,S[0]),ASSERT.equal(239,S[1]),ASSERT.equal(255,S[2]),ASSERT.equal(255,S[3]),ASSERT.equal(255,S[4]),ASSERT.equal(255,S[5]),ASSERT.equal(255,S[6]),ASSERT.equal(255,S[7]),mod_ctype.wdouble(-1.7976931348623157e308,"little",S,0),ASSERT.equal(255,S[7]),ASSERT.equal(239,S[6]),ASSERT.equal(255,S[5]),ASSERT.equal(255,S[4]),ASSERT.equal(255,S[3]),ASSERT.equal(255,S[2]),ASSERT.equal(255,S[1]),ASSERT.equal(255,S[0]),S[0]=222,S[1]=173,S[2]=190,S[3]=239,S[4]=186,S[5]=221,S[6]=202,S[7]=254,S[8]=22,S[9]=121,mod_ctype.wdouble(-15130017658081283e-21,"big",S,2),ASSERT.equal(190,S[2]),ASSERT.equal(239,S[3]),ASSERT.equal(186,S[4]),ASSERT.equal(221,S[5]),ASSERT.equal(202,S[6]),ASSERT.equal(254,S[7]),ASSERT.equal(22,S[8]),ASSERT.equal(121,S[9]),mod_ctype.wdouble(-15130017658081283e-21,"little",S,2),ASSERT.equal(190,S[9]),ASSERT.equal(239,S[8]),ASSERT.equal(186,S[7]),ASSERT.equal(221,S[6]),ASSERT.equal(202,S[5]),ASSERT.equal(254,S[4]),ASSERT.equal(22,S[3]),ASSERT.equal(121,S[2])}var mod_ctype=null,ASSERT=null;testfloat(),testdouble();