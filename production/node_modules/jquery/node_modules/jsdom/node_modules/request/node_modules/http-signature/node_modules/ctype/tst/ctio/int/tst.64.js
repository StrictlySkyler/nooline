function testRead(){var S,e;e=new Buffer(10),e[0]=50,e[1]=101,e[2]=66,e[3]=86,e[4]=35,e[5]=255,e[6]=255,e[7]=255,e[8]=137,e[9]=17,S=mod_ctype.rsint64(e,"big",0),ASSERT.equal(845496918,S[0]),ASSERT.equal(603979775,S[1]),S=mod_ctype.rsint64(e,"big",1),ASSERT.equal(1698846243,S[0]),ASSERT.equal(4294967177,S[1]),S=mod_ctype.rsint64(e,"big",2),ASSERT.equal(1112941567,S[0]),ASSERT.equal(4294936849,S[1]),S=mod_ctype.rsint64(e,"little",0),ASSERT.equal(-220,S[0]),ASSERT.equal(-2847775438,S[1]),S=mod_ctype.rsint64(e,"little",1),ASSERT.equal(-1979711488,S[0]),ASSERT.equal(-3702111643,S[1]),S=mod_ctype.rsint64(e,"little",2),ASSERT.equal(294256639,S[0]),ASSERT.equal(4280505922,S[1]),e.fill(0),S=mod_ctype.rsint64(e,"big",0),ASSERT.equal(0,S[0]),ASSERT.equal(0,S[1]),S=mod_ctype.rsint64(e,"big",1),ASSERT.equal(0,S[0]),ASSERT.equal(0,S[1]),S=mod_ctype.rsint64(e,"big",2),ASSERT.equal(0,S[0]),ASSERT.equal(0,S[1]),S=mod_ctype.rsint64(e,"little",0),ASSERT.equal(0,S[0]),ASSERT.equal(0,S[1]),S=mod_ctype.rsint64(e,"little",1),ASSERT.equal(0,S[0]),ASSERT.equal(0,S[1]),S=mod_ctype.rsint64(e,"little",2),ASSERT.equal(0,S[0]),ASSERT.equal(0,S[1]),e.fill(255),S=mod_ctype.rsint64(e,"big",0),ASSERT.equal(0,S[0]),ASSERT.equal(-1,S[1]),S=mod_ctype.rsint64(e,"big",1),ASSERT.equal(0,S[0]),ASSERT.equal(-1,S[1]),S=mod_ctype.rsint64(e,"big",2),ASSERT.equal(0,S[0]),ASSERT.equal(-1,S[1]),S=mod_ctype.rsint64(e,"little",0),ASSERT.equal(0,S[0]),ASSERT.equal(-1,S[1]),S=mod_ctype.rsint64(e,"little",1),ASSERT.equal(0,S[0]),ASSERT.equal(-1,S[1]),S=mod_ctype.rsint64(e,"little",2),ASSERT.equal(0,S[0]),ASSERT.equal(-1,S[1]),e[0]=128,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=0,e[6]=0,e[7]=0,S=mod_ctype.rsint64(e,"big",0),ASSERT.equal(-2147483648,S[0]),ASSERT.equal(0,S[1]),e[7]=128,e[6]=0,e[5]=0,e[4]=0,e[3]=0,e[2]=0,e[1]=0,e[0]=0,S=mod_ctype.rsint64(e,"little",0),ASSERT.equal(-2147483648,S[0]),ASSERT.equal(0,S[1]),e[0]=128,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=0,e[6]=0,e[7]=1,S=mod_ctype.rsint64(e,"big",0),ASSERT.equal(-2147483647,S[0]),ASSERT.equal(-4294967295,S[1])}function testWriteZero(){var S,e;e=new Buffer(10),e.fill(102),S=[0,0],mod_ctype.wsint64(S,"big",e,0),ASSERT.equal(0,e[0]),ASSERT.equal(0,e[1]),ASSERT.equal(0,e[2]),ASSERT.equal(0,e[3]),ASSERT.equal(0,e[4]),ASSERT.equal(0,e[5]),ASSERT.equal(0,e[6]),ASSERT.equal(0,e[7]),ASSERT.equal(102,e[8]),ASSERT.equal(102,e[9]),e.fill(102),S=[0,0],mod_ctype.wsint64(S,"big",e,1),ASSERT.equal(102,e[0]),ASSERT.equal(0,e[1]),ASSERT.equal(0,e[2]),ASSERT.equal(0,e[3]),ASSERT.equal(0,e[4]),ASSERT.equal(0,e[5]),ASSERT.equal(0,e[6]),ASSERT.equal(0,e[7]),ASSERT.equal(0,e[8]),ASSERT.equal(102,e[9]),e.fill(102),S=[0,0],mod_ctype.wsint64(S,"big",e,2),ASSERT.equal(102,e[0]),ASSERT.equal(102,e[1]),ASSERT.equal(0,e[2]),ASSERT.equal(0,e[3]),ASSERT.equal(0,e[4]),ASSERT.equal(0,e[5]),ASSERT.equal(0,e[6]),ASSERT.equal(0,e[7]),ASSERT.equal(0,e[8]),ASSERT.equal(0,e[9]),e.fill(102),S=[0,0],mod_ctype.wsint64(S,"little",e,0),ASSERT.equal(0,e[0]),ASSERT.equal(0,e[1]),ASSERT.equal(0,e[2]),ASSERT.equal(0,e[3]),ASSERT.equal(0,e[4]),ASSERT.equal(0,e[5]),ASSERT.equal(0,e[6]),ASSERT.equal(0,e[7]),ASSERT.equal(102,e[8]),ASSERT.equal(102,e[9]),e.fill(102),S=[0,0],mod_ctype.wsint64(S,"little",e,1),ASSERT.equal(102,e[0]),ASSERT.equal(0,e[1]),ASSERT.equal(0,e[2]),ASSERT.equal(0,e[3]),ASSERT.equal(0,e[4]),ASSERT.equal(0,e[5]),ASSERT.equal(0,e[6]),ASSERT.equal(0,e[7]),ASSERT.equal(0,e[8]),ASSERT.equal(102,e[9]),e.fill(102),S=[0,0],mod_ctype.wsint64(S,"little",e,2),ASSERT.equal(102,e[0]),ASSERT.equal(102,e[1]),ASSERT.equal(0,e[2]),ASSERT.equal(0,e[3]),ASSERT.equal(0,e[4]),ASSERT.equal(0,e[5]),ASSERT.equal(0,e[6]),ASSERT.equal(0,e[7]),ASSERT.equal(0,e[8]),ASSERT.equal(0,e[9])}function testWrite(){var S,e;e=new Buffer(10),S=[2311254,135],e.fill(102),mod_ctype.wsint64(S,"big",e,0),ASSERT.equal(0,e[0]),ASSERT.equal(35,e[1]),ASSERT.equal(68,e[2]),ASSERT.equal(86,e[3]),ASSERT.equal(0,e[4]),ASSERT.equal(0,e[5]),ASSERT.equal(0,e[6]),ASSERT.equal(135,e[7]),ASSERT.equal(102,e[8]),ASSERT.equal(102,e[9]),e.fill(102),mod_ctype.wsint64(S,"big",e,1),ASSERT.equal(102,e[0]),ASSERT.equal(0,e[1]),ASSERT.equal(35,e[2]),ASSERT.equal(68,e[3]),ASSERT.equal(86,e[4]),ASSERT.equal(0,e[5]),ASSERT.equal(0,e[6]),ASSERT.equal(0,e[7]),ASSERT.equal(135,e[8]),ASSERT.equal(102,e[9]),e.fill(102),mod_ctype.wsint64(S,"big",e,2),ASSERT.equal(102,e[0]),ASSERT.equal(102,e[1]),ASSERT.equal(0,e[2]),ASSERT.equal(35,e[3]),ASSERT.equal(68,e[4]),ASSERT.equal(86,e[5]),ASSERT.equal(0,e[6]),ASSERT.equal(0,e[7]),ASSERT.equal(0,e[8]),ASSERT.equal(135,e[9]),e.fill(102),mod_ctype.wsint64(S,"little",e,0),ASSERT.equal(135,e[0]),ASSERT.equal(0,e[1]),ASSERT.equal(0,e[2]),ASSERT.equal(0,e[3]),ASSERT.equal(86,e[4]),ASSERT.equal(68,e[5]),ASSERT.equal(35,e[6]),ASSERT.equal(0,e[7]),ASSERT.equal(102,e[8]),ASSERT.equal(102,e[9]),e.fill(102),mod_ctype.wsint64(S,"little",e,1),ASSERT.equal(102,e[0]),ASSERT.equal(135,e[1]),ASSERT.equal(0,e[2]),ASSERT.equal(0,e[3]),ASSERT.equal(0,e[4]),ASSERT.equal(86,e[5]),ASSERT.equal(68,e[6]),ASSERT.equal(35,e[7]),ASSERT.equal(0,e[8]),ASSERT.equal(102,e[9]),e.fill(102),mod_ctype.wsint64(S,"little",e,2),ASSERT.equal(102,e[0]),ASSERT.equal(102,e[1]),ASSERT.equal(135,e[2]),ASSERT.equal(0,e[3]),ASSERT.equal(0,e[4]),ASSERT.equal(0,e[5]),ASSERT.equal(86,e[6]),ASSERT.equal(68,e[7]),ASSERT.equal(35,e[8]),ASSERT.equal(0,e[9]),S=[13345,883674554],e.fill(102),mod_ctype.wsint64(S,"big",e,0),ASSERT.equal(0,e[0]),ASSERT.equal(0,e[1]),ASSERT.equal(52,e[2]),ASSERT.equal(33,e[3]),ASSERT.equal(52,e[4]),ASSERT.equal(171,e[5]),ASSERT.equal(205,e[6]),ASSERT.equal(186,e[7]),ASSERT.equal(102,e[8]),ASSERT.equal(102,e[9]),e.fill(102),mod_ctype.wsint64(S,"big",e,1),ASSERT.equal(102,e[0]),ASSERT.equal(0,e[1]),ASSERT.equal(0,e[2]),ASSERT.equal(52,e[3]),ASSERT.equal(33,e[4]),ASSERT.equal(52,e[5]),ASSERT.equal(171,e[6]),ASSERT.equal(205,e[7]),ASSERT.equal(186,e[8]),ASSERT.equal(102,e[9]),e.fill(102),mod_ctype.wsint64(S,"big",e,2),ASSERT.equal(102,e[0]),ASSERT.equal(102,e[1]),ASSERT.equal(0,e[2]),ASSERT.equal(0,e[3]),ASSERT.equal(52,e[4]),ASSERT.equal(33,e[5]),ASSERT.equal(52,e[6]),ASSERT.equal(171,e[7]),ASSERT.equal(205,e[8]),ASSERT.equal(186,e[9]),e.fill(102),mod_ctype.wsint64(S,"little",e,0),ASSERT.equal(186,e[0]),ASSERT.equal(205,e[1]),ASSERT.equal(171,e[2]),ASSERT.equal(52,e[3]),ASSERT.equal(33,e[4]),ASSERT.equal(52,e[5]),ASSERT.equal(0,e[6]),ASSERT.equal(0,e[7]),ASSERT.equal(102,e[8]),ASSERT.equal(102,e[9]),e.fill(102),mod_ctype.wsint64(S,"little",e,1),ASSERT.equal(102,e[0]),ASSERT.equal(186,e[1]),ASSERT.equal(205,e[2]),ASSERT.equal(171,e[3]),ASSERT.equal(52,e[4]),ASSERT.equal(33,e[5]),ASSERT.equal(52,e[6]),ASSERT.equal(0,e[7]),ASSERT.equal(0,e[8]),ASSERT.equal(102,e[9]),e.fill(102),mod_ctype.wsint64(S,"little",e,2),ASSERT.equal(102,e[0]),ASSERT.equal(102,e[1]),ASSERT.equal(186,e[2]),ASSERT.equal(205,e[3]),ASSERT.equal(171,e[4]),ASSERT.equal(52,e[5]),ASSERT.equal(33,e[6]),ASSERT.equal(52,e[7]),ASSERT.equal(0,e[8]),ASSERT.equal(0,e[9]),S=[-2147483648,0],e.fill(102),mod_ctype.wsint64(S,"big",e,0),ASSERT.equal(128,e[0]),ASSERT.equal(0,e[1]),ASSERT.equal(0,e[2]),ASSERT.equal(0,e[3]),ASSERT.equal(0,e[4]),ASSERT.equal(0,e[5]),ASSERT.equal(0,e[6]),ASSERT.equal(0,e[7]),ASSERT.equal(102,e[8]),ASSERT.equal(102,e[9]),e.fill(102),mod_ctype.wsint64(S,"little",e,0),ASSERT.equal(0,e[0]),ASSERT.equal(0,e[1]),ASSERT.equal(0,e[2]),ASSERT.equal(0,e[3]),ASSERT.equal(0,e[4]),ASSERT.equal(0,e[5]),ASSERT.equal(0,e[6]),ASSERT.equal(128,e[7]),ASSERT.equal(102,e[8]),ASSERT.equal(102,e[9]),S=[-2147483647,-4294967295],e.fill(102),mod_ctype.wsint64(S,"big",e,0),ASSERT.equal(128,e[0]),ASSERT.equal(0,e[1]),ASSERT.equal(0,e[2]),ASSERT.equal(0,e[3]),ASSERT.equal(0,e[4]),ASSERT.equal(0,e[5]),ASSERT.equal(0,e[6]),ASSERT.equal(1,e[7]),ASSERT.equal(102,e[8]),ASSERT.equal(102,e[9]),e.fill(102),mod_ctype.wsint64(S,"little",e,0),ASSERT.equal(1,e[0]),ASSERT.equal(0,e[1]),ASSERT.equal(0,e[2]),ASSERT.equal(0,e[3]),ASSERT.equal(0,e[4]),ASSERT.equal(0,e[5]),ASSERT.equal(0,e[6]),ASSERT.equal(128,e[7]),ASSERT.equal(102,e[8]),ASSERT.equal(102,e[9]),S=[0,-1],e.fill(102),mod_ctype.wsint64(S,"big",e,0),ASSERT.equal(255,e[0]),ASSERT.equal(255,e[1]),ASSERT.equal(255,e[2]),ASSERT.equal(255,e[3]),ASSERT.equal(255,e[4]),ASSERT.equal(255,e[5]),ASSERT.equal(255,e[6]),ASSERT.equal(255,e[7]),ASSERT.equal(102,e[8]),ASSERT.equal(102,e[9]),e.fill(102),mod_ctype.wsint64(S,"little",e,0),ASSERT.equal(255,e[0]),ASSERT.equal(255,e[1]),ASSERT.equal(255,e[2]),ASSERT.equal(255,e[3]),ASSERT.equal(255,e[4]),ASSERT.equal(255,e[5]),ASSERT.equal(255,e[6]),ASSERT.equal(255,e[7]),ASSERT.equal(102,e[8]),ASSERT.equal(102,e[9])}function testWriteInvalid(){var S,e;e=new Buffer(4),S=[0,0],ASSERT.throws(function(){mod_ctype.wsint64(S,"big",e,0)},Error,"buffer too small"),ASSERT.throws(function(){mod_ctype.wsint64(S,"little",e,0)},Error,"buffer too small"),e=new Buffer(12),S=[0,0],ASSERT.throws(function(){mod_ctype.wsint64(S,"little",e,11)},Error,"write beyond end of buffer"),ASSERT.throws(function(){mod_ctype.wsint64(S,"big",e,11)},Error,"write beyond end of buffer"),e=new Buffer(12),S=[3.33,0],ASSERT.throws(function(){mod_ctype.wsint64(S,"big",e,1)},Error,"write fractions"),ASSERT.throws(function(){mod_ctype.wsint64(S,"little",e,1)},Error,"write fractions"),S=[0,3.3],ASSERT.throws(function(){mod_ctype.wsint64(S,"big",e,1)},Error,"write fractions"),ASSERT.throws(function(){mod_ctype.wsint64(S,"little",e,1)},Error,"write fractions"),S=[-3.33,0],ASSERT.throws(function(){mod_ctype.wsint64(S,"big",e,1)},Error,"write fractions"),ASSERT.throws(function(){mod_ctype.wsint64(S,"little",e,1)},Error,"write fractions"),S=[0,-3.3],ASSERT.throws(function(){mod_ctype.wsint64(S,"big",e,1)},Error,"write fractions"),ASSERT.throws(function(){mod_ctype.wsint64(S,"little",e,1)},Error,"write fractions"),S=[3.33,2.42],ASSERT.throws(function(){mod_ctype.wsint64(S,"big",e,1)},Error,"write fractions"),ASSERT.throws(function(){mod_ctype.wsint64(S,"little",e,1)},Error,"write fractions"),S=[3.33,-2.42],ASSERT.throws(function(){mod_ctype.wsint64(S,"big",e,1)},Error,"write fractions"),ASSERT.throws(function(){mod_ctype.wsint64(S,"little",e,1)},Error,"write fractions"),S=[-3.33,-2.42],ASSERT.throws(function(){mod_ctype.wsint64(S,"big",e,1)},Error,"write fractions"),ASSERT.throws(function(){mod_ctype.wsint64(S,"little",e,1)},Error,"write fractions"),S=[-3.33,2.42],ASSERT.throws(function(){mod_ctype.wsint64(S,"big",e,1)},Error,"write fractions"),ASSERT.throws(function(){mod_ctype.wsint64(S,"little",e,1)},Error,"write fractions"),e=new Buffer(12),S=[8388608,-50],ASSERT.throws(function(){mod_ctype.wsint64(S,"big",e,1)},Error,"write too large"),ASSERT.throws(function(){mod_ctype.wsint64(S,"little",e,1)},Error,"write too large"),S=[-8388608,50],ASSERT.throws(function(){mod_ctype.wsint64(S,"big",e,1)},Error,"write too large"),ASSERT.throws(function(){mod_ctype.wsint64(S,"little",e,1)},Error,"write too large"),e=new Buffer(12),S=[2147483648,0],ASSERT.throws(function(){mod_ctype.wsint64(S,"big",e,1)},Error,"write too large"),ASSERT.throws(function(){mod_ctype.wsint64(S,"little",e,1)},Error,"write too large"),S=[2147483647,4294967296],ASSERT.throws(function(){mod_ctype.wsint64(S,"big",e,1)},Error,"write too large"),ASSERT.throws(function(){mod_ctype.wsint64(S,"little",e,1)},Error,"write too large"),S=[0,34359738368],ASSERT.throws(function(){mod_ctype.wsint64(S,"big",e,1)},Error,"write too large"),ASSERT.throws(function(){mod_ctype.wsint64(S,"little",e,1)},Error,"write too large"),S=[0xffffffffff,68719473208],ASSERT.throws(function(){mod_ctype.wsint64(S,"big",e,1)},Error,"write too large"),ASSERT.throws(function(){mod_ctype.wsint64(S,"little",e,1)},Error,"write too large"),S=[35,68719473208],ASSERT.throws(function(){mod_ctype.wsint64(S,"big",e,1)},Error,"write too large"),ASSERT.throws(function(){mod_ctype.wsint64(S,"little",e,1)},Error,"write too large"),S=[-2147483648,-16773688],ASSERT.throws(function(){mod_ctype.wsint64(S,"big",e,1)},Error,"write too large"),ASSERT.throws(function(){mod_ctype.wsint64(S,"little",e,1)},Error,"write too large"),S=[-2147483652,-16773688],ASSERT.throws(function(){mod_ctype.wsint64(S,"big",e,1)},Error,"write too large"),ASSERT.throws(function(){mod_ctype.wsint64(S,"little",e,1)},Error,"write too large")}var mod_ctype=null,ASSERT=null;testRead(),testWrite(),testWriteZero(),testWriteInvalid();