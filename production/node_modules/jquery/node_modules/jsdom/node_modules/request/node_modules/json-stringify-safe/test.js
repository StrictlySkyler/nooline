function prune(){}function recycle(r,l){return l}function signer(r,l){var i,t,a=r+"{",c=!1;for(i in l)switch(c&&(a+=","),c=!0,a+=i+":",t=l[i],typeof t){case"object":a+=t?Array.isArray(t)?"Array":t.constructor&&t.constructor.name||"Object":"null";break;default:a+=typeof t}return a+="}"}var testObj,assert,a,b,c,d,multi,stringify=null,circularObj={a:"b"};circularObj.circularRef=circularObj,circularObj.list=[circularObj,circularObj],testObj={a:"b",circularRef:"[Circular ~]",list:["[Circular ~]","[Circular ~]"]},assert=null,assert.equal(JSON.stringify(testObj,null,2),stringify(circularObj,null,2)),assert.equal(JSON.stringify(testObj,null,2),JSON.stringify(circularObj,stringify.getSerialize(),2)),testObj={a:"b",list:[null,null]},assert.equal(JSON.stringify(testObj,null,2),stringify(circularObj,null,2,prune)),assert.throws(function(){stringify(circularObj,null,2,recycle)}),testObj={a:"b",circularRef:"circularRef{a:string,circularRef:Object,list:Array}",list:["0{a:string,circularRef:Object,list:Array}","1{a:string,circularRef:Object,list:Array}"]},assert.equal(JSON.stringify(testObj,null,2),stringify(circularObj,null,2,signer)),a={x:1},a.a=a,b={x:2},b.a=a,c={a:a,b:b},d={list:[a,b,c]},d.d=d,multi={list:[{x:1,a:"[Circular ~.list.0]"},{x:2,a:"[Circular ~.list.0]"},{a:"[Circular ~.list.0]",b:"[Circular ~.list.1]"}],d:"[Circular ~]"},assert.equal(JSON.stringify(multi,null,2),stringify(d,null,2)),console.log("ok");