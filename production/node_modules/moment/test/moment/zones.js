var moment=require("../../moment");exports.zones={setUp:function(e){moment.lang("en"),e()},tearDown:function(e){moment.lang("en"),e()},"set zone":function(e){var o=moment();o.zone(0),e.equal(o.zone(),0,"should be able to set the zone to 0"),o.zone(60),e.equal(o.zone(),60,"should be able to set the zone to 60"),o.zone(-60),e.equal(o.zone(),-60,"should be able to set the zone to -60"),e.done()},"set zone shorthand":function(e){var o=moment();o.zone(1),e.equal(o.zone(),60,"setting the zone to 1 should imply hours and convert to 60"),o.zone(-1),e.equal(o.zone(),-60,"setting the zone to -1 should imply hours and convert to -60"),o.zone(15),e.equal(o.zone(),900,"setting the zone to 15 should imply hours and convert to 900"),o.zone(-15),e.equal(o.zone(),-900,"setting the zone to -15 should imply hours and convert to -900"),o.zone(16),e.equal(o.zone(),16,"setting the zone to 16 should imply minutes"),o.zone(-16),e.equal(o.zone(),-16,"setting the zone to -16 should imply minutes"),e.done()},"set zone with string":function(e){var o=moment();o.zone("+00:00"),e.equal(o.zone(),0,"set the zone with a timezone string"),o.zone("2013-03-07T07:00:00-08:00"),e.equal(o.zone(),480,"set the zone with a string that does not begin with the timezone"),o.zone("2013-03-07T07:00:00+0100"),e.equal(o.zone(),-60,"set the zone with a string that uses the +0000 syntax"),e.done()},"change hours when changing the zone":function(e){var o=moment.utc([2e3,0,1,6]);o.zone(0),e.equal(o.hour(),6,"UTC 6AM should be 6AM at +0000"),o.zone(60),e.equal(o.hour(),5,"UTC 6AM should be 5AM at -0100"),o.zone(-60),e.equal(o.hour(),7,"UTC 6AM should be 7AM at +0100"),e.done()},"change minutes when changing the zone":function(e){var o=moment.utc([2e3,0,1,6,31]);o.zone(0),e.equal(o.format("HH:mm"),"06:31","UTC 6:31AM should be 6:31AM at +0000"),o.zone(30),e.equal(o.format("HH:mm"),"06:01","UTC 6:31AM should be 6:01AM at -0030"),o.zone(-30),e.equal(o.format("HH:mm"),"07:01","UTC 6:31AM should be 7:01AM at +0030"),o.zone(1380),e.equal(o.format("HH:mm"),"07:31","UTC 6:31AM should be 7:31AM at +1380"),e.done()},"distance from the unix epoch":function(e){var o=moment(),t=moment(o),n=moment(o),m=moment(o),u=moment(o);t.utc(),e.equal(+o,+t,"moment should equal moment.utc"),n.zone(-60),e.equal(+o,+n,"moment should equal moment.zone(-60)"),m.zone(480),e.equal(+o,+m,"moment should equal moment.zone(480)"),u.zone(1e3),e.equal(+o,+u,"moment should equal moment.zone(1000)"),e.done()},"update offset after changing any values":function(e){var o=moment.updateOffset,t=moment.utc([2e3,6,1]);moment.updateOffset=function(e){e.__doChange&&(+e>9624096e5?e.zone(120):e.zone(60))},e.equal(t.format("ZZ"),"+0000","should be at +0000"),e.equal(t.format("HH:mm"),"00:00","should start 12AM at +0000 timezone"),t.__doChange=!0,t.add("h",1),e.equal(t.format("ZZ"),"-0200","should be at -0200"),e.equal(t.format("HH:mm"),"23:00","1AM at +0000 should be 11PM at -0200 timezone"),t.subtract("h",1),e.equal(t.format("ZZ"),"-0100","should be at -0100"),e.equal(t.format("HH:mm"),"23:00","12AM at +0000 should be 11PM at -0100 timezone"),moment.updateOffset=o,e.done()},"getters and setters":function(e){var o=moment([2011,5,20]);e.equal(o.clone().zone(120).year(2012).year(),2012,"should get and set year correctly"),e.equal(o.clone().zone(120).month(1).month(),1,"should get and set month correctly"),e.equal(o.clone().zone(120).date(2).date(),2,"should get and set date correctly"),e.equal(o.clone().zone(120).day(1).day(),1,"should get and set day correctly"),e.equal(o.clone().zone(120).hour(1).hour(),1,"should get and set hour correctly"),e.equal(o.clone().zone(120).minute(1).minute(),1,"should get and set minute correctly"),e.done()},getters:function(e){var o=moment.utc([2012,0,1,0,0,0]);e.equal(o.clone().zone(120).year(),2011,"should get year correctly"),e.equal(o.clone().zone(120).month(),11,"should get month correctly"),e.equal(o.clone().zone(120).date(),31,"should get date correctly"),e.equal(o.clone().zone(120).hour(),22,"should get hour correctly"),e.equal(o.clone().zone(120).minute(),0,"should get minute correctly"),e.equal(o.clone().zone(-120).year(),2012,"should get year correctly"),e.equal(o.clone().zone(-120).month(),0,"should get month correctly"),e.equal(o.clone().zone(-120).date(),1,"should get date correctly"),e.equal(o.clone().zone(-120).hour(),2,"should get hour correctly"),e.equal(o.clone().zone(-120).minute(),0,"should get minute correctly"),e.equal(o.clone().zone(-90).year(),2012,"should get year correctly"),e.equal(o.clone().zone(-90).month(),0,"should get month correctly"),e.equal(o.clone().zone(-90).date(),1,"should get date correctly"),e.equal(o.clone().zone(-90).hour(),1,"should get hour correctly"),e.equal(o.clone().zone(-90).minute(),30,"should get minute correctly"),e.done()},from:function(e){var o=moment(),t=moment(o).zone(720),n=moment(o).zone(360),m=moment(o).zone(-690),u=moment(o).add("m",35);e.equal(o.from(u),t.from(u),"moment#from should be the same in all zones"),e.equal(o.from(u),n.from(u),"moment#from should be the same in all zones"),e.equal(o.from(u),m.from(u),"moment#from should be the same in all zones"),e.done()},diff:function(e){var o=moment(),t=moment(o).zone(720),n=moment(o).zone(360),m=moment(o).zone(-690),u=moment(o).add("m",35);e.equal(o.diff(u),t.diff(u),"moment#diff should be the same in all zones"),e.equal(o.diff(u),n.diff(u),"moment#diff should be the same in all zones"),e.equal(o.diff(u),m.diff(u),"moment#diff should be the same in all zones"),e.equal(o.diff(u,"minute",!0),t.diff(u,"minute",!0),"moment#diff should be the same in all zones"),e.equal(o.diff(u,"minute",!0),n.diff(u,"minute",!0),"moment#diff should be the same in all zones"),e.equal(o.diff(u,"minute",!0),m.diff(u,"minute",!0),"moment#diff should be the same in all zones"),e.equal(o.diff(u,"hour",!0),t.diff(u,"hour",!0),"moment#diff should be the same in all zones"),e.equal(o.diff(u,"hour",!0),n.diff(u,"hour",!0),"moment#diff should be the same in all zones"),e.equal(o.diff(u,"hour",!0),m.diff(u,"hour",!0),"moment#diff should be the same in all zones"),e.done()},"unix offset and timestamp":function(e){var o=moment(),t=moment(o).zone(720),n=moment(o).zone(360),m=moment(o).zone(-690);e.equal(o.unix(),t.unix(),"moment#unix should be the same in all zones"),e.equal(o.unix(),n.unix(),"moment#unix should be the same in all zones"),e.equal(o.unix(),m.unix(),"moment#unix should be the same in all zones"),e.equal(+o,+t,"moment#valueOf should be the same in all zones"),e.equal(+o,+n,"moment#valueOf should be the same in all zones"),e.equal(+o,+m,"moment#valueOf should be the same in all zones"),e.done()},cloning:function(e){e.equal(moment().zone(120).clone().zone(),120,"explicit cloning should retain the zone"),e.equal(moment().zone(-120).clone().zone(),-120,"explicit cloning should retain the zone"),e.equal(moment(moment().zone(120)).zone(),120,"implicit cloning should retain the zone"),e.equal(moment(moment().zone(-120)).zone(),-120,"implicit cloning should retain the zone"),e.done()},"start of / end of":function(e){var o=moment.utc([2010,1,2,0,0,0]).zone(450);e.equal(o.clone().startOf("day").hour(),0,"start of day should work on moments with a zone"),e.equal(o.clone().startOf("day").minute(),0,"start of day should work on moments with a zone"),e.equal(o.clone().startOf("hour").minute(),0,"start of hour should work on moments with a zone"),e.equal(o.clone().endOf("day").hour(),23,"end of day should work on moments with a zone"),e.equal(o.clone().endOf("day").minute(),59,"end of day should work on moments with a zone"),e.equal(o.clone().endOf("hour").minute(),59,"end of hour should work on moments with a zone"),e.done()},"reset zone with moment#utc":function(e){var o=moment.utc([2012]).zone(480);e.equal(o.clone().hour(),16,"different zone should have different hour"),e.equal(o.clone().utc().hour(),0,"calling moment#utc should reset the offset"),e.done()},"reset zone with moment#local":function(e){var o=moment([2012]).zone(480);e.equal(o.clone().local().hour(),0,"calling moment#local should reset the offset"),e.done()},toDate:function(e){var o=new Date,t=moment(o).zone(720).toDate(),n=moment(o).zone(360).toDate(),m=moment(o).zone(-690).toDate();e.equal(+o,+t,"moment#toDate should output a date with the right unix timestamp"),e.equal(+o,+n,"moment#toDate should output a date with the right unix timestamp"),e.equal(+o,+m,"moment#toDate should output a date with the right unix timestamp"),e.done()},"same / before / after":function(e){var o=moment().utc(),t=moment(o).zone(120),n=moment(o).zone(-120);e.ok(o.isSame(t),"two moments with different offsets should be the same"),e.ok(o.isSame(n),"two moments with different offsets should be the same"),e.ok(o.isSame(t,"hour"),"two moments with different offsets should be the same hour"),e.ok(o.isSame(n,"hour"),"two moments with different offsets should be the same hour"),o.add("hour",1),e.ok(o.isAfter(t),"isAfter should work with two moments with different offsets"),e.ok(o.isAfter(n),"isAfter should work with two moments with different offsets"),e.ok(o.isAfter(t,"hour"),"isAfter:hour should work with two moments with different offsets"),e.ok(o.isAfter(n,"hour"),"isAfter:hour should work with two moments with different offsets"),o.subtract("hour",2),e.ok(o.isBefore(t),"isBefore should work with two moments with different offsets"),e.ok(o.isBefore(n),"isBefore should work with two moments with different offsets"),e.ok(o.isBefore(t,"hour"),"isBefore:hour should work with two moments with different offsets"),e.ok(o.isBefore(n,"hour"),"isBefore:hour should work with two moments with different offsets"),e.done()},"add / subtract over dst":function(e){var o=moment.updateOffset,t=moment.utc([2e3,2,31,3]);moment.updateOffset=function(e){e.clone().utc().month()>2?e.zone(-60):e.zone(0)},e.equal(t.hour(),3,"should start at 00:00"),t.add("hour",24),e.equal(t.hour(),4,"adding 24 hours should disregard dst"),t.subtract("hour",24),e.equal(t.hour(),3,"subtracting 24 hours should disregard dst"),t.add("day",1),e.equal(t.hour(),3,"adding 1 day should have the same hour"),t.subtract("day",1),e.equal(t.hour(),3,"subtracting 1 day should have the same hour"),t.add("month",1),e.equal(t.hour(),3,"adding 1 month should have the same hour"),t.subtract("month",1),e.equal(t.hour(),3,"subtracting 1 month should have the same hour"),moment.updateOffset=o,e.done()},isDST:function(e){var o=moment.updateOffset;moment.updateOffset=function(e){e.month()>2&&e.month()<9?e.zone(-60):e.zone(0)},e.ok(!moment().month(0).isDST(),"Jan should not be summer dst"),e.ok(moment().month(6).isDST(),"Jul should be summer dst"),e.ok(!moment().month(11).isDST(),"Dec should not be summer dst"),moment.updateOffset=function(e){e.month()>2&&e.month()<9?e.zone(0):e.zone(-60)},e.ok(moment().month(0).isDST(),"Jan should be winter dst"),e.ok(!moment().month(6).isDST(),"Jul should not be winter dst"),e.ok(moment().month(11).isDST(),"Dec should be winter dst"),moment.updateOffset=o,e.done()},"zone names":function(e){e.expect(8),e.equal(moment().zoneAbbr(),"","Local zone abbr should be empty"),e.equal(moment().format("z"),"","Local zone formatted abbr should be empty"),e.equal(moment().zoneName(),"","Local zone name should be empty"),e.equal(moment().format("zz"),"","Local zone formatted name should be empty"),e.equal(moment.utc().zoneAbbr(),"UTC","UTC zone abbr should be UTC"),e.equal(moment.utc().format("z"),"UTC","UTC zone formatted abbr should be UTC"),e.equal(moment.utc().zoneName(),"Coordinated Universal Time","UTC zone abbr should be Coordinated Universal Time"),e.equal(moment.utc().format("zz"),"Coordinated Universal Time","UTC zone formatted abbr should be Coordinated Universal Time"),e.done()},"hours alignment with UTC":function(e){e.expect(4),e.equals(moment().zone(120).hasAlignedHourOffset(),!0),e.equals(moment().zone(-180).hasAlignedHourOffset(),!0),e.equals(moment().zone(90).hasAlignedHourOffset(),!1),e.equals(moment().zone(-90).hasAlignedHourOffset(),!1),e.done()},"hours alignment with other zone":function(e){e.expect(16);var o=moment().zone(120);e.equals(o.hasAlignedHourOffset(moment().zone(180)),!0),e.equals(o.hasAlignedHourOffset(moment().zone(-180)),!0),e.equals(o.hasAlignedHourOffset(moment().zone(90)),!1),e.equals(o.hasAlignedHourOffset(moment().zone(-90)),!1),o=moment().zone(90),e.equals(o.hasAlignedHourOffset(moment().zone(180)),!1),e.equals(o.hasAlignedHourOffset(moment().zone(-180)),!1),e.equals(o.hasAlignedHourOffset(moment().zone(30)),!0),e.equals(o.hasAlignedHourOffset(moment().zone(-30)),!0),o=moment().zone(-60),e.equals(o.hasAlignedHourOffset(moment().zone(180)),!0),e.equals(o.hasAlignedHourOffset(moment().zone(-180)),!0),e.equals(o.hasAlignedHourOffset(moment().zone(90)),!1),e.equals(o.hasAlignedHourOffset(moment().zone(-90)),!1),o=moment().zone(25),e.equals(o.hasAlignedHourOffset(moment().zone(-35)),!0),e.equals(o.hasAlignedHourOffset(moment().zone(85)),!0),e.equals(o.hasAlignedHourOffset(moment().zone(35)),!1),e.equals(o.hasAlignedHourOffset(moment().zone(-85)),!1),e.done()},"parse zone":function(e){e.expect(2);var o=moment("2013-01-01T00:00:00-13:00").parseZone();e.equal(o.zone(),780),e.equal(o.hours(),0),e.done()},"parse zone static":function(e){e.expect(2);var o=moment.parseZone("2013-01-01T00:00:00-13:00");e.equal(o.zone(),780),e.equal(o.hours(),0),e.done()}};