var moment=require("../../moment");exports.format={"format YY":function(e){e.expect(1);var t=moment(new Date(2009,1,14,15,25,50,125));e.equal(t.format("YY"),"09","YY ---> 09"),e.done()},"format escape brackets":function(e){e.expect(10),moment.lang("en");var t=moment(new Date(2009,1,14,15,25,50,125));e.equal(t.format("[day]"),"day","Single bracket"),e.equal(t.format("[day] YY [YY]"),"day 09 YY","Double bracket"),e.equal(t.format("[YY"),"[09","Un-ended bracket"),e.equal(t.format("[[YY]]"),"[YY]","Double nested brackets"),e.equal(t.format("[[]"),"[","Escape open bracket"),e.equal(t.format("[Last]"),"Last","localized tokens"),e.equal(t.format("[L] L"),"L 02/14/2009","localized tokens with escaped localized tokens"),e.equal(t.format("[L LL LLL LLLL aLa]"),"L LL LLL LLLL aLa","localized tokens with escaped localized tokens"),e.equal(t.format("[LLL] LLL"),"LLL February 14 2009 3:25 PM","localized tokens with escaped localized tokens (recursion)"),e.equal(t.format("YYYY[\n]DD[\n]"),"2009\n14\n","Newlines"),e.done()},"format milliseconds":function(e){e.expect(6);var t=moment(new Date(2009,1,14,15,25,50,123));e.equal(t.format("S"),"1","Deciseconds"),e.equal(t.format("SS"),"12","Centiseconds"),e.equal(t.format("SSS"),"123","Milliseconds"),t.milliseconds(789),e.equal(t.format("S"),"7","Deciseconds"),e.equal(t.format("SS"),"78","Centiseconds"),e.equal(t.format("SSS"),"789","Milliseconds"),e.done()},"format timezone":function(e){e.expect(2);var t=moment(new Date(2010,1,14,15,25,50,125)),o='moment().format("z") = '+t.format("z")+' It should be something like "PST"';-60===moment().zone()&&(o+="For UTC+1 this is a known issue, see https://github.com/timrwood/moment/issues/162"),e.ok(t.format("Z").match(/^[\+\-]\d\d:\d\d$/),t.format("Z")+' should be something like "+07:30"'),e.ok(t.format("ZZ").match(/^[\+\-]\d{4}$/),t.format("ZZ")+' should be something like "+0700"'),e.done()},"format multiple with zone":function(e){e.expect(1);var t=moment("2012-10-08 -1200",["YYYY-MM-DD HH:mm ZZ","YYYY-MM-DD ZZ","YYYY-MM-DD"]);e.equals(t.format("YYYY-MM"),"2012-10","Parsing multiple formats should not crash with different sized formats"),e.done()},isDST:function(e){e.expect(2);var t=new Date(2011,0,1).getTimezoneOffset(),o=new Date(2011,6,1).getTimezoneOffset(),a=o>t,n=t>o,m=moment([2011]),s=moment([2011,6]);a&&n?(e.ok(0,"January and July cannot both be in DST"),e.ok(0,"January and July cannot both be in DST")):a?(e.ok(m.isDST(),"January 1 is DST"),e.ok(!s.isDST(),"July 1 is not DST")):n?(e.ok(!m.isDST(),"January 1 is not DST"),e.ok(s.isDST(),"July 1 is DST")):(e.ok(!m.isDST(),"January 1 is not DST"),e.ok(!s.isDST(),"July 1 is not DST")),e.done()},"unix timestamp":function(e){e.expect(5);var t=moment("1234567890.123","X");e.equals(t.format("X"),"1234567890","unix timestamp without milliseconds"),e.equals(t.format("X.S"),"1234567890.1","unix timestamp with deciseconds"),e.equals(t.format("X.SS"),"1234567890.12","unix timestamp with centiseconds"),e.equals(t.format("X.SSS"),"1234567890.123","unix timestamp with milliseconds"),t=moment(1234567890.123,"X"),e.equals(t.format("X"),"1234567890","unix timestamp as integer"),e.done()},zone:function(e){e.expect(3),moment().zone()>0&&e.ok(moment().format("ZZ").indexOf("-")>-1,"When the zone() offset is greater than 0, the ISO offset should be less than zero"),moment().zone()<0&&e.ok(moment().format("ZZ").indexOf("+")>-1,"When the zone() offset is less than 0, the ISO offset should be greater than zero"),0===moment().zone()&&e.ok(moment().format("ZZ").indexOf("+")>-1,"When the zone() offset is equal to 0, the ISO offset should be positive zero"),0===moment().zone()?e.equal(moment().zone(),0,"moment.fn.zone should be a multiple of 15 (was "+moment().zone()+")"):e.equal(moment().zone()%15,0,"moment.fn.zone should be a multiple of 15 (was "+moment().zone()+")"),e.equal(moment().zone(),(new Date).getTimezoneOffset(),"zone should equal getTimezoneOffset"),e.done()},"default format":function(e){e.expect(1);var t=/\d{4}.\d\d.\d\dT\d\d.\d\d.\d\d[\+\-]\d\d:\d\d/;e.ok(t.exec(moment().format()),"default format ("+moment().format()+") should match ISO"),e.done()},"escaping quotes":function(e){e.expect(4),moment.lang("en");var t=moment([2012,0]);e.equal(t.format("MMM 'YY"),"Jan '12","Should be able to format with single parenthesis"),e.equal(t.format('MMM "YY'),'Jan "12',"Should be able to format with double parenthesis"),e.equal(t.format("MMM 'YY"),"Jan '12","Should be able to format with single parenthesis"),e.equal(t.format('MMM "YY'),'Jan "12',"Should be able to format with double parenthesis"),e.done()},toJSON:function(e){var t="undefined"!=typeof JSON&&JSON.stringify&&JSON.stringify.call,o=moment("2012-10-09T21:30:40.678+0100");e.expect(t?2:1),e.equal(o.toJSON(),"2012-10-09T20:30:40.678Z","should output ISO8601 on moment.fn.toJSON"),t&&e.equal(JSON.stringify({date:o}),'{"date":"2012-10-09T20:30:40.678Z"}',"should output ISO8601 on JSON.stringify"),e.done()},toISOString:function(e){var t=moment.utc("2012-10-09T20:30:40.678");e.equal(t.toISOString(),"2012-10-09T20:30:40.678Z","should output ISO8601 on moment.fn.toISOString"),e.done()},"weeks format":function(e){var t,o,a,n={"2005-01-02":"2004-53","2005-12-31":"2005-52","2007-01-01":"2007-01","2007-12-30":"2007-52","2007-12-31":"2008-01","2008-01-01":"2008-01","2008-12-28":"2008-52","2008-12-29":"2009-01","2008-12-30":"2009-01","2008-12-31":"2009-01","2009-01-01":"2009-01","2009-12-31":"2009-53","2010-01-01":"2009-53","2010-01-02":"2009-53","2010-01-03":"2009-53"};for(t in n)o=n[t].split("-").pop(),a=moment(t).format("WW"),e.equal(o,a,t+": should be "+o+", but "+a);e.done()},"iso week year formats":function(e){var t,o,a,n,m,s={"2005-01-02":"2004-53","2005-12-31":"2005-52","2007-01-01":"2007-01","2007-12-30":"2007-52","2007-12-31":"2008-01","2008-01-01":"2008-01","2008-12-28":"2008-52","2008-12-29":"2009-01","2008-12-30":"2009-01","2008-12-31":"2009-01","2009-01-01":"2009-01","2009-12-31":"2009-53","2010-01-01":"2009-53","2010-01-02":"2009-53","2010-01-03":"2009-53"};for(t in s)o=s[t].split("-")[0],a=moment(t).format("GGGGG"),e.equal("0"+o,a,t+": should be "+o+", but "+n),n=moment(t).format("GGGG"),e.equal(o,n,t+": should be "+o+", but "+n),m=moment(t).format("GG"),e.equal(o.slice(2,4),m,t+": should be "+o+", but "+m);e.done()},"week year formats":function(e){var t,o,a,n,m,s={"2005-01-02":"2004-53","2005-12-31":"2005-52","2007-01-01":"2007-01","2007-12-30":"2007-52","2007-12-31":"2008-01","2008-01-01":"2008-01","2008-12-28":"2008-52","2008-12-29":"2009-01","2008-12-30":"2009-01","2008-12-31":"2009-01","2009-01-01":"2009-01","2009-12-31":"2009-53","2010-01-01":"2009-53","2010-01-02":"2009-53","2010-01-03":"2009-53"};moment.lang("en-gb");for(t in s)m=s[t].split("-")[0],o=moment(t).format("ggggg"),e.equal("0"+m,o,t+": should be "+m+", but "+a),a=moment(t).format("gggg"),e.equal(m,a,t+": should be "+m+", but "+a),n=moment(t).format("gg"),e.equal(m.slice(2,4),n,t+": should be "+m+", but "+n);e.done()},"iso weekday formats":function(e){e.expect(7),e.equal(moment([1985,1,4]).format("E"),"1","Feb  4 1985 is Monday    -- 1st day"),e.equal(moment([2029,8,18]).format("E"),"2","Sep 18 2029 is Tuesday   -- 2nd day"),e.equal(moment([2013,3,24]).format("E"),"3","Apr 24 2013 is Wednesday -- 3rd day"),e.equal(moment([2015,2,5]).format("E"),"4","Mar  5 2015 is Thursday  -- 4th day"),e.equal(moment([1970,0,2]).format("E"),"5","Jan  2 1970 is Friday    -- 5th day"),e.equal(moment([2001,4,12]).format("E"),"6","May 12 2001 is Saturday  -- 6th day"),e.equal(moment([2e3,0,2]).format("E"),"7","Jan  2 2000 is Sunday    -- 7th day"),e.done()},"weekday formats":function(e){e.expect(7),moment.lang("dow: 3,doy: 5",{week:{dow:3,doy:5}}),e.equal(moment([1985,1,6]).format("e"),"0","Feb  6 1985 is Wednesday -- 0th day"),e.equal(moment([2029,8,20]).format("e"),"1","Sep 20 2029 is Thursday  -- 1st day"),e.equal(moment([2013,3,26]).format("e"),"2","Apr 26 2013 is Friday    -- 2nd day"),e.equal(moment([2015,2,7]).format("e"),"3","Mar  7 2015 is Saturday  -- 3nd day"),e.equal(moment([1970,0,4]).format("e"),"4","Jan  4 1970 is Sunday    -- 4th day"),e.equal(moment([2001,4,14]).format("e"),"5","May 14 2001 is Monday    -- 5th day"),e.equal(moment([2e3,0,4]).format("e"),"6","Jan  4 2000 is Tuesday   -- 6th day"),e.done()},"toString is just human readable format":function(e){e.expect(1);var t=moment(new Date(2009,1,5,15,25,50,125));e.equal(""+t,t.format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")),e.done()},"toJSON skips postformat":function(e){e.expect(1),moment.lang("postformat",{postformat:function(e){e.replace(/./g,"X")}}),e.equal(moment.utc([2e3,0,1]).toJSON(),"2000-01-01T00:00:00.000Z","toJSON doesn't postformat"),moment.lang("postformat",null),e.done()},"calendar day timezone":function(e){e.expect(10);var t=[60,-60,90,-90,360,-360,720,-720],o=moment().utc().startOf("day").subtract({m:1}),a=moment().local().startOf("day").subtract({m:1});t.forEach(function(t){var o=moment().zone(t).startOf("day").subtract({m:1});e.equal(moment(o).zone(t).calendar(),"Yesterday at 11:59 PM","Yesterday at 11:59 PM, not Today, or the wrong time")}),e.equal(moment(o).utc().calendar(),"Yesterday at 11:59 PM","Yesterday at 11:59 PM, not Today, or the wrong time"),e.equal(moment(a).local().calendar(),"Yesterday at 11:59 PM","Yesterday at 11:59 PM, not Today, or the wrong time"),e.done()},invalid:function(e){moment.lang("en"),e.equal(moment.invalid().format(),"Invalid date"),e.equal(moment.invalid().format("YYYY-MM-DD"),"Invalid date"),e.done()}};