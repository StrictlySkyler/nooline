(function(){var e,i,t,d,n,c,p=this;for(i=null.preferredEncodings,this["Should return identity encoding when no encoding is provided"]=function(e){return e.deepEqual(i(null),["identity"]),e.done()},this["Should include the identity encoding even if not explicity listed"]=function(e){return e.ok(-1!==i("gzip").indexOf("identity")),e.done()},this["Should not return identity encoding if q = 0"]=function(e){return e.ok(-1===i("identity;q=0").indexOf("identity")),e.done()},d=function(e){return p["Should return "+e.selected+" for accept-encoding header "+e.accept+" with provided encoding "+e.provided]=function(t){return t.deepEqual(i(e.accept,e.provided),e.selected),t.done()}},t=[{accept:"gzip",provided:["identity","gzip"],selected:["gzip","identity"]},{accept:"gzip, compress",provided:["compress"],selected:["compress"]},{accept:"deflate",provided:["gzip","identity"],selected:["identity"]},{accept:"*",provided:["identity","gzip"],selected:["identity","gzip"]},{accept:"gzip, compress",provided:["compress","identity"],selected:["compress","identity"]},{accept:"gzip;q=0.8, identity;q=0.5, *;q=0.3",provided:["identity","gzip","compress"],selected:["gzip","identity","compress"]},{accept:"gzip;q=0.8, compress",provided:["gzip","compress"],selected:["compress","gzip"]},{accept:"gzip;q=0.8, compress",provided:null,selected:["compress","gzip","identity"]}],n=0,c=t.length;c>n;n++)e=t[n],d(e)}).call(this);