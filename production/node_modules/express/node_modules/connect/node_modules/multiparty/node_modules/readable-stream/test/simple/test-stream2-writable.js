// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function TestWriter(){W.apply(this,arguments),this.buffer=[],this.written=0}function test(e,n){count++,tests.push([e,n])}function run(){var e,n,t=tests.shift();return t?(e=t[0],n=t[1],console.log("# %s",e),n({same:assert.deepEqual,equal:assert.equal,end:function(){count--,run()}}),void 0):console.error("ok")}var chunks,i,tests,count,common=null,W=null.Writable,D=null.Duplex,assert=null,util=null;for(util.inherits(TestWriter,W),TestWriter.prototype._write=function(e,n,t){setTimeout(function(){this.buffer.push(""+e),this.written+=e.length,t()}.bind(this),Math.floor(10*Math.random()))},chunks=Array(50),i=0;i<chunks.length;i++)chunks[i]=Array(i+1).join("x");tests=[],count=0,process.on("exit",function(){assert.equal(count,0)}),process.nextTick(run),test("write fast",function(e){var n=new TestWriter({highWaterMark:100});n.on("finish",function(){e.same(n.buffer,chunks,"got chunks in the right order"),e.end()}),chunks.forEach(function(e){n.write(e)}),n.end()}),test("write slow",function(e){var n,t=new TestWriter({highWaterMark:100});t.on("finish",function(){e.same(t.buffer,chunks,"got chunks in the right order"),e.end()}),n=0,function i(){t.write(chunks[n++]),n<chunks.length?setTimeout(i,10):t.end()}()}),test("write backpressure",function(e){var n,t=new TestWriter({highWaterMark:50}),i=0;t.on("finish",function(){e.same(t.buffer,chunks,"got chunks in the right order"),e.equal(i,17),e.end()}),t.on("drain",function(){i++}),n=0,function r(){do var e=t.write(chunks[n++]);while(e!==!1&&n<chunks.length);n<chunks.length?(assert(t._writableState.length>=50),t.once("drain",r)):t.end()}()}),test("write bufferize",function(e){var n=new TestWriter({highWaterMark:100}),t=["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le",void 0];n.on("finish",function(){e.same(n.buffer,chunks,"got the expected chunks")}),chunks.forEach(function(e,i){var r=t[i%t.length];e=new Buffer(e),n.write(e.toString(r),r)}),e.end()}),test("write no bufferize",function(e){var n,t=new TestWriter({highWaterMark:100,decodeStrings:!1});t._write=function(e,n,t){return assert("string"==typeof e),e=new Buffer(e,n),TestWriter.prototype._write.call(this,e,n,t)},n=["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le",void 0],t.on("finish",function(){e.same(t.buffer,chunks,"got the expected chunks")}),chunks.forEach(function(e,i){var r=n[i%n.length];e=new Buffer(e),t.write(e.toString(r),r)}),e.end()}),test("write callbacks",function(e){var n,t=chunks.map(function(e,n){return[n,function(){t._called[n]=e}]}).reduce(function(e,n){return e["callback-"+n[0]]=n[1],e},{});t._called=[],n=new TestWriter({highWaterMark:100}),n.on("finish",function(){process.nextTick(function(){e.same(n.buffer,chunks,"got chunks in the right order"),e.same(t._called,chunks,"called all callbacks"),e.end()})}),chunks.forEach(function(e,i){n.write(e,t["callback-"+i])}),n.end()}),test("end callback",function(e){var n=new TestWriter;n.end(function(){e.end()})}),test("end callback with chunk",function(e){var n=new TestWriter;n.end(new Buffer("hello world"),function(){e.end()})}),test("end callback with chunk and encoding",function(e){var n=new TestWriter;n.end("hello world","ascii",function(){e.end()})}),test("end callback after .write() call",function(e){var n=new TestWriter;n.write(new Buffer("hello world")),n.end(function(){e.end()})}),test("end callback called after write callback",function(e){var n=new TestWriter,t=!1;n.write(new Buffer("hello world"),function(){t=!0}),n.end(function(){e.equal(t,!0),e.end()})}),test("encoding should be ignored for buffers",function(e){var n,t=new W,i="018b5e9a8f6236ffe30e31baf80d2cf6eb";t._write=function(n){e.equal(n.toString("hex"),i),e.end()},n=new Buffer(i,"hex"),t.write(n,"binary")}),test("writables are not pipable",function(e){var n,t=new W;t._write=function(){},n=!1,t.on("error",function(){n=!0}),t.pipe(process.stdout),assert(n),e.end()}),test("duplexes are pipable",function(e){var n,t=new D;t._read=function(){},t._write=function(){},n=!1,t.on("error",function(){n=!0}),t.pipe(process.stdout),assert(!n),e.end()}),test("end(chunk) two times is an error",function(e){var n,t=new W;t._write=function(){},n=!1,t.on("error",function(t){n=!0,e.equal(t.message,"write after end")}),t.end("this is the end"),t.end("and so is this"),process.nextTick(function(){assert(n),e.end()})}),test("dont end while writing",function(e){var n=new W,t=!1;n._write=function(e,n,i){assert(!this.writing),t=!0,this.writing=!0,setTimeout(function(){this.writing=!1,i()})},n.on("finish",function(){assert(t),e.end()}),n.write(Buffer(0)),n.end()}),test("finish does not come before write cb",function(e){var n=new W,t=!1;n._write=function(e,n,i){setTimeout(function(){t=!0,i()},10)},n.on("finish",function(){assert(t),e.end()}),n.write(Buffer(0)),n.end()}),test("finish does not come before sync _write cb",function(e){var n=new W,t=!1;n._write=function(e,n,t){t()},n.on("finish",function(){assert(t),e.end()}),n.write(Buffer(0),function(){t=!0}),n.end()});