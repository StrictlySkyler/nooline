var xml=null,expect=null.expect;describe("xml module",function(){it("can be have no elements",function(t){expect(xml()).to.be.empty,expect(xml([])).to.be.empty,expect(xml("test")).to.equal("test"),expect(xml("test")).to.equal("test"),expect(xml("scotch & whisky")).to.equal("scotch &amp; whisky"),expect(xml("bob's escape character")).to.equal("bob&apos;s escape character"),t()}),it("works with simple options",function(t){expect(xml([{a:{}}])).to.equal("<a/>"),expect(xml([{a:[]}])).to.equal("<a></a>"),expect(xml([{a:-1}])).to.equal("<a>-1</a>"),expect(xml([{a:!1}])).to.equal("<a>false</a>"),expect(xml([{a:"test"}])).to.equal("<a>test</a>"),expect(xml({a:{}})).to.equal("<a/>"),expect(xml({a:[]})).to.equal("<a></a>"),expect(xml({a:-1})).to.equal("<a>-1</a>"),expect(xml({a:!1})).to.equal("<a>false</a>"),expect(xml({a:"test"})).to.equal("<a>test</a>"),expect(xml([{a:"test"},{b:123},{c:-.5}])).to.equal("<a>test</a><b>123</b><c>-0.5</c>"),t()}),it("works with deeply nested objects",function(t){expect(xml([{a:[{b:[{c:1},{c:2},{c:3}]}]}]),"<a><b><c>1</c><c>2</c><c>3</c></b></a>"),t()}),it("indents property",function(t){expect(xml([{a:[{b:[{c:1},{c:2},{c:3}]}]}],!0)).to.equal("<a>\n    <b>\n        <c>1</c>\n        <c>2</c>\n        <c>3</c>\n    </b>\n</a>"),expect(xml([{a:[{b:[{c:1},{c:2},{c:3}]}]}],"  ")).to.equal("<a>\n  <b>\n    <c>1</c>\n    <c>2</c>\n    <c>3</c>\n  </b>\n</a>"),expect(xml([{a:[{b:[{c:1},{c:2},{c:3}]}]}],"	")).to.equal("<a>\n	<b>\n		<c>1</c>\n		<c>2</c>\n		<c>3</c>\n	</b>\n</a>"),t()}),it("supports xml attributes",function(t){expect(xml([{b:{_attr:{}}}]),"<b/>"),expect(xml([{a:{_attr:{attribute1:"some value",attribute2:12345}}}])).to.equal('<a attribute1="some value" attribute2="12345"/>'),expect(xml([{a:[{_attr:{attribute1:"some value",attribute2:12345}}]}])).to.equal('<a attribute1="some value" attribute2="12345"></a>'),expect(xml([{a:[{_attr:{attribute1:"some value",attribute2:12345}},"content"]}])).to.equal('<a attribute1="some value" attribute2="12345">content</a>'),t()}),it("supports cdata",function(t){expect(xml([{a:{_cdata:"This is some <strong>CDATA</strong>"}}])).to.equal("<a><![CDATA[This is some <strong>CDATA</strong>]]></a>"),expect(xml([{a:{_attr:{attribute1:"some value",attribute2:12345},_cdata:"This is some <strong>CDATA</strong>"}}])).to.equal('<a attribute1="some value" attribute2="12345"><![CDATA[This is some <strong>CDATA</strong>]]></a>'),expect(xml([{a:{_cdata:"This is some <strong>CDATA</strong> with ]]> and then again ]]>"}}])).to.equal("<a><![CDATA[This is some <strong>CDATA</strong> with ]]]]><![CDATA[> and then again ]]]]><![CDATA[>]]></a>"),t()}),it("supports encoding",function(t){expect(xml([{a:[{_attr:{anglebrackets:"this is <strong>strong</strong>",url:"http://google.com?s=opower&y=fun"}},"text"]}]),'<a anglebrackets="this is &lt;strong&gt;strong&lt;/strong&gt;" url="http://google.com?s=opower&amp;y=fun">text</a>'),t()}),it("supports stream interface",function(t){var e=xml.element({_attr:{decade:"80s",locale:"US"}}),a=xml({toys:e},{stream:!0}),o=['<toys decade="80s" locale="US">',"<toy>Transformers</toy>","<toy><name>He-man</name></toy>","<toy>GI Joe</toy>","</toys>"];a.on("data",function(t){expect(t).to.equal(o.shift())}),a.on("close",function(){expect(o).to.be.be.empty,t()}),e.push({toy:"Transformers"}),e.push({toy:[{name:"He-man"}]}),setTimeout(function(){e.push({toy:"GI Joe"}),e.close()},10)})});