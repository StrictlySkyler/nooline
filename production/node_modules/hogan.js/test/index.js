/*
 *  Copyright 2011 Twitter, Inc.
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

var is=strictEqual;test("Scan Text No Tags",function(){var e="<h2>hi</h2>",t=Hogan.scan(e);is(t.length,1,"One token"),is(t[0]+"",e,"text is equal to first token")}),test("Scan One Tag",function(){var e="{{hmm}}",t=Hogan.scan(e);is(t.length,1,"One token"),is(t[0].n,"hmm","First token content is variable name.")}),test("Scan Multiple Tags",function(){var e="asdf{{hmm}}asdf2{{hmm2}}asdf3",t=Hogan.scan(e);is(t.length,5,"3 text tokens, 2 tag tokens."),is(t[0]+"","asdf","first token is text"),is(t[1].n,"hmm","second token is tag"),is(t[1].tag,"_v","second token is a variable"),is(t[2]+"","asdf2","third token is text"),is(t[3].n,"hmm2","fourth token is tag"),is(t[3].tag,"_v","fourth token is a variable"),is(t[4]+"","asdf3","Fifth token is text")}),test("Scan Section Open",function(){var e="{{#hmm}}",t=Hogan.scan(e);is(t.length,1,"One token"),is(t[0].n,"hmm","First token content is variable name."),is(t[0].tag,"#","First token is a section.")}),test("Scan Section Close",function(){var e="{{/hmm}}",t=Hogan.scan(e);is(t.length,1,"One token"),is(t[0].n,"hmm","First token content is variable name."),is(t[0].tag,"/","First token is a section.")}),test("Scan Section",function(){var e="{{#hmm}}{{/hmm}}",t=Hogan.scan(e);is(t.length,2,"One token"),is(t[0].n,"hmm","First token content is variable name."),is(t[0].tag,"#","First token is a section."),is(t[1].n,"hmm","Second token content is variable name."),is(t[1].tag,"/","Second token is a section.")}),test("Scan Section In Content",function(){var e="abc{{#hmm}}def{{/hmm}}ghi",t=Hogan.scan(e);is(t.length,5,"3 text tokens, 2 tag tokens."),is(t[0]+"","abc","first token is text"),is(t[1].n,"hmm","second token is tag"),is(t[1].tag,"#","second token is a variable"),is(t[2]+"","def","third token is text"),is(t[3].n,"hmm","fourth token is tag"),is(t[3].tag,"/","fourth token is a variable"),is(t[4]+"","ghi","Fifth token is text")}),test("Scan Negative Section",function(){var e="{{^hmm}}{{/hmm}}",t=Hogan.scan(e);is(t.length,2,"One token"),is(t[0].n,"hmm","First token content is variable name."),is(t[0].tag,"^","First token is a negative section."),is(t[1].n,"hmm","First token content is variable name."),is(t[1].tag,"/","Second token is a section.")}),test("Scan Partial",function(){var e="{{>hmm}}",t=Hogan.scan(e);is(t.length,1,"One token"),is(t[0].n,"hmm","First token content is variable name."),is(t[0].tag,">","First token is a partial.")}),test("Scan Backward Partial",function(){var e="{{<hmm}}",t=Hogan.scan(e);is(t.length,1,"One token"),is(t[0].n,"hmm","First token content is variable name."),is(t[0].tag,"<","First token is a backward partial.")}),test("Scan Ampersand No Escape Tag",function(){var e="{{&hmm}}",t=Hogan.scan(e);is(t.length,1,"One token"),is(t[0].n,"hmm","First token content is variable name."),is(t[0].tag,"&","First token is an ampersand no-escape.")}),test("Scan Triple Stache",function(){var e="{{{hmm}}}",t=Hogan.scan(e);is(t.length,1,"One token"),is(t[0].n,"hmm","First token content is variable name."),is(t[0].tag,"{","First token is a triple-stache.")}),test("Scan Section With Triple Stache Inside",function(){var e="a{{#yo}}b{{{hmm}}}c{{/yo}}d",t=Hogan.scan(e);is(t.length,7,"One token"),is(t[0]+"","a","First token content is correct text."),is(t[1].n,"yo","Second token content is correct text."),is(t[1].tag,"#","Second token is a section."),is(t[2]+"","b","Third token content is correct text."),is(t[3].n,"hmm","Fourth token content is correct text."),is(t[3].tag,"{","Fourth token is a triple stache."),is(t[4]+"","c","Fifth token content is correct text."),is(t[5].n,"yo","Sixth token content is correct text."),is(t[5].tag,"/","Sixth token is a close."),is(t[6]+"","d","Seventh token content is correct text.")}),test("Scan Set Delimiter",function(){var e="a{{=<% %>=}}b",t=Hogan.scan(e);is(t.length,2,"change delimiter doesn't appear as token."),is(t[0]+"","a","text before change delimiter is processed."),is(t[1]+"","b","text after change delimiter is processed.")}),test("Scan Reset Delimiter",function(){var e="a{{=<% %>=}}b<%hmm%>c<%={{ }}=%>d{{hmm}}",t=Hogan.scan(e);is(t.length,6,"8 tokens, delimiter changes don't count."),is(t[0]+"","a","first token is correct."),is(t[1]+"","b","third token is correct."),is(t[2].tag,"_v","third token is correct tag."),is(t[2].n,"hmm","third token is correct name."),is(t[3]+"","c","fifth token is correct."),is(t[4]+"","d","seventh token is correct."),is(t[5].tag,"_v","eighth token is correct tag."),is(t[5].n,"hmm","eighth token is correct name.")}),test("Single Char Delimiter",function(){var e,t="({{foo}} {{=[ ]=}}[text])";Hogan.scan(t),e=Hogan.compile(t),s=e.render({foo:"bar",text:"It worked!"}),is(s,"(bar It worked!)","Hogan substitution worked after custom delimiters.")}),test("Set Delimiter With Whitespace",function(){var e="{{= | | =}}|foo|",t=Hogan.compile(e);s=t.render({foo:"bar"}),is(s,"bar","custom delimiters with whitespace works.")}),test("Parse Basic",function(){var e="test",t=Hogan.parse(Hogan.scan(e));is(t.length,1,"one parse node"),is(t[0]+"","test","text is correct")}),test("Parse Variables",function(){var e="test{{foo}}test!{{bar}}test!!{{baz}}test!!!",t=Hogan.parse(Hogan.scan(e));is(t.length,7,"one parse node"),is(t[0]+"","test","first text is correct"),is(t[2]+"","test!","second text is correct"),is(t[4]+"","test!!","third text is correct"),is(t[6]+"","test!!!","last text is correct"),is(t[1].n,"foo","first var is correct"),is(t[3].n,"bar","second var is correct"),is(t[5].n,"baz","third var is correct")}),test("Parse Section",function(){var e="a{{#foo}}b{{/foo}}c",t=Hogan.parse(Hogan.scan(e));is(t.length,3,"three nodes at base"),is(t[0]+"","a","correct text in first node"),is(t[1].hasOwnProperty("nodes"),!0,"second node is a section"),is(t[1].tag,"#","second node is a section"),is(t[1].n,"foo","correct name for section"),is(t[1].nodes[0]+"","b","correct text in section"),is(t[2]+"","c","correct text in last node")}),test("Parse Indexes",function(){var e="abc{{#foo}}asdf{{bar}}asdf{{/foo}}def",t=Hogan.parse(Hogan.scan(e));is(e.substring(t[1].i,t[1].end),"asdf{{bar}}asdf","section text indexes are correct")}),test("Parse Negative Section",function(){var e="a{{^foo}}b{{/foo}}c",t=Hogan.parse(Hogan.scan(e));is(t.length,3,"three nodes at base"),is(t[0]+"","a","correct text in first node"),is(t[1].hasOwnProperty("nodes"),!0,"second node is a section"),is(t[1].tag,"^","second node is a negative section"),is(t[1].n,"foo","correct name for section"),is(t[1].nodes[0]+"","b","correct text in section"),is(t[2]+"","c","correct text in last node")}),test("Parse Nested Sections",function(){var e="{{#bar}}{{#foo}}c{{/foo}}{{/bar}}",t=Hogan.parse(Hogan.scan(e));is(t.length,1,"one node at base"),is(t[0].tag,"#","open section is first node"),is(t[0].n,"bar","first section name is 'bar'"),is(t[0].nodes.length,1,"first section contains one node."),is(t[0].nodes[0].n,"foo","correct name for nested section"),is(t[0].nodes[0].nodes[0]+"","c","correct text in nested section")}),test("Missing Closing Tag",function(){var e="a{{#foo}}bc";raises(function(){Hogan.parse(Hogan.scan(e))},"missing closing tag: foo","Error is generated")}),test("Bad Nesting",function(){var e="a{{#foo}}{{#bar}}b{{/foo}}{{/bar}}c";raises(function(){Hogan.parse(Hogan.scan(e))},"Nesting error: bar vs. foo","Error is generated")}),test("Basic Output",function(){var e="test",t=Hogan.compile(e);is(t.render(),e,"template renders one text node")}),test("Basic Output As String",function(){}),test("One Variable",function(){var e="test {{foo}} test",t=Hogan.compile(e),n=t.render({foo:"bar"});is(n,"test bar test","basic variable substitution works.")}),test("One Variable As String",function(){}),test("Render With Whitespace",function(){var e="{{ string }}",t=Hogan.compile(e);is(t.render({string:"---"}),"---","tags with whitespace render correctly.")}),test("Render With Whitespace Around Triple Stache",function(){var e="  {{{string}}}\n",t=Hogan.compile(e);is(t.render({string:"---"}),"  ---\n","triple stache surrounded by whitespace render correctly.")}),test("Render With Whitespace Around Ampersand",function(){var e="  {{& string }}\n",t=Hogan.compile(e);is(t.render({string:"---"}),"  ---\n","ampersand surrounded by whitespace render correctly.")}),test("Multiple Variables",function(){var e="test {{foo}} test {{bar}} test {{baz}} test {{foo}} test",t=Hogan.compile(e),n=t.render({foo:"42",bar:"43",baz:"44"});is(n,"test 42 test 43 test 44 test 42 test","all variables render correctly.")}),test("Number Values",function(){var e="integer: {{foo}} float: {{bar}} negative: {{baz}}",t=Hogan.compile(e),n=t.render({foo:42,bar:42.42,baz:-42});is(n,"integer: 42 float: 42.42 negative: -42","numbers render correctly")}),test("Object Render",function(){var e="object: {{foo}}",t=Hogan.compile(e),n=t.render({foo:{}});is(n,"object: [object Object]","objects render default toString.")}),test("Object To String Render",function(){var e="object: {{foo}}",t=Hogan.compile(e),n=t.render({foo:{toString:function(){return"yo!"}}});is(n,"object: yo!","objects render supplied toString.")}),test("Array Render",function(){var e="array: {{foo}}",t=Hogan.compile(e),n=t.render({foo:["a","b","c"]});is(n,"array: a,b,c","arrays render default toString.")}),test("Escaping",function(){var e,t,n="{{foo}}",o=Hogan.compile(n),i=o.render();i=o.render({foo:"< > <div> ' \" &"}),is(i,"&lt; &gt; &lt;div&gt; &#39; &quot; &amp;","input correctly escaped."),e={"'":"&#39;",'"':"&quot;","<":"&lt;",">":"&gt;","&":"&amp;"};for(t in e)i=o.render({foo:t+" just me"}),is(i,e[t]+" just me","input correctly escaped.")}),test("Mustache Injection",function(){var e="{{foo}}",t=Hogan.compile(e);s=t.render({foo:"{{{<42}}}"}),is(s,"{{{&lt;42}}}","Can't inject mustache")}),test("Triple Stache",function(){var e="{{{foo}}}",t=Hogan.compile(e),n=t.render({foo:"< > <div> ' \" &"});is(n,"< > <div> ' \" &","input correctly not-escaped.")}),test("Amp No Escaping",function(){var e="{{&foo}}",t=Hogan.compile(e),n=t.render({foo:"< > <div> ' \" &"});is(n,"< > <div> ' \" &","input correctly not-escaped.")}),test("Partial",function(){var e="this is text from the partial--the magic number {{foo}} is from a variable",t=Hogan.compile(e),n="This template contains a partial ({{>testPartial}}).",o=Hogan.compile(n),i=o.render({foo:42},{testPartial:t});is(i,"This template contains a partial (this is text from the partial--the magic number 42 is from a variable).","partials work")}),test("Nested Partials",function(){var e="this is text from the partial--the magic number {{foo}} is from a variable",t=Hogan.compile(e),n="This template contains a partial ({{>testPartial}}).",o=Hogan.compile(n),i="This template contains a partial that contains a partial [{{>testPartial2}}].",s=Hogan.compile(i),a=s.render({foo:42},{testPartial:t,testPartial2:o});is(a,"This template contains a partial that contains a partial [This template contains a partial (this is text from the partial--the magic number 42 is from a variable).].","nested partials work")}),test("Negative Section",function(){var e="This template {{^foo}}BOO {{/foo}}contains an inverted section.",t=Hogan.compile(e),n=t.render();is(n,"This template BOO contains an inverted section.","inverted sections with no context work"),n=t.render({foo:[]}),is(n,"This template BOO contains an inverted section.","inverted sections with empty list context work"),n=t.render({foo:!1}),is(n,"This template BOO contains an inverted section.","inverted sections with false context work"),n=t.render({foo:""}),is(n,"This template contains an inverted section.","inverted sections with empty string context work"),n=t.render({foo:!0}),is(n,"This template contains an inverted section.","inverted sections with true context work"),n=t.render({foo:function(){return!1}}),is(n,"This template BOO contains an inverted section.","inverted sections with false returning method in context work")}),test("Section Elision",function(){var e="This template {{#foo}}BOO {{/foo}}contains a section.",t=Hogan.compile(e),n=t.render();is(n,"This template contains a section.","sections with no context work"),n=t.render({foo:[]}),is(n,"This template contains a section.","sections with empty list context work"),n=t.render({foo:!1}),is(n,"This template contains a section.","sections with false context work")}),test("Section Object Context",function(){var e="This template {{#foo}}{{bar}} {{/foo}}contains a section.",t=Hogan.compile(e),n=t.render({foo:{bar:42}});is(n,"This template 42 contains a section.","sections with object context work")}),test("Section Array Context",function(){var e="This template {{#foo}}{{bar}} {{/foo}}contains a section.",t=Hogan.compile(e),n=t.render({foo:[{bar:42},{bar:43},{bar:44}]});is(n,"This template 42 43 44 contains a section.","sections with object ctx and array values work")}),test("Falsy Variable No Render",function(){var e="I ({{cannot}}) be seen!",t=Hogan.compile(e),n=t.render();is(n,"I () be seen!","missing value doesn't render.")}),test("Undefined Return Value From Lambda",function(){var e="abc{{foo}}def",t=Hogan.compile(e),n={foo:function(){return void 0}},o=t.render(n);is(o,"abcdef","deal with undefined return values from lambdas.")}),test("Section Extensions",function(){var e,t,n="Test {{_//|__foo}}bar{{/foo}}",o={sectionTags:[{o:"_//|__foo",c:"foo"}]},i=Hogan.parse(Hogan.scan(n),n,o);is(i[1].tag,"#","_//|__foo node transformed to section"),is(i[1].n,"_//|__foo","_//|__foo node transformed to section"),e=Hogan.compile(n,o),t=e.render({"_//|__foo":!0}),is(t,"Test bar","Custom sections work")}),test("Misnested Section Extensions",function(){var e="Test {{__foo}}bar{{/bar}}",t={sectionTags:[{o:"__foo",c:"foo"},{o:"__bar",c:"bar"}]};raises(function(){Hogan.parse(Hogan.scan(e),e,t)},"Nesting error: __foo vs. bar","Error is generated")}),test("Section Extensions In Higher Order Sections",function(){var e="Test{{_foo}}bar{{/foo}}",t={sectionTags:[{o:"_foo",c:"foo"},{o:"_baz",c:"baz"}]},n=Hogan.compile(e,t),o={_foo:function(e){return"{{_baz}}"+e+"{{/baz}}"}},i=n.render(o);is(i,"Test","unprocessed test")}),test("Section Extensions In Lambda Replace Variable",function(){var e="Test{{foo}}",t={sectionTags:[{o:"_baz",c:"baz"}]},n=Hogan.compile(e,t),o={foo:function(){return function(){}}},i=n.render(o);is(i,"Test","unprocessed test")}),test("Mustache not reprocessed for method calls in interpolations",function(){var e="text with {{foo}} inside",t=Hogan.compile(e),n={foo:function(){return"no processing of {{tags}}"}},o=t.render(n);is(o,"text with no processing of {{tags}} inside","method calls should not be processed as mustache."),e="text with {{{foo}}} inside",t=Hogan.compile(e),o=t.render(n),is(o,"text with no processing of {{tags}} inside","method calls should not be processed as mustache in triple staches.")}),test("Mustache is reprocessed for lambdas in interpolations",function(){var e="text with {{foo}} inside",t=Hogan.compile(e),n={bar:"42",foo:function(){return function(){return"processing of {{bar}}"}}},o=t.render(n);is(o,"text with processing of 42 inside","the return value of lambdas should be processed mustache.")}),test("Nested Section",function(){var e="{{#foo}}{{#bar}}{{baz}}{{/bar}}{{/foo}}",t=Hogan.compile(e),n=t.render({foo:42,bar:42,baz:42});is(n,"42","can reach up context stack")}),test("Dotted Names",function(){var e='"{{person.name}}" == "{{#person}}{{name}}{{/person}}"',t=Hogan.compile(e),n=t.render({person:{name:"Joe"}});is(n,'"Joe" == "Joe"',"dotted names work")}),test("Implicit Iterator",function(){var e="{{#stuff}} {{.}} {{/stuff}}",t=Hogan.compile(e),n=t.render({stuff:[42,43,44]});is(n," 42  43  44 ","implicit iterators work")}),test("Partials And Delimiters",function(){var e="{{>include}}*\n{{= | | =}}\n*|>include|",t=" .{{value}}. ",n=Hogan.compile(t),o=Hogan.compile(e),i=o.render({value:"yes"},{include:n});is(i," .yes. *\n* .yes. ","partials work around delimiters")}),test("String Partials",function(){var e="foo{{>mypartial}}baz",t=" bar ",n=Hogan.compile(e),o=n.render({},{mypartial:t});is(o,"foo bar baz","string partial works.")}),test("Missing Partials",function(){var e="foo{{>mypartial}} bar",t=Hogan.compile(e),n=t.render({});is(n,"foo bar","missing partial works.")}),test("Indented Standalone Comment",function(){var e="Begin.\n {{! Indented Comment Block! }}\nEnd.",t=Hogan.compile(e),n=t.render();is(n,"Begin.\nEnd.","Standalone comment blocks are removed.")}),test("New Line Between Delimiter Changes",function(){var e={section:!0,data:"I got interpolated."},t="\n{{#section}}\n {{data}}\n |data|\n{{/section}}x\n\n{{= | | =}}\n|#section|\n {{data}}\n |data|\n|/section|",n=Hogan.compile(t),o=n.render(e);is(o,"\n I got interpolated.\n |data|\nx\n\n {{data}}\n I got interpolated.\n","render correct")}),test("Mustache JS Apostrophe",function(){var e="{{apos}}{{control}}",t=Hogan.compile(e),n=t.render({apos:"'",control:"X"});is(n,"&#39;X","Apostrophe is escaped.")}),test("Mustache JS Array Of Implicit Partials",function(){var e="Here is some stuff!\n{{#numbers}}\n{{>partial}}\n{{/numbers}}\n",t="{{.}}\n",n=Hogan.compile(e),o=n.render({numbers:[1,2,3,4]},{partial:t});is(o,"Here is some stuff!\n1\n2\n3\n4\n","Partials with implicit iterators work.")}),test("Mustache JS Array Of Partials",function(){var e="Here is some stuff!\n{{#numbers}}\n{{>partial}}\n{{/numbers}}\n",t="{{i}}\n",n=Hogan.compile(e),o=n.render({numbers:[{i:1},{i:2},{i:3},{i:4}]},{partial:t});is(o,"Here is some stuff!\n1\n2\n3\n4\n","Partials with arrays work.")}),test("Mustache JS Array Of Strings",function(){var e="{{#strings}}{{.}} {{/strings}}",t=Hogan.compile(e),n=t.render({strings:["foo","bar","baz"]});is(n,"foo bar baz ","array of strings works with implicit iterators.")}),test("Mustache JS Undefined String",function(){var e="foo{{bar}}baz",t=Hogan.compile(e),n=t.render({bar:void 0});is(n,"foobaz","undefined value does not render.")}),test("Mustache JS Undefined Triple Stache",function(){var e="foo{{{bar}}}baz",t=Hogan.compile(e),n=t.render({bar:void 0});is(n,"foobaz","undefined value does not render in triple stache.")}),test("Mustache JS Null String",function(){var e="foo{{bar}}baz",t=Hogan.compile(e),n=t.render({bar:null});is(n,"foobaz","undefined value does not render.")}),test("Mustache JS Null Triple Stache",function(){var e="foo{{{bar}}}baz",t=Hogan.compile(e),n=t.render({bar:null});is(n,"foobaz","undefined value does not render in triple stache.")}),test("Mustache JS Triple Stache Alt Delimiter",function(){var e="{{=<% %>=}}<% foo %> {{foo}} <%{bar}%> {{{bar}}}",t=Hogan.compile(e),n=t.render({foo:"yeah",bar:"hmm"});is(n,"yeah {{foo}} hmm {{{bar}}}","triple stache inside alternate delimiter works.")}),test("Updates object state",function(){var e="{{foo}} {{bar}} {{foo}}",t=Hogan.compile(e),n=t.render({foo:1,bar:function(){return this.foo++,42}});is(n,"1 42 2")}),test("Shoot Out String",function(){var e="Hello World!",t="Hello World!",n=Hogan.compile(e),o=n.render({});is(o,t,"Shootout String compiled correctly")}),test("Shoot Out Replace",function(){var e="Hello {{name}}! You have {{count}} new messages.",t="Hello Mick! You have 30 new messages.",n=Hogan.compile(e),o=n.render({name:"Mick",count:30});is(o,t,"Shootout Replace compiled correctly")}),test("Shoot Out Array",function(){var e="{{#names}}{{name}}{{/names}}",t="MoeLarryCurlyShemp",n=Hogan.compile(e),o=n.render({names:[{name:"Moe"},{name:"Larry"},{name:"Curly"},{name:"Shemp"}]});is(o,t,"Shootout Array compiled correctly")}),test("Shoot Out Object",function(){var e="{{#person}}{{name}}{{age}}{{/person}}",t="Larry45",n=Hogan.compile(e),o=n.render({person:{name:"Larry",age:45}});is(o,t,"Shootout Object compiled correctly")}),test("Shoot Out Partial",function(){var e="{{#peeps}}{{>replace}}{{/peeps}}",t=Hogan.compile(e),n=Hogan.compile(" Hello {{name}}! You have {{count}} new messages."),o=t.render({peeps:[{name:"Moe",count:15},{name:"Larry",count:5},{name:"Curly",count:2}]},{replace:n}),i=" Hello Moe! You have 15 new messages. Hello Larry! You have 5 new messages. Hello Curly! You have 2 new messages.";is(o,i,"Shootout Partial compiled correctly")}),test("Shoot Out Recurse",function(){var e="{{name}}{{#kids}}{{>recursion}}{{/kids}}",t=Hogan.compile(e),n=Hogan.compile("{{name}}{{#kids}}{{>recursion}}{{/kids}}"),o=t.render({name:"1",kids:[{name:"1.1",kids:[{name:"1.1.1",kids:[]}]}]},{recursion:n}),i="11.11.1.1";is(o,i,"Shootout Recurse compiled correctly")}),test("Shoot Out Filter",function(){var e="{{#filter}}foo {{bar}}{{/filter}}",t=Hogan.compile(e),n=t.render({filter:function(){return function(e){return e.toUpperCase()+"{{bar}}"}},bar:"bar"}),o="FOO bar";is(n,o,"Shootout Filter compiled correctly")}),test("Shoot Out Complex",function(){var e='<h1>{{header}}</h1>{{#hasItems}}<ul>{{#items}}{{#current}}<li><strong>{{name}}</strong></li>{{/current}}{{^current}}<li><a href="{{url}}">{{name}}</a></li>{{/current}}{{/items}}</ul>{{/hasItems}}{{^hasItems}}<p>The list is empty.</p>{{/hasItems}}',t='<h1>Colors</h1><ul><li><strong>red</strong></li><li><a href="#Green">green</a></li><li><a href="#Blue">blue</a></li></ul>',n=Hogan.compile(e),o=n.render({header:function(){return"Colors"},items:[{name:"red",current:!0,url:"#Red"},{name:"green",current:!1,url:"#Green"},{name:"blue",current:!1,url:"#Blue"}],hasItems:function(){return 0!==this.items.length},empty:function(){return 0===this.items.length}});is(o,t,"Shootout Complex compiled correctly")}),$.each(["list"],function(e,t){}),test("Default Render Impl",function(){var e=new Hogan.Template;is(""===e.render(),!0,"default renderImpl returns an array.")});