var assert=null,ref=null,ffi=null,bindings=null({module_root:__dirname,bindings:"ffi_tests"});describe('Function "type"',function(){afterEach(gc),it("should be a function",function(){assert.equal("function",typeof ffi.Function)});var t=ffi.Function("void",[]);it('should return a "type" object when invoked with a return type and array of arguments types',function(){assert(t),assert.equal("function",typeof t.get),assert.equal("function",typeof t.set)}),it('should be accepted as a return "type" to a ForeignFunction',function(){ffi.ForeignFunction(ref.NULL,t,[])}),it('should be accepted as an argument "type" to a ForeignFunction',function(){ffi.ForeignFunction(ref.NULL,"void",[t])}),it('should work as expected using the "callback_func" static bindings',function(){var t=ffi.Function("int",["int"]),n=ffi.ForeignFunction(bindings.callback_func,t,[t]),e=n(Math.abs);assert.equal("function",typeof e),assert.equal(Math.abs(-5),e(-5)),assert.equal(Math.abs(-9),e(-9)),assert.equal(Math.abs(-69),e(-69)),assert.equal(Math.abs(3),e(3))})});