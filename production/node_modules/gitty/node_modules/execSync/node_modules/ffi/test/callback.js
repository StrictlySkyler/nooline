var assert=null,ref=null,ffi=null,int=ref.types.int,bindings=null({module_root:__dirname,bindings:"ffi_tests"});describe("Callback",function(){afterEach(gc),it("should create a C function pointer from a JS function",function(){var n=ffi.Callback("void",[],function(){});assert(Buffer.isBuffer(n))}),it("should be invokable by an ffi'd ForeignFunction",function(){var n=ffi.Callback(int,[int],Math.abs),t=ffi.ForeignFunction(n,int,[int]);assert.equal(1234,t(-1234))}),it('should work with a "void" return type',function(){var n=ffi.Callback("void",[],function(){}),t=ffi.ForeignFunction(n,"void",[]);assert.strictEqual(null,t())}),it('should not call "set()" of a pointer type',function(){var n,t,i,e,a,r=Object.create(ref.types.void);r.get=function(){throw Error('"get()" should not be called')},r.set=function(){throw Error('"set()" should not be called')},n=ref.refType(r),t=!1,i=ffi.Callback(n,[n],function(n){return t=!0,assert.equal(0,n.address()),n}),e=ffi.ForeignFunction(i,n,[n]),assert(!t),a=e(ref.NULL),assert(t),assert(Buffer.isBuffer(a)),assert.equal(0,a.address())}),it("should throw an Error when invoked through a ForeignFunction and throws",function(){var n=ffi.Callback("void",[],function(){throw Error("callback threw")}),t=ffi.ForeignFunction(n,"void",[]);assert.throws(function(){t()},/callback threw/)}),it('should throw an Error with a meaningful message when a type\'s "set()" throws',function(){var n=ffi.Callback("int",[],function(){return"a string!?!?"}),t=ffi.ForeignFunction(n,"int",[]);assert.throws(function(){t()},/error setting return value/)}),it("should throw an Error when invoked after the callback gets garbage collected",function(){var n=ffi.Callback("void",[],function(){});bindings.set_cb(n),bindings.call_cb(),n=null,gc();try{bindings.call_cb(),assert(!1)}catch(t){assert(/ffi/.test(t.message))}}),describe("async",function(){it("should be invokable asynchronously by an ffi'd ForeignFunction",function(n){var t=ffi.Callback(int,[int],Math.abs),i=ffi.ForeignFunction(t,int,[int]);i.async(-9999,function(t,i){assert.equal(null,t),assert.equal(9999,i),n()})}),it("should work being invoked multiple times",function(n){function t(){bindings.call_cb(),assert.equal(4,i),a(),n()}var i=0,e=ffi.Callback("void",[],function(){i++}),a=function(n){return bindings.set_cb(n),function(){var t=n;n=null,t=null}}(e);e=null,assert.equal(0,i),bindings.call_cb(),assert.equal(1,i),bindings.call_cb(),assert.equal(2,i),setTimeout(function(){bindings.call_cb(),assert.equal(3,i),gc(),process.nextTick(t)},25)}),it("should throw an Error when invoked after the callback gets garbage collected",function(n){var t,i=ffi.Callback("void",[],function(){});bindings.set_cb(i),bindings.call_cb(),t=process.listeners("uncaughtException").slice(),process.removeAllListeners("uncaughtException"),process.once("uncaughtException",function(i){assert(/ffi/.test(i.message)),t.forEach(process.emit.bind(process,"uncaughtException")),n()}),i=null,gc(),bindings.call_cb_async()})})});