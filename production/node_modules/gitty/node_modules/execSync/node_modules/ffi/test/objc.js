var expect=null,ref=null,ffi=null,voidPtr=ref.refType(ref.types.void),id=voidPtr,SEL=voidPtr,Class=voidPtr;ffi.HAS_OBJC&&describe("@try / @catch",function(){var e,t,r,i;afterEach(gc),e=new ffi.Library("libobjc",{objc_msgSend:[id,[id,SEL]],objc_getClass:[Class,["string"]],sel_registerName:[SEL,["string"]]}),t=e.objc_getClass("NSAutoreleasePool"),r=e.sel_registerName("new"),i=e.objc_msgSend(t,r),it("should proxy @try/@catch to JavaScript via try/catch/throw",function(){var t=e.sel_registerName("retain");expect(function(){e.objc_msgSend(i,t)}).to.throwException()}),it("should throw a Buffer instance when an exception happens",function(){var t=e.sel_registerName("retain");try{e.objc_msgSend(i,t),expect(!1).to.be(!0)}catch(r){expect(Buffer.isBuffer(r)).to.be(!0),expect(r.isNull()).to.be(!1),expect(r.address()).to.be.greaterThan(0)}})});