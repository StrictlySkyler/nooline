function Type(e){var t,r,i,n,f,p,y,s,o,_,F,a,d,g;if(e=ref.coerceType(e),debug("Type()",e.name||e),assert(e.indirection>=1,'invalid "type" given: '+(e.name||e)),t=1===e.indirection?e.ffi_type:bindings.FFI_TYPES.pointer,!t&&e.type&&(t=bindings.FFI_TYPES.pointer),!t&&e.fields){for(debug('creating an `ffi_type` for given "ref-struct" type'),n=e.fields,f=Object.keys(n),p=f.length,y=0,s=new FFI_TYPE,o=0,s.size=0,s.alignment=0,s.type=13,o=0;p>o;o++)r=n[f[o]],y+=r.type.fixedLength>0?r.type.fixedLength:1;for(_=ref.sizeof.pointer*(y+1),F=s.elements=new Buffer(_),a=0,o=0;p>o;o++)if(r=n[f[o]],r.type.fixedLength>0)for(i=Type(r.type.type),d=0;d<r.type.fixedLength;d++)F.writePointer(i,a++*ref.sizeof.pointer);else i=Type(r.type),F.writePointer(i,a++*ref.sizeof.pointer);F.writePointer(ref.NULL,a*ref.sizeof.pointer),t=e.ffi_type=s.ref()}if(!t&&e.name)if("CString"==e.name)t=e.ffi_type=bindings.FFI_TYPES.pointer;else for(g=e;!t&&g;)t=g.ffi_type=bindings.FFI_TYPES[g.name],g=Object.getPrototypeOf(g);return assert(t,"Could not determine the `ffi_type` instance for type: "+(e.name||e)),debug("returning `ffi_type`",t.name),t}var ffi_type_ptr_array,ref=null,assert=null,debug=null,Struct=null,bindings=null,FFI_TYPE=Type.FFI_TYPE=Struct();FFI_TYPE.defineProperty("size",ref.types.size_t),FFI_TYPE.defineProperty("alignment",ref.types.ushort),FFI_TYPE.defineProperty("type",ref.types.ushort),ffi_type_ptr_array=ref.refType(ref.refType(FFI_TYPE)),FFI_TYPE.defineProperty("elements",ffi_type_ptr_array),assert.equal(bindings.FFI_TYPE_SIZE,FFI_TYPE.size),module.exports=Type;