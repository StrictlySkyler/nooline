function CIF(r,e,F){var _,n,i,I,t,f,s,A,o;for(debug("creating `ffi_cif *` instance"),assert(!!r,'expected a return "type" object as the first argument'),assert(Array.isArray(e),'expected an Array of arg "type" objects as the second argument'),_=new Buffer(FFI_CIF_SIZE),n=e.length,i=new Buffer(n*POINTER_SIZE),I=Type(r),t=0;n>t;t++)f=e[t],s=Type(f),i.writePointer(s,t*POINTER_SIZE);if(_.rtnTypePtr=I,_.argTypesPtr=i,void 0===F&&(debug("no ABI specified (this is OK), using FFI_DEFAULT_ABI"),F=FFI_DEFAULT_ABI),A=ffi_prep_cif(_,n,I,i,F),A!==FFI_OK)switch(A){case FFI_BAD_TYPEDEF:throw o=Error("ffi_prep_cif() returned an FFI_BAD_TYPEDEF error"),o.code="FFI_BAD_TYPEDEF",o.errno=A,o;case FFI_BAD_ABI:throw o=Error("ffi_prep_cif() returned an FFI_BAD_ABI error"),o.code="FFI_BAD_ABI",o.errno=A,o;default:throw Error("ffi_prep_cif() returned an error: "+A)}return _}var Type=null,assert=null,debug=null,ref=null,bindings=null,POINTER_SIZE=ref.sizeof.pointer,ffi_prep_cif=bindings.ffi_prep_cif,FFI_CIF_SIZE=bindings.FFI_CIF_SIZE,FFI_DEFAULT_ABI=bindings.FFI_DEFAULT_ABI,FFI_OK=bindings.FFI_OK,FFI_BAD_TYPEDEF=bindings.FFI_BAD_TYPEDEF,FFI_BAD_ABI=bindings.FFI_BAD_ABI;module.exports=CIF;