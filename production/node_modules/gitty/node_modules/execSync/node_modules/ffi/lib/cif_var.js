function CIF_var(r,e,_,F){var i,n,t,I,f,a,s,o;for(debug("creating `ffi_cif *` instance with `ffi_prep_cif_var()`"),assert(!!r,'expected a return "type" object as the first argument'),assert(Array.isArray(e),'expected an Array of arg "type" objects as the second argument'),assert(_>=1,"expected the number of fixed arguments to be at least 1"),i=new Buffer(FFI_CIF_SIZE),n=e.length,t=new Buffer(n*POINTER_SIZE),I=Type(r),f=0;n>f;f++)a=Type(e[f]),t.writePointer(a,f*POINTER_SIZE);if(i.rtnTypePtr=I,i.argTypesPtr=t,void 0===F&&(debug("no ABI specified (this is OK), using FFI_DEFAULT_ABI"),F=FFI_DEFAULT_ABI),s=ffi_prep_cif_var(i,_,n,I,t,F),s!==FFI_OK)switch(s){case FFI_BAD_TYPEDEF:throw o=Error("ffi_prep_cif_var() returned an FFI_BAD_TYPEDEF error"),o.code="FFI_BAD_TYPEDEF",o.errno=s,o;case FFI_BAD_ABI:throw o=Error("ffi_prep_cif_var() returned an FFI_BAD_ABI error"),o.code="FFI_BAD_ABI",o.errno=s,o;default:throw o=Error("ffi_prep_cif_var() returned an error: "+s),o.errno=s,o}return i}var Type=null,assert=null,debug=null,ref=null,bindings=null,POINTER_SIZE=ref.sizeof.pointer,ffi_prep_cif_var=bindings.ffi_prep_cif_var,FFI_CIF_SIZE=bindings.FFI_CIF_SIZE,FFI_DEFAULT_ABI=bindings.FFI_DEFAULT_ABI,FFI_OK=bindings.FFI_OK,FFI_BAD_TYPEDEF=bindings.FFI_BAD_TYPEDEF,FFI_BAD_ABI=bindings.FFI_BAD_ABI;module.exports=CIF_var;