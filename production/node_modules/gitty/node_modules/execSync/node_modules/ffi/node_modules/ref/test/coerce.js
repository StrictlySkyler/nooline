var assert=null,ref=null;describe("coerce",function(){it('should return `ref.types.void` for "void"',function(){var e=ref.coerceType("void");assert.strictEqual(ref.types.void,e)}),it('should return a ref type when a "*" is present',function(){var e=ref.coerceType("void *");assert(e!==ref.types.void),assert.equal(e.indirection,ref.types.void.indirection+1)}),it('should coerce the "type" property of a Buffer',function(){var e,t=new Buffer(ref.sizeof.int);t.type="int",e=ref.getType(t),assert.strictEqual(ref.types.int,e),assert.strictEqual("int",t.type)}),it('should coerce "Object" to `ref.types.Object`',function(){assert.strictEqual(ref.types.Object,ref.coerceType("Object"))}),it("should coerce the optional type in `ref.get()`",function(){var e=new Buffer(ref.sizeof.int8);e[0]=5,assert.strictEqual(5,ref.get(e,0,"int8"))}),it("should coerce the optional type in `ref.set()`",function(){var e=new Buffer(ref.sizeof.int8);ref.set(e,0,5,"int8"),assert.strictEqual(5,e[0])})});