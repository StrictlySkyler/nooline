var assert=null,weak=null,ref=null;describe("Object",function(){var e={foo:"bar",test:Math.random(),now:new Date};beforeEach(gc),it("should write and read back an Object in a Buffer",function(){var t,r=new Buffer(ref.sizeof.Object);ref.writeObject(r,0,e),t=ref.readObject(r),assert.strictEqual(e,t),assert.deepEqual(e,t)}),it("should retain references to written Objects",function(){var e=!1,t=!1,r={foo:"bar"},o=new Buffer(ref.sizeof.Object);weak(r,function(){e=!0}),weak(o,function(){t=!0}),ref.writeObject(o,0,r),assert(!e,'"o" has been garbage collected too soon'),assert(!t,'"buf" has been garbage collected too soon'),r=null,gc(),assert(!e,'"o" has been garbage collected too soon'),assert(!t,'"buf" has been garbage collected too soon'),o=null,gc(),assert(t,'"buf" has not been garbage collected'),assert(e,'"o" has not been garbage collected')}),it("should throw an Error when reading an Object from the NULL pointer",function(){assert.throws(function(){ref.NULL.readObject()})}),describe("offset",function(){it("should read two Objects next to each other in memory",function(){var e,t,r=new Buffer(2*ref.sizeof.pointer),o={},a={};r.writeObject(o,0*ref.sizeof.pointer),r.writeObject(a,1*ref.sizeof.pointer),e=r.readObject(0*ref.sizeof.pointer),t=r.readObject(1*ref.sizeof.pointer),assert.strictEqual(o,e),assert.strictEqual(a,t)})})});