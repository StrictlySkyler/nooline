var assert=null,ref=null;describe("int64",function(){var e=9007199254740992,r=-9007199254740992;it("should allow simple ints to be written and read",function(){var e,r=new Buffer(ref.sizeof.int64),t=123456789;ref.writeInt64(r,0,t),e=ref.readInt64(r,0),assert.equal(t,e)}),it("should allow INT64_MAX to be written and read",function(){var e,r=new Buffer(ref.sizeof.int64),t="9223372036854775807";ref.writeInt64(r,0,t),e=ref.readInt64(r,0),assert.equal(t,e)}),it("should return a Number when reading JS_MIN_INT",function(){var e,t=new Buffer(ref.sizeof.int64);ref.writeInt64(t,0,r),e=ref.readInt64(t,0),assert.equal("number",typeof e),assert.equal(r,e)}),it("should return a Number when reading JS_MAX_INT",function(){var r,t=new Buffer(ref.sizeof.int64);ref.writeInt64(t,0,e),r=ref.readInt64(t,0),assert.equal("number",typeof r),assert.equal(e,r)}),it("should return a String when reading JS_MAX_INT+1",function(){var e,r=new Buffer(ref.sizeof.int64),t="9007199254740993";ref.writeInt64(r,0,t),e=ref.readInt64(r,0),assert.equal("string",typeof e),assert.equal(t,e)}),it("should return a String when reading JS_MIN_INT-1",function(){var e,r=new Buffer(ref.sizeof.int64),t="-9007199254740993";ref.writeInt64(r,0,t),e=ref.readInt64(r,0),assert.equal("string",typeof e),assert.equal(t,e)}),it("should return a Number when reading 0, even when written as a String",function(){var e,r=new Buffer(ref.sizeof.int64),t="0";ref.writeInt64(r,0,t),e=ref.readInt64(r,0),assert.equal("number",typeof e),assert.equal(0,e)}),it("should throw an Error when reading an int64_t from the NULL pointer",function(){assert.throws(function(){ref.readInt64(ref.NULL)})}),it("should throw an Error when reading a uint64_t from the NULL pointer",function(){assert.throws(function(){ref.readUInt64(ref.NULL)})}),["LE","BE"].forEach(function(e){describe(e,function(){it("should read and write a signed "+e+" 64-bit integer",function(){var r=-123456789,t=new Buffer(ref.sizeof.int64);ref["writeInt64"+e](t,0,r),assert.equal(r,ref["readInt64"+e](t,0))}),it("should read and write an unsigned "+e+" 64-bit integer",function(){var r=123456789,t=new Buffer(ref.sizeof.uint64);ref["writeUInt64"+e](t,0,r),assert.equal(r,ref["readUInt64"+e](t,0))})})})});