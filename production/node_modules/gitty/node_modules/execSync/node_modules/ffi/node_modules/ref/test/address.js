var assert=null,ref=null;describe("address",function(){var e=new Buffer("hello");it("should return 0 for the NULL pointer",function(){assert.strictEqual(0,ref.address(ref.NULL))}),it("should give a positive value for any other Buffer",function(){var s=ref.address(e);assert.equal(typeof s,"number"),assert(isFinite(s)),assert(s>0)}),it("should accept an offset value for the 2nd argument",function(){var s=ref.address(e);assert.equal(s+0,ref.address(e,0)),assert.equal(s+1,ref.address(e,1)),assert.equal(s+2,ref.address(e,2)),assert.equal(s+3,ref.address(e,3)),assert.equal(s+4,ref.address(e,4)),assert.equal(s+5,ref.address(e,5))}),it("should accept a negative offset value for the 2nd argument",function(){var s=ref.address(e);assert.equal(s-0,ref.address(e,-0)),assert.equal(s-1,ref.address(e,-1)),assert.equal(s-2,ref.address(e,-2)),assert.equal(s-3,ref.address(e,-3)),assert.equal(s-4,ref.address(e,-4)),assert.equal(s-5,ref.address(e,-5))}),it("should have an offset of zero when none is given",function(){assert.equal(ref.address(e),ref.address(e,0))}),describe("inspect()",function(){it("should overwrite the default Buffer#inspect() to print the memory address",function(){assert(-1!==e.inspect().indexOf(e.address().toString(16)))})})});