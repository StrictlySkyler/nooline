var assert=null,ref=null;describe("C string",function(){describe("readCString()",function(){it('should return "" for a Buffer containing "\\0"',function(){var r=new Buffer("\x00");assert.strictEqual("",r.readCString(0))}),it('should return "hello" for a Buffer containing "hello\\0world"',function(){var r=new Buffer("hello\x00world");assert.strictEqual("hello",r.readCString(0))}),it("should throw an Error when reading from the NULL pointer",function(){assert.throws(function(){ref.NULL.readCString()})})}),describe("writeCString()",function(){it("should write a C string (NULL terminated) to a Buffer",function(){var r,t=new Buffer(20),e="hello world";for(t.writeCString(e),r=0;r<e.length;r++)assert.equal(e.charCodeAt(r),t[r]);assert.equal(0,t[e.length])})}),describe("allocCString()",function(){it("should return a new Buffer containing the given string",function(){var r=ref.allocCString("hello world");assert.strictEqual("hello world",r.readCString())}),it("should return the NULL pointer for `null` values",function(){var r=ref.allocCString(null);assert(r.isNull()),assert.strictEqual(0,r.address())}),it("should return the NULL pointer for `undefined` values",function(){var r=ref.allocCString(void 0);assert(r.isNull()),assert.strictEqual(0,r.address())})}),describe("CString",function(){it("should return JS `null` when given a pointer pointing to NULL",function(){var r=ref.alloc(ref.types.CString);r.writePointer(ref.NULL),assert.strictEqual(null,r.deref()),assert.strictEqual(null,ref.get(ref.NULL_POINTER,0,ref.types.CString))}),it("should read a utf8 string from a Buffer",function(){var r="hello world",t=ref.alloc(ref.types.CString);t.writePointer(Buffer(r+"\x00")),assert.strictEqual(r,t.deref())})})});