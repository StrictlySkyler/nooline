var db,i,rowCount,callback,b,fs=null,ref=null,ffi=null,dbName=process.argv[2]||"test.sqlite3",sqlite3="void",sqlite3Ptr=ref.refType(sqlite3),sqlite3PtrPtr=ref.refType(sqlite3Ptr),sqlite3_exec_callback="pointer",stringPtr=ref.refType("string"),SQLite3=ffi.Library("libsqlite3",{sqlite3_libversion:["string",[]],sqlite3_open:["int",["string",sqlite3PtrPtr]],sqlite3_close:["int",[sqlite3Ptr]],sqlite3_changes:["int",[sqlite3Ptr]],sqlite3_exec:["int",[sqlite3Ptr,"string",sqlite3_exec_callback,"void *",stringPtr]]});for(console.log("Using libsqlite3 version %j...",SQLite3.sqlite3_libversion()),db=ref.alloc(sqlite3PtrPtr),console.log("Opening %j...",dbName),SQLite3.sqlite3_open(dbName,db),db=db.deref(),console.log("Creating and/or clearing foo table..."),SQLite3.sqlite3_exec(db,"CREATE TABLE foo (bar VARCHAR);",null,null,null),SQLite3.sqlite3_exec(db,"DELETE FROM foo;",null,null,null),console.log("Inserting bar 5 times..."),i=0;5>i;i++)SQLite3.sqlite3_exec(db,"INSERT INTO foo VALUES('baz"+i+"');",null,null,null);rowCount=0,callback=ffi.Callback("int",["void *","int",stringPtr,stringPtr],function(e,l,t,i){var n,o,s,r={};for(n=0;l>n;n++)o=i.deref(),s=t.deref(),r[o]=s;return console.log("Row: %j",r),rowCount++,0}),b=new Buffer("test"),SQLite3.sqlite3_exec.async(db,"SELECT * FROM foo;",callback,b,null,function(e){if(e)throw e;console.log("Total Rows: %j",rowCount),console.log("Changes: %j",SQLite3.sqlite3_changes(db)),console.log("Closing..."),SQLite3.sqlite3_close(db),fs.unlinkSync(dbName),fin=!0});