!function(e,t){"object"==typeof exports?module.exports=exports=t(require("./core"),require("./sha1"),require("./hmac")):"function"==typeof define&&define.amd?define(["./core","./sha1","./hmac"],t):t(e.CryptoJS)}(this,function(e){return function(){var t=e,r=t.lib,i=r.Base,n=r.WordArray,o=t.algo,c=o.SHA1,a=o.HMAC,s=o.PBKDF2=i.extend({cfg:i.extend({keySize:4,hasher:c,iterations:1}),init:function(e){this.cfg=this.cfg.extend(e)},compute:function(e,t){var r,i,o,c,s,f,u,d,h,p,g,l,y,m,x;for(r=this.cfg,i=a.create(r.hasher,e),o=n.create(),c=n.create([1]),s=o.words,f=c.words,u=r.keySize,d=r.iterations;u>s.length;){for(h=i.update(t).finalize(c),i.reset(),p=h.words,g=p.length,l=h,y=1;d>y;y++)for(l=i.finalize(l),i.reset(),m=l.words,x=0;g>x;x++)p[x]^=m[x];o.concat(h),f[0]++}return o.sigBytes=4*u,o}});t.PBKDF2=function(e,t,r){return s.create(r).compute(e,t)}}(),e.PBKDF2});