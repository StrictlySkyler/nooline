var workers,i,hub=null,cluster=null,assert=null,WORKERS=1;if(cluster.isMaster){for(workers=[],i=0;WORKERS>i;i++)workers.push(cluster.fork());hub.on("emitRemove",function(){hub.emit("a"),hub.emit("b"),hub.emit("remove")}),hub.on("emitRubber",function(){hub.emit("rubber"),hub.emit("rubber"),hub.emit("rubber")}),hub.on("local",function(){throw Error("Received event that was supposed to be local")}),describe("Master",function(){it("Listens for event from a worker and responds",function(e){hub.on("yesmaster",function(t){assert.deepEqual(t,{hello:"there"}),hub.emit("work","now"),hub.emit("work","now"),e()})}),it("Listens for set event",function(e){hub.on("set foo",function(t){assert.equal(t,42),e()})}),it("Waits for workers to exit",function(e){function t(){0===--o&&e()}var o=WORKERS;cluster.on("exit",t)})})}else describe("Worker",function(){describe("Listen for event remotely",function(){it("Get a response from master",function(e){hub.on("work",function(t){assert.equal(t,"now"),hub.off("work"),e()}),hub.emitRemote("yesmaster",{hello:"there"}),hub.emitLocal("yesmaster","noo")})}),describe("Listen locally for event",function(){it("Event is emitted",function(e){hub.on("letsgo",e),hub.emit("letsgo")}),describe("and emit locally only",function(){it("Event is emitted only for this worker",function(e){hub.on("local",e),hub.emitLocal("local")})})}),describe("once",function(){it("Calls done() only once",function(e){hub.once("rubber",e),hub.emit("emitRubber")})}),describe("set",function(){it("gets correct value",function(e){var t=!1;hub.on("set foo",function(e){t=e}),hub.set("foo",42,function(o){assert.equal(o,!0),hub.get("foo",function(o){assert.equal(t,42),assert.equal(o,42),e()})})})}),describe("removeAllListeners",function(){it("Does not fire any event",function(e){var t=!0,o=!0;hub.on("a",function(){t=!1}),hub.on("b",function(){o=!1}),hub.removeAllListeners(),hub.once("remove",function(){assert(t),assert(o),e()}),hub.emit("emitRemove")}),describe("with explicit event",function(){it("Does not fire event",function(e){var t=!0;hub.on("a",function(){t=!1}),hub.removeAllListeners("a"),hub.once("remove",function(){assert(t),e()}),hub.emit("emitRemove")})})})});