function buffers_to_strings(e){return e.map(function(e){return""+e})}function require_number(e,t){return function(r,s){return assert.strictEqual(null,r,t+" expected "+e+", got error: "+r),assert.strictEqual(e,s,t+" "+e+" !== "+s),assert.strictEqual(typeof s,"number",t),!0}}function require_number_any(e){return function(t,r){return assert.strictEqual(null,t,e+" expected any number, got error: "+t),assert.strictEqual(typeof r,"number",e+" "+r+" is not a number"),!0}}function require_number_pos(e){return function(t,r){return assert.strictEqual(null,t,e+" expected positive number, got error: "+t),assert.strictEqual(!0,r>0,e+" "+r+" is not a positive number"),!0}}function require_string(e,t){return function(r,s){return assert.strictEqual(null,r,t+" expected string '"+e+"', got error: "+r),assert.equal(e,s,t+" "+e+" does not match "+s),!0}}function require_null(e){return function(t,r){return assert.strictEqual(null,t,e+" expected null, got error: "+t),assert.strictEqual(null,r,e+": "+r+" is not null"),!0}}function require_error(e){return function(t){return assert.notEqual(t,null,e+" err is null, but an error is expected here."),!0}}function is_empty_array(e){return Array.isArray(e)&&0===e.length}function last(e,t){return function(r,s){t(r,s),next(e)}}var redis=require("./index"),client=redis.createClient(),client2=redis.createClient(),client3=redis.createClient(),assert=require("assert"),crypto=require("crypto"),util=require("./lib/util"),test_db_num=15,tests={},connected=!1,ended=!1,next,cur_start,run_next_test,all_tests,all_start,test_count;redis.debug_mode=process.argv[2],next=function(){console.log(" [33m"+(Date.now()-cur_start)+"[0m ms"),run_next_test()},tests.FLUSHDB=function(){var e="FLUSHDB";client.select(test_db_num,require_string("OK",e)),client2.select(test_db_num,require_string("OK",e)),client3.select(test_db_num,require_string("OK",e)),client.mset("flush keys 1","flush val 1","flush keys 2","flush val 2",require_string("OK",e)),client.FLUSHDB(require_string("OK",e)),client.dbsize(last(e,require_number(0,e)))},tests.MULTI_1=function(){var e,t,r="MULTI_1";e=client.multi(),e.mset("multifoo","10","multibar","20",require_string("OK",r)),e.set("foo2",require_error(r)),e.incr("multifoo",require_number(11,r)),e.incr("multibar",require_number(21,r)),e.exec(),t=client.multi(),t.incr("multibar",require_number(22,r)),t.incr("multifoo",require_number(12,r)),t.exec(function(e,t){assert.strictEqual(22,t[0]),assert.strictEqual(12,t[1]),next(r)})},tests.MULTI_2=function(){var e="MULTI_2";client.multi([["mget","multifoo","multibar",function(t,r){assert.strictEqual(2,r.length,e),assert.strictEqual("12",""+r[0],e),assert.strictEqual("22",""+r[1],e)}],["set","foo2",require_error(e)],["incr","multifoo",require_number(13,e)],["incr","multibar",require_number(23,e)]]).exec(function(t,r){assert.strictEqual(2,r[0].length,e),assert.strictEqual("12",""+r[0][0],e),assert.strictEqual("22",""+r[0][1],e),assert.strictEqual("13",""+r[1]),assert.strictEqual("23",""+r[2]),next(e)})},tests.MULTI_3=function(){var e="MULTI_3";client.sadd("some set","mem 1"),client.sadd("some set","mem 2"),client.sadd("some set","mem 3"),client.sadd("some set","mem 4"),client.del("some missing set"),client.smembers("some missing set",function(t,r){assert.strictEqual(!0,is_empty_array(r),e)}),client.multi([["smembers","some set"],["del","some set"],["smembers","some set"]]).scard("some set").exec(function(t,r){assert.strictEqual(!0,is_empty_array(r[2]),e),next(e)})},tests.MULTI_4=function(){var e="MULTI_4";client.multi().mset("some","10","keys","20").incr("some").incr("keys").mget("some","keys").exec(function(t,r){assert.strictEqual(null,t),assert.equal("OK",r[0]),assert.equal(11,r[1]),assert.equal(21,r[2]),assert.equal(11,""+r[3][0]),assert.equal(21,""+r[3][1]),next(e)})},tests.MULTI_5=function(){var e="MULTI_5";client.multi([["mget",["multifoo","some","random value","keys"]],["incr","multifoo"]]).exec(function(t,r){assert.strictEqual(r.length,2,e),assert.strictEqual(r[0].length,4,e),next(e)})},tests.MULTI_6=function(){var e="MULTI_6";client.multi().hmset("multihash","a","foo","b",1).hmset("multihash",{extra:"fancy",things:"here"}).hgetall("multihash").exec(function(t,r){assert.strictEqual(null,t),assert.equal("OK",r[0]),assert.equal(Object.keys(r[2]).length,4),assert.equal("foo",r[2].a),assert.equal("1",r[2].b),assert.equal("fancy",r[2].extra),assert.equal("here",r[2].things),next(e)})},tests.EVAL_1=function(){var e,t,r="EVAL_1";client.server_info.versions[0]>=2&&client.server_info.versions[1]>=5?(client.eval("return 100.5",0,require_number(100,r)),client.eval("return 'hello world'",0,require_string("hello world",r)),client.eval("return true",0,require_number(1,r)),client.eval("return false",0,require_null(r)),client.eval("return {ok='fine'}",0,require_string("fine",r)),client.eval("return {err='this is an error'}",0,require_error(r)),client.eval("return {1,2,3,'ciao',{1,2}}",0,function(e,t){assert.strictEqual(5,t.length,r),assert.strictEqual(1,t[0],r),assert.strictEqual(2,t[1],r),assert.strictEqual(3,t[2],r),assert.strictEqual("ciao",t[3],r),assert.strictEqual(2,t[4].length,r),assert.strictEqual(1,t[4][0],r),assert.strictEqual(2,t[4][1],r)}),client.eval("return {KEYS[1],KEYS[2],ARGV[1],ARGV[2]}",2,"a","b","c","d",function(e,t){assert.strictEqual(4,t.length,r),assert.strictEqual("a",t[0],r),assert.strictEqual("b",t[1],r),assert.strictEqual("c",t[2],r),assert.strictEqual("d",t[3],r)}),e="return redis.call('get', 'sha test')",t=crypto.createHash("sha1").update(e).digest("hex"),client.set("sha test","eval get sha test",function(s){if(s)throw s;client.eval(e,0,function(e,s){require_string("eval get sha test",r)(e,s),client.evalsha(t,0,require_string("eval get sha test",r)),client.evalsha("ffffffffffffffffffffffffffffffffffffffff",0,require_error(r))})}),client.set("incr key",0,function(e){if(e)throw e;client.eval("local foo = redis.call('incr','incr key')\nreturn {type(foo),foo}",0,function(e,t){if(e)throw e;assert.strictEqual(2,t.length,r),assert.strictEqual("number",t[0],r),assert.strictEqual(1,t[1],r)})}),client.set("bulk reply key","bulk reply value",function(){client.eval("local foo = redis.call('get','bulk reply key'); return {type(foo),foo}",0,function(e,t){if(e)throw e;assert.strictEqual(2,t.length,r),assert.strictEqual("string",t[0],r),assert.strictEqual("bulk reply value",t[1],r)})}),client.multi().del("mylist").rpush("mylist","a").rpush("mylist","b").rpush("mylist","c").exec(function(e){if(e)throw e;client.eval("local foo = redis.call('lrange','mylist',0,-1); return {type(foo),foo[1],foo[2],foo[3],# foo}",0,function(e,t){assert.strictEqual(5,t.length,r),assert.strictEqual("table",t[0],r),assert.strictEqual("a",t[1],r),assert.strictEqual("b",t[2],r),assert.strictEqual("c",t[3],r),assert.strictEqual(3,t[4],r)})}),client.eval("local foo = redis.call('set','mykey','myval'); return {type(foo),foo['ok']}",0,function(e,t){if(e)throw e;assert.strictEqual(2,t.length,r),assert.strictEqual("table",t[0],r),assert.strictEqual("OK",t[1],r)}),client.set("error reply key","error reply value",function(e){if(e)throw e;client.eval("local foo = redis.pcall('incr','error reply key'); return {type(foo),foo['err']}",0,function(e,t){if(e)throw e;assert.strictEqual(2,t.length,r),assert.strictEqual("table",t[0],r),assert.strictEqual("ERR value is not an integer or out of range",t[1],r)})}),client.del("nil reply key",function(e){if(e)throw e;client.eval("local foo = redis.call('get','nil reply key'); return {type(foo),foo == false}",0,function(e,t){if(e)throw e;assert.strictEqual(2,t.length,r),assert.strictEqual("boolean",t[0],r),assert.strictEqual(1,t[1],r),next(r)})})):(console.log("Skipping "+r+" because server version isn't new enough."),next(r))},tests.WATCH_MULTI=function(){var e,t="WATCH_MULTI";client.server_info.versions[0]>=2&&client.server_info.versions[1]>=1?(client.watch(t),client.incr(t),e=client.multi(),e.incr(t),e.exec(last(t,require_null(t)))):(console.log("Skipping "+t+" because server version isn't new enough."),next(t))},tests.detect_buffers=function(){var e="detect_buffers",t=redis.createClient(null,null,{detect_buffers:!0});t.on("ready",function(){t.set("string key 1","string value"),t.get("string key 1",require_string("string value",e)),t.get(new Buffer("string key 1"),function(t,r){assert.strictEqual(null,t,e),assert.strictEqual(!0,Buffer.isBuffer(r),e),assert.strictEqual("<Buffer 73 74 72 69 6e 67 20 76 61 6c 75 65>",r.inspect(),e)}),t.hmset("hash key 2","key 1","val 1","key 2","val 2"),t.hmget("hash key 2","key 1","key 2",function(t,r){assert.strictEqual(null,t,e),assert.strictEqual(!0,Array.isArray(r),e),assert.strictEqual(2,r.length,e),assert.strictEqual("val 1",r[0],e),assert.strictEqual("val 2",r[1],e)}),t.hmget(new Buffer("hash key 2"),"key 1","key 2",function(t,r){assert.strictEqual(null,t,e),assert.strictEqual(!0,Array.isArray(r)),assert.strictEqual(2,r.length,e),assert.strictEqual(!0,Buffer.isBuffer(r[0])),assert.strictEqual(!0,Buffer.isBuffer(r[1])),assert.strictEqual("<Buffer 76 61 6c 20 31>",r[0].inspect(),e),assert.strictEqual("<Buffer 76 61 6c 20 32>",r[1].inspect(),e)}),t.hgetall("hash key 2",function(t,r){assert.strictEqual(null,t,e),assert.strictEqual("object",typeof r,e),assert.strictEqual(2,Object.keys(r).length,e),assert.strictEqual("val 1",r["key 1"],e),assert.strictEqual("val 2",r["key 2"],e)}),t.hgetall(new Buffer("hash key 2"),function(t,r){assert.strictEqual(null,t,e),assert.strictEqual("object",typeof r,e),assert.strictEqual(2,Object.keys(r).length,e),assert.strictEqual(!0,Buffer.isBuffer(r["key 1"])),assert.strictEqual(!0,Buffer.isBuffer(r["key 2"])),assert.strictEqual("<Buffer 76 61 6c 20 31>",r["key 1"].inspect(),e),assert.strictEqual("<Buffer 76 61 6c 20 32>",r["key 2"].inspect(),e)}),t.quit(function(){next(e)})})},tests.socket_nodelay=function(){function e(){a++,3===a&&next(u)}function t(){assert.strictEqual(!0,s.options.socket_nodelay,u),assert.strictEqual(!1,n.options.socket_nodelay,u),assert.strictEqual(!0,i.options.socket_nodelay,u),s.set(["set key 1","set val"],require_string("OK",u)),s.set(["set key 2","set val"],require_string("OK",u)),s.get(["set key 1"],require_string("set val",u)),s.get(["set key 2"],require_string("set val",u)),n.set(["set key 3","set val"],require_string("OK",u)),n.set(["set key 4","set val"],require_string("OK",u)),n.get(["set key 3"],require_string("set val",u)),n.get(["set key 4"],require_string("set val",u)),i.set(["set key 5","set val"],require_string("OK",u)),i.set(["set key 6","set val"],require_string("OK",u)),i.get(["set key 5"],require_string("set val",u)),i.get(["set key 6"],require_string("set val",u)),s.quit(e),n.quit(e),i.quit(e)}function r(){l++,3===l&&t()}var s,n,i,u="socket_nodelay",l=0,a=0;s=redis.createClient(null,null,{socket_nodelay:!0}),n=redis.createClient(null,null,{socket_nodelay:!1}),i=redis.createClient(null,null),s.on("ready",r),n.on("ready",r),i.on("ready",r)},tests.reconnect=function(){var e="reconnect";client.set("recon 1","one"),client.set("recon 2","two",function(){client.stream.destroy()}),client.on("reconnecting",function t(){client.on("connect",function r(){client.select(test_db_num,require_string("OK",e)),client.get("recon 1",require_string("one",e)),client.get("recon 1",require_string("one",e)),client.get("recon 2",require_string("two",e)),client.get("recon 2",require_string("two",e)),client.removeListener("connect",r),client.removeListener("reconnecting",t),next(e)})})},tests.idle=function(){var e="idle";client.on("idle",function t(){client.removeListener("idle",t),next(e)}),client.set("idle","test")},tests.HSET=function(){var e="test hash",t=new Buffer("0123456789"),r=new Buffer("abcdefghij"),s=new Buffer(0),n=new Buffer(0),i="HSET";client.HSET(e,t,r,require_number(1,i)),client.HGET(e,t,require_string(""+r,i)),client.HSET(e,t,n,require_number(0,i)),client.HGET([e,t],require_string("",i)),client.HSET([e,s,r],require_number(1,i)),client.HSET(e,s,n,last(i,require_number(0,i)))},tests.HLEN=function(){var e="test hash",t=new Buffer("0123456789"),r=new Buffer("abcdefghij"),s=(new Buffer(0),new Buffer(0),"HSET");client.HSET(e,t,r,function(){client.HLEN(e,function(e,t){assert.ok(2===+t),next(s)})})},tests.HMSET_BUFFER_AND_ARRAY=function(){var e="test hash",t="buffer",r=new Buffer("abcdefghij"),s="array",n=["array contents"],i="HSET";client.HMSET(e,t,r,s,n,last(i,require_string("OK",i)))},tests.HMGET=function(){var e="test hash 1",t="test hash 2",r="HMGET";client.HMSET(e,"0123456789","abcdefghij","some manner of key","a type of value",require_string("OK",r)),client.HMSET(t,{"0123456789":"abcdefghij","some manner of key":"a type of value"},require_string("OK",r)),client.HMGET(e,"0123456789","some manner of key",function(e,t){assert.strictEqual("abcdefghij",""+t[0],r),assert.strictEqual("a type of value",""+t[1],r)}),client.HMGET(t,"0123456789","some manner of key",function(e,t){assert.strictEqual("abcdefghij",""+t[0],r),assert.strictEqual("a type of value",""+t[1],r)}),client.HMGET(e,["0123456789"],function(e,t){assert.strictEqual("abcdefghij",t[0],r)}),client.HMGET(e,["0123456789","some manner of key"],function(e,t){assert.strictEqual("abcdefghij",t[0],r),assert.strictEqual("a type of value",t[1],r)}),client.HMGET(e,"missing thing","another missing thing",function(e,t){assert.strictEqual(null,t[0],r),assert.strictEqual(null,t[1],r),next(r)})},tests.HINCRBY=function(){var e="HINCRBY";client.hset("hash incr","value",10,require_number(1,e)),client.HINCRBY("hash incr","value",1,require_number(11,e)),client.HINCRBY("hash incr","value 2",1,last(e,require_number(1,e)))},tests.SUBSCRIBE=function(){var e=client,t=0,r="SUBSCRIBE";e.on("subscribe",function(e){"chan1"===e&&(client2.publish("chan1","message 1",require_number(1,r)),client2.publish("chan2","message 2",require_number(1,r)),client2.publish("chan1","message 3",require_number(1,r)))}),e.on("unsubscribe",function(t,s){0===s&&e.incr("did a thing",last(r,require_number(2,r)))}),e.on("message",function(r,s){t+=1,assert.strictEqual("message "+t,""+s),3===t&&e.unsubscribe("chan1","chan2")}),e.set("did a thing",1,require_string("OK",r)),e.subscribe("chan1","chan2",function(e,t){assert.strictEqual(null,e,"result sent back unexpected error: "+e),assert.strictEqual("chan1",""+t,r)})},tests.SUB_UNSUB_SUB=function(){var e="SUB_UNSUB_SUB";client3.subscribe("chan3"),client3.unsubscribe("chan3"),client3.subscribe("chan3",function(e){assert.strictEqual(null,e,"unexpected error: "+e),client2.publish("chan3","foo")}),client3.on("message",function(t,r){assert.strictEqual(t,"chan3"),assert.strictEqual(r,"foo"),next(e)})},tests.SUBSCRIBE_QUIT=function(){var e="SUBSCRIBE_QUIT";client3.on("end",function(){next(e)}),client3.on("subscribe",function(){client3.quit()}),client3.subscribe("chan3")},tests.SUBSCRIBE_CLOSE_RESUBSCRIBE=function(){var e="SUBSCRIBE_CLOSE_RESUBSCRIBE",t=redis.createClient(),r=redis.createClient(),s=0;t.on("message",function(e,s){"chan1"===e?(assert.strictEqual(s,"hi on channel 1"),t.stream.end()):"chan2"===e?(assert.strictEqual(s,"hi on channel 2"),t.stream.end()):(t.quit(),r.quit(),assert.fail("test failed"))}),t.subscribe("chan1","chan2"),r.once("ready",function(){console.log("c2 is ready"),t.on("ready",function(){return console.log("c1 is ready",s),s++,1==s?(r.publish("chan1","hi on channel 1"),void 0):(2==s?r.publish("chan2","hi on channel 2"):t.quit(function(){r.quit(function(){next(e)})}),void 0)}),r.publish("chan1","hi on channel 1")})},tests.EXISTS=function(){var e="EXISTS";client.del("foo","foo2",require_number_any(e)),client.set("foo","bar",require_string("OK",e)),client.EXISTS("foo",require_number(1,e)),client.EXISTS("foo2",last(e,require_number(0,e)))},tests.DEL=function(){var e="DEL";client.DEL("delkey",require_number_any(e)),client.set("delkey","delvalue",require_string("OK",e)),client.DEL("delkey",require_number(1,e)),client.exists("delkey",require_number(0,e)),client.DEL("delkey",require_number(0,e)),client.mset("delkey","delvalue","delkey2","delvalue2",require_string("OK",e)),client.DEL("delkey","delkey2",last(e,require_number(2,e)))},tests.TYPE=function(){var e="TYPE";client.set(["string key","should be a string"],require_string("OK",e)),client.rpush(["list key","should be a list"],require_number_pos(e)),client.sadd(["set key","should be a set"],require_number_any(e)),client.zadd(["zset key","10.0","should be a zset"],require_number_any(e)),client.hset(["hash key","hashtest","should be a hash"],require_number_any(0,e)),client.TYPE(["string key"],require_string("string",e)),client.TYPE(["list key"],require_string("list",e)),client.TYPE(["set key"],require_string("set",e)),client.TYPE(["zset key"],require_string("zset",e)),client.TYPE("not here yet",require_string("none",e)),client.TYPE(["hash key"],last(e,require_string("hash",e)))},tests.KEYS=function(){var e="KEYS";client.mset(["test keys 1","test val 1","test keys 2","test val 2"],require_string("OK",e)),client.KEYS(["test keys*"],function(t,r){assert.strictEqual(null,t,"result sent back unexpected error: "+t),assert.strictEqual(2,r.length,e),assert.strictEqual("test keys 1",""+r[0],e),assert.strictEqual("test keys 2",""+r[1],e),next(e)})},tests.MULTIBULK_ZERO_LENGTH=function(){var e="MULTIBULK_ZERO_LENGTH";client.KEYS(["users:*"],function(t,r){assert.strictEqual(null,t,"error on empty multibulk reply"),assert.strictEqual(!0,is_empty_array(r),"not an empty array"),next(e)})},tests.RANDOMKEY=function(){var e="RANDOMKEY";client.mset(["test keys 1","test val 1","test keys 2","test val 2"],require_string("OK",e)),client.RANDOMKEY([],function(t,r){assert.strictEqual(null,t,e+" result sent back unexpected error: "+t),assert.strictEqual(!0,/\w+/.test(r),e),next(e)})},tests.RENAME=function(){var e="RENAME";client.set(["foo","bar"],require_string("OK",e)),client.RENAME(["foo","new foo"],require_string("OK",e)),client.exists(["foo"],require_number(0,e)),client.exists(["new foo"],last(e,require_number(1,e)))},tests.RENAMENX=function(){var e="RENAMENX";client.set(["foo","bar"],require_string("OK",e)),client.set(["foo2","bar2"],require_string("OK",e)),client.RENAMENX(["foo","foo2"],require_number(0,e)),client.exists(["foo"],require_number(1,e)),client.exists(["foo2"],require_number(1,e)),client.del(["foo2"],require_number(1,e)),client.RENAMENX(["foo","foo2"],require_number(1,e)),client.exists(["foo"],require_number(0,e)),client.exists(["foo2"],last(e,require_number(1,e)))},tests.DBSIZE=function(){var e="DBSIZE";client.set(["foo","bar"],require_string("OK",e)),client.DBSIZE([],last(e,require_number_pos("DBSIZE")))},tests.GET=function(){var e="GET";client.set(["get key","get val"],require_string("OK",e)),client.GET(["get key"],last(e,require_string("get val",e)))},tests.SET=function(){var e="SET";client.SET(["set key","set val"],require_string("OK",e)),client.get(["set key"],last(e,require_string("set val",e)))},tests.GETSET=function(){var e="GETSET";client.set(["getset key","getset val"],require_string("OK",e)),client.GETSET(["getset key","new getset val"],require_string("getset val",e)),client.get(["getset key"],last(e,require_string("new getset val",e)))},tests.MGET=function(){var e="MGET";client.mset(["mget keys 1","mget val 1","mget keys 2","mget val 2","mget keys 3","mget val 3"],require_string("OK",e)),client.MGET("mget keys 1","mget keys 2","mget keys 3",function(t,r){assert.strictEqual(null,t,"result sent back unexpected error: "+t),assert.strictEqual(3,r.length,e),assert.strictEqual("mget val 1",""+r[0],e),assert.strictEqual("mget val 2",""+r[1],e),assert.strictEqual("mget val 3",""+r[2],e)}),client.MGET(["mget keys 1","mget keys 2","mget keys 3"],function(t,r){assert.strictEqual(null,t,"result sent back unexpected error: "+t),assert.strictEqual(3,r.length,e),assert.strictEqual("mget val 1",""+r[0],e),assert.strictEqual("mget val 2",""+r[1],e),assert.strictEqual("mget val 3",""+r[2],e)}),client.MGET(["mget keys 1","some random shit","mget keys 2","mget keys 3"],function(t,r){assert.strictEqual(null,t,"result sent back unexpected error: "+t),assert.strictEqual(4,r.length,e),assert.strictEqual("mget val 1",""+r[0],e),assert.strictEqual(null,r[1],e),assert.strictEqual("mget val 2",""+r[2],e),assert.strictEqual("mget val 3",""+r[3],e),next(e)})},tests.SETNX=function(){var e="SETNX";client.set(["setnx key","setnx value"],require_string("OK",e)),client.SETNX(["setnx key","new setnx value"],require_number(0,e)),client.del(["setnx key"],require_number(1,e)),client.exists(["setnx key"],require_number(0,e)),client.SETNX(["setnx key","new setnx value"],require_number(1,e)),client.exists(["setnx key"],last(e,require_number(1,e)))},tests.SETEX=function(){var e="SETEX";client.SETEX(["setex key","100","setex val"],require_string("OK",e)),client.exists(["setex key"],require_number(1,e)),client.ttl(["setex key"],last(e,require_number_pos(e)))},tests.MSETNX=function(){var e="MSETNX";client.mset(["mset1","val1","mset2","val2","mset3","val3"],require_string("OK",e)),client.MSETNX(["mset3","val3","mset4","val4"],require_number(0,e)),client.del(["mset3"],require_number(1,e)),client.MSETNX(["mset3","val3","mset4","val4"],require_number(1,e)),client.exists(["mset3"],require_number(1,e)),client.exists(["mset4"],last(e,require_number(1,e)))},tests.HGETALL=function(){var e="HGETALL";client.hmset(["hosts","mjr","1","another","23","home","1234"],require_string("OK",e)),client.HGETALL(["hosts"],function(t,r){assert.strictEqual(null,t,e+" result sent back unexpected error: "+t),assert.strictEqual(3,Object.keys(r).length,e),assert.strictEqual("1",""+r.mjr,e),assert.strictEqual("23",""+r.another,e),assert.strictEqual("1234",""+r.home,e),next(e)})},tests.HGETALL_NULL=function(){var e="HGETALL_NULL";client.hgetall("missing",function(t,r){assert.strictEqual(null,t),assert.strictEqual(null,r),next(e)})},tests.UTF8=function(){var e="UTF8",t="ಠ_ಠ";client.set(["utf8test",t],require_string("OK",e)),client.get(["utf8test"],function(r,s){assert.strictEqual(null,r),assert.strictEqual(t,s),next(e)})},tests.SADD=function(){var e="SADD";client.del("set0"),client.SADD("set0","member0",require_number(1,e)),client.sadd("set0","member0",last(e,require_number(0,e)))},tests.SADD2=function(){var e="SADD2";client.del("set0"),client.sadd("set0",["member0","member1","member2"],require_number(3,e)),client.smembers("set0",function(e,t){assert.strictEqual(t.length,3),assert.strictEqual(t[0],"member0"),assert.strictEqual(t[1],"member1"),assert.strictEqual(t[2],"member2")}),client.SADD("set1",["member0","member1","member2"],require_number(3,e)),client.smembers("set1",function(t,r){assert.strictEqual(r.length,3),assert.strictEqual(r[0],"member0"),assert.strictEqual(r[1],"member1"),assert.strictEqual(r[2],"member2"),next(e)})},tests.SISMEMBER=function(){var e="SISMEMBER";client.del("set0"),client.sadd("set0","member0",require_number(1,e)),client.sismember("set0","member0",require_number(1,e)),client.sismember("set0","member1",last(e,require_number(0,e)))},tests.SCARD=function(){var e="SCARD";client.del("set0"),client.sadd("set0","member0",require_number(1,e)),client.scard("set0",require_number(1,e)),client.sadd("set0","member1",require_number(1,e)),client.scard("set0",last(e,require_number(2,e)))},tests.SREM=function(){var e="SREM";client.del("set0"),client.sadd("set0","member0",require_number(1,e)),client.srem("set0","foobar",require_number(0,e)),client.srem("set0","member0",require_number(1,e)),client.scard("set0",last(e,require_number(0,e)))},tests.SPOP=function(){var e="SPOP";client.del("zzz"),client.sadd("zzz","member0",require_number(1,e)),client.scard("zzz",require_number(1,e)),client.spop("zzz",function(t,r){t&&assert.fail(t),assert.equal(r,"member0",e)}),client.scard("zzz",last(e,require_number(0,e)))},tests.SDIFF=function(){var e="SDIFF";client.del("foo"),client.sadd("foo","x",require_number(1,e)),client.sadd("foo","a",require_number(1,e)),client.sadd("foo","b",require_number(1,e)),client.sadd("foo","c",require_number(1,e)),client.sadd("bar","c",require_number(1,e)),client.sadd("baz","a",require_number(1,e)),client.sadd("baz","d",require_number(1,e)),client.sdiff("foo","bar","baz",function(t,r){t&&assert.fail(t,e),r.sort(),assert.equal(r.length,2,e),assert.equal(r[0],"b",e),assert.equal(r[1],"x",e),next(e)})},tests.SDIFFSTORE=function(){var e="SDIFFSTORE";client.del("foo"),client.del("bar"),client.del("baz"),client.del("quux"),client.sadd("foo","x",require_number(1,e)),client.sadd("foo","a",require_number(1,e)),client.sadd("foo","b",require_number(1,e)),client.sadd("foo","c",require_number(1,e)),client.sadd("bar","c",require_number(1,e)),client.sadd("baz","a",require_number(1,e)),client.sadd("baz","d",require_number(1,e)),client.sdiffstore("quux","foo","bar","baz",require_number(2,e)),client.smembers("quux",function(t,r){t&&assert.fail(t,e);var s=buffers_to_strings(r).sort();assert.deepEqual(s,["b","x"],e),next(e)})},tests.SMEMBERS=function(){var e="SMEMBERS";client.del("foo"),client.sadd("foo","x",require_number(1,e)),client.smembers("foo",function(t,r){t&&assert.fail(t,e),assert.deepEqual(buffers_to_strings(r),["x"],e)}),client.sadd("foo","y",require_number(1,e)),client.smembers("foo",function(t,r){t&&assert.fail(t,e),assert.equal(r.length,2,e);var s=buffers_to_strings(r).sort();assert.deepEqual(s,["x","y"],e),next(e)})},tests.SMOVE=function(){var e="SMOVE";client.del("foo"),client.del("bar"),client.sadd("foo","x",require_number(1,e)),client.smove("foo","bar","x",require_number(1,e)),client.sismember("foo","x",require_number(0,e)),client.sismember("bar","x",require_number(1,e)),client.smove("foo","bar","x",last(e,require_number(0,e)))},tests.SINTER=function(){var e="SINTER";client.del("sa"),client.del("sb"),client.del("sc"),client.sadd("sa","a",require_number(1,e)),client.sadd("sa","b",require_number(1,e)),client.sadd("sa","c",require_number(1,e)),client.sadd("sb","b",require_number(1,e)),client.sadd("sb","c",require_number(1,e)),client.sadd("sb","d",require_number(1,e)),client.sadd("sc","c",require_number(1,e)),client.sadd("sc","d",require_number(1,e)),client.sadd("sc","e",require_number(1,e)),client.sinter("sa","sb",function(t,r){t&&assert.fail(t,e),assert.equal(r.length,2,e),assert.deepEqual(buffers_to_strings(r).sort(),["b","c"],e)}),client.sinter("sb","sc",function(t,r){t&&assert.fail(t,e),assert.equal(r.length,2,e),assert.deepEqual(buffers_to_strings(r).sort(),["c","d"],e)}),client.sinter("sa","sc",function(t,r){t&&assert.fail(t,e),assert.equal(r.length,1,e),assert.equal(r[0],"c",e)}),client.sinter("sa","sb","sc",function(t,r){t&&assert.fail(t,e),assert.equal(r.length,1,e),assert.equal(r[0],"c",e),next(e)})},tests.SINTERSTORE=function(){var e="SINTERSTORE";client.del("sa"),client.del("sb"),client.del("sc"),client.del("foo"),client.sadd("sa","a",require_number(1,e)),client.sadd("sa","b",require_number(1,e)),client.sadd("sa","c",require_number(1,e)),client.sadd("sb","b",require_number(1,e)),client.sadd("sb","c",require_number(1,e)),client.sadd("sb","d",require_number(1,e)),client.sadd("sc","c",require_number(1,e)),client.sadd("sc","d",require_number(1,e)),client.sadd("sc","e",require_number(1,e)),client.sinterstore("foo","sa","sb","sc",require_number(1,e)),client.smembers("foo",function(t,r){t&&assert.fail(t,e),assert.deepEqual(buffers_to_strings(r),["c"],e),next(e)})},tests.SUNION=function(){var e="SUNION";client.del("sa"),client.del("sb"),client.del("sc"),client.sadd("sa","a",require_number(1,e)),client.sadd("sa","b",require_number(1,e)),client.sadd("sa","c",require_number(1,e)),client.sadd("sb","b",require_number(1,e)),client.sadd("sb","c",require_number(1,e)),client.sadd("sb","d",require_number(1,e)),client.sadd("sc","c",require_number(1,e)),client.sadd("sc","d",require_number(1,e)),client.sadd("sc","e",require_number(1,e)),client.sunion("sa","sb","sc",function(t,r){t&&assert.fail(t,e),assert.deepEqual(buffers_to_strings(r).sort(),["a","b","c","d","e"],e),next(e)})},tests.SUNIONSTORE=function(){var e="SUNIONSTORE";client.del("sa"),client.del("sb"),client.del("sc"),client.del("foo"),client.sadd("sa","a",require_number(1,e)),client.sadd("sa","b",require_number(1,e)),client.sadd("sa","c",require_number(1,e)),client.sadd("sb","b",require_number(1,e)),client.sadd("sb","c",require_number(1,e)),client.sadd("sb","d",require_number(1,e)),client.sadd("sc","c",require_number(1,e)),client.sadd("sc","d",require_number(1,e)),client.sadd("sc","e",require_number(1,e)),client.sunionstore("foo","sa","sb","sc",function(t,r){t&&assert.fail(t,e),assert.equal(r,5,e)}),client.smembers("foo",function(t,r){t&&assert.fail(t,e),assert.equal(r.length,5,e),assert.deepEqual(buffers_to_strings(r).sort(),["a","b","c","d","e"],e),next(e)})},tests.SORT=function(){var e="SORT";client.del("y"),client.del("x"),client.rpush("y","d",require_number(1,e)),client.rpush("y","b",require_number(2,e)),client.rpush("y","a",require_number(3,e)),client.rpush("y","c",require_number(4,e)),client.rpush("x","3",require_number(1,e)),client.rpush("x","9",require_number(2,e)),client.rpush("x","2",require_number(3,e)),client.rpush("x","4",require_number(4,e)),client.set("w3","4",require_string("OK",e)),client.set("w9","5",require_string("OK",e)),client.set("w2","12",require_string("OK",e)),client.set("w4","6",require_string("OK",e)),client.set("o2","buz",require_string("OK",e)),client.set("o3","foo",require_string("OK",e)),client.set("o4","baz",require_string("OK",e)),client.set("o9","bar",require_string("OK",e)),client.set("p2","qux",require_string("OK",e)),client.set("p3","bux",require_string("OK",e)),client.set("p4","lux",require_string("OK",e)),client.set("p9","tux",require_string("OK",e)),client.sort("y","asc","alpha",function(t,r){t&&assert.fail(t,e),assert.deepEqual(buffers_to_strings(r),["a","b","c","d"],e)}),client.sort("y","desc","alpha",function(t,r){t&&assert.fail(t,e),assert.deepEqual(buffers_to_strings(r),["d","c","b","a"],e)}),client.sort("x","asc",function(t,r){t&&assert.fail(t,e),assert.deepEqual(buffers_to_strings(r),[2,3,4,9],e)}),client.sort("x","desc",function(t,r){t&&assert.fail(t,e),assert.deepEqual(buffers_to_strings(r),[9,4,3,2],e)}),client.sort("x","by","w*","asc",function(t,r){t&&assert.fail(t,e),assert.deepEqual(buffers_to_strings(r),[3,9,4,2],e)}),client.sort("x","by","w*","asc","get","o*",function(t,r){t&&assert.fail(t,e),assert.deepEqual(buffers_to_strings(r),["foo","bar","baz","buz"],e)}),client.sort("x","by","w*","asc","get","o*","get","p*",function(t,r){t&&assert.fail(t,e),assert.deepEqual(buffers_to_strings(r),["foo","bux","bar","tux","baz","lux","buz","qux"],e)}),client.sort("x","by","w*","asc","get","o*","get","p*","store","bacon",function(t){t&&assert.fail(t,e)}),client.lrange("bacon",0,-1,function(t,r){t&&assert.fail(t,e),assert.deepEqual(buffers_to_strings(r),["foo","bux","bar","tux","baz","lux","buz","qux"],e),next(e)})},tests.MONITOR=function(){var e,t="MONITOR",r=[];e=redis.createClient(),e.monitor(function(){client.mget("some","keys","foo","bar"),client.set("json",JSON.stringify({foo:"123",bar:"sdflkdfsjk",another:!1}))}),e.on("monitor",function(s,n){"monitor"!==n[0]&&(r.push(n),2===r.length&&(assert.strictEqual(5,r[0].length),assert.strictEqual("mget",r[0][0]),assert.strictEqual("some",r[0][1]),assert.strictEqual("keys",r[0][2]),assert.strictEqual("foo",r[0][3]),assert.strictEqual("bar",r[0][4]),assert.strictEqual(3,r[1].length),assert.strictEqual("set",r[1][0]),assert.strictEqual("json",r[1][1]),assert.strictEqual('{"foo":"123","bar":"sdflkdfsjk","another":false}',r[1][2]),e.quit(function(){next(t)})))})},tests.BLPOP=function(){var e="BLPOP";client.rpush("blocking list","initial value",function(){client2.BLPOP("blocking list",0,function(e,t){assert.strictEqual("blocking list",""+t[0]),assert.strictEqual("initial value",""+t[1]),client.rpush("blocking list","wait for this value")}),client2.BLPOP("blocking list",0,function(t,r){assert.strictEqual("blocking list",""+r[0]),assert.strictEqual("wait for this value",""+r[1]),next(e)})})},tests.BLPOP_TIMEOUT=function(){var e="BLPOP_TIMEOUT";client2.BLPOP("blocking list",1,function(t,r){if(t)throw t;assert.strictEqual(r,null),next(e)
})},tests.EXPIRE=function(){var e="EXPIRE";client.set(["expiry key","bar"],require_string("OK",e)),client.EXPIRE(["expiry key","1"],require_number_pos(e)),setTimeout(function(){client.exists(["expiry key"],last(e,require_number(0,e)))},2e3)},tests.TTL=function(){var e="TTL";client.set(["ttl key","ttl val"],require_string("OK",e)),client.expire(["ttl key","100"],require_number_pos(e)),setTimeout(function(){client.TTL(["ttl key"],last(e,require_number_pos(0,e)))},500)},tests.OPTIONAL_CALLBACK=function(){var e="OPTIONAL_CALLBACK";client.del("op_cb1"),client.set("op_cb1","x"),client.get("op_cb1",last(e,require_string("x",e)))},tests.OPTIONAL_CALLBACK_UNDEFINED=function(){var e="OPTIONAL_CALLBACK_UNDEFINED";client.del("op_cb2"),client.set("op_cb2","y",void 0),client.get("op_cb2",last(e,require_string("y",e)))},tests.HMSET_THROWS_ON_NON_STRINGS=function(){function e(e){assert(e)}function t(){client.hmset(s,n)}var r="HMSET_THROWS_ON_NON_STRINGS",s=r,n={a:["this is not a string"]};client.hmset(s,n,e),assert.throws(t),next(r)},tests.ENABLE_OFFLINE_QUEUE_TRUE=function(){var e="ENABLE_OFFLINE_QUEUE_TRUE",t=redis.createClient(9999,null,{max_attempts:1});return t.on("error",function(){}),setTimeout(function(){return t.set(e,e,function(e){assert.ifError(e)}),setTimeout(function(){return assert.strictEqual(t.offline_queue.length,1),next(e)},25)},50)},tests.ENABLE_OFFLINE_QUEUE_FALSE=function(){var e="ENABLE_OFFLINE_QUEUE_FALSE",t=redis.createClient(9999,null,{max_attempts:1,enable_offline_queue:!1});t.on("error",function(){}),assert.throws(function(){t.set(e,e)}),assert.doesNotThrow(function(){t.set(e,e,function(t){assert.ok(t),setTimeout(function(){next(e)},50)})})},tests.auth=function(){var e,t="AUTH",r=0;e=redis.createClient(9006,"filefish.redistogo.com"),e.auth("664b1b6aaf134e1ec281945a8de702a9",function(e,r){assert.strictEqual(null,e,t),assert.strictEqual("OK",""+r,t)}),e.on("ready",function(){r++,1===r?e.stream.destroy():e.quit(function(){next(t)})})},all_tests=Object.keys(tests),all_start=new Date,test_count=0,run_next_test=function(){var e=all_tests.shift();"function"==typeof tests[e]?(util.print("- [1m"+e.toLowerCase()+"[0m:"),cur_start=new Date,test_count+=1,tests[e]()):(console.log("\n  completed [32m%d[0m tests in [33m%d[0m ms\n",test_count,new Date-all_start),client.quit(),client2.quit())},client.once("ready",function(){console.log("Connected to "+client.host+":"+client.port+", Redis server version "+client.server_info.redis_version+"\n"),console.log("Using reply parser "+client.reply_parser.name),run_next_test(),connected=!0}),client.on("end",function(){ended=!0}),client.on("error",function(e){console.error("client: "+e.stack),process.exit()}),client2.on("error",function(e){console.error("client2: "+e.stack),process.exit()}),client3.on("error",function(e){console.error("client3: "+e.stack),process.exit()}),client.on("reconnecting",function(e){console.log("reconnecting: "+util.inspect(e))}),process.on("uncaughtException",function(e){console.error("Uncaught exception: "+e.stack),process.exit(1)}),process.on("exit",function(){assert.equal(!0,connected),assert.equal(!0,ended)});