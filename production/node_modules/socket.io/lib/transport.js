/*!
 * socket.io-node
 * Copyright(c) 2011 LearnBoost <dev@learnboost.com>
 * MIT Licensed
 */

function Transport(t,e,o){this.manager=t,this.id=e.id,this.disconnected=!1,this.drained=!0,this.handleRequest(o)}var parser=null;exports=module.exports=Transport,Transport.prototype.__defineGetter__("log",function(){return this.manager.log}),Transport.prototype.__defineGetter__("store",function(){return this.manager.store}),Transport.prototype.handleRequest=function(t){this.log.debug("setting request",t.method,t.url),this.req=t,"GET"==t.method&&(this.socket=t.socket,this.open=!0,this.drained=!0,this.setHeartbeatInterval(),this.setHandlers(),this.onSocketConnect())},Transport.prototype.onSocketConnect=function(){},Transport.prototype.setHandlers=function(){var t=this;this.store.subscribe("heartbeat-clear:"+this.id,function(){t.onHeartbeatClear()}),this.store.subscribe("disconnect-force:"+this.id,function(){t.onForcedDisconnect()}),this.store.subscribe("dispatch:"+this.id,function(e,o){t.onDispatch(e,o)}),this.bound={end:this.onSocketEnd.bind(this),close:this.onSocketClose.bind(this),error:this.onSocketError.bind(this),drain:this.onSocketDrain.bind(this)},this.socket.on("end",this.bound.end),this.socket.on("close",this.bound.close),this.socket.on("error",this.bound.error),this.socket.on("drain",this.bound.drain),this.handlersSet=!0},Transport.prototype.clearHandlers=function(){this.handlersSet&&(this.store.unsubscribe("disconnect-force:"+this.id),this.store.unsubscribe("heartbeat-clear:"+this.id),this.store.unsubscribe("dispatch:"+this.id),this.socket.removeListener("end",this.bound.end),this.socket.removeListener("close",this.bound.close),this.socket.removeListener("error",this.bound.error),this.socket.removeListener("drain",this.bound.drain))},Transport.prototype.onSocketEnd=function(){this.end("socket end")},Transport.prototype.onSocketClose=function(t){this.end(t?"socket error":"socket close")},Transport.prototype.onSocketError=function(t){this.open&&(this.socket.destroy(),this.onClose()),this.log.info("socket error "+t.stack)},Transport.prototype.onSocketDrain=function(){this.drained=!0},Transport.prototype.onHeartbeatClear=function(){this.clearHeartbeatTimeout(),this.setHeartbeatInterval()},Transport.prototype.onForcedDisconnect=function(){this.disconnected||(this.log.info("transport end by forced client disconnection"),this.open&&this.packet({type:"disconnect"}),this.end("booted"))},Transport.prototype.onDispatch=function(t,e){e?this.writeVolatile(t):this.write(t)},Transport.prototype.setCloseTimeout=function(){if(!this.closeTimeout){var t=this;this.closeTimeout=setTimeout(function(){t.log.debug("fired close timeout for client",t.id),t.closeTimeout=null,t.end("close timeout")},1e3*this.manager.get("close timeout")),this.log.debug("set close timeout for client",this.id)}},Transport.prototype.clearCloseTimeout=function(){this.closeTimeout&&(clearTimeout(this.closeTimeout),this.closeTimeout=null,this.log.debug("cleared close timeout for client",this.id))},Transport.prototype.setHeartbeatTimeout=function(){if(!this.heartbeatTimeout&&this.manager.enabled("heartbeats")){var t=this;this.heartbeatTimeout=setTimeout(function(){t.log.debug("fired heartbeat timeout for client",t.id),t.heartbeatTimeout=null,t.end("heartbeat timeout")},1e3*this.manager.get("heartbeat timeout")),this.log.debug("set heartbeat timeout for client",this.id)}},Transport.prototype.clearHeartbeatTimeout=function(){this.heartbeatTimeout&&this.manager.enabled("heartbeats")&&(clearTimeout(this.heartbeatTimeout),this.heartbeatTimeout=null,this.log.debug("cleared heartbeat timeout for client",this.id))},Transport.prototype.setHeartbeatInterval=function(){if(!this.heartbeatInterval&&this.manager.enabled("heartbeats")){var t=this;this.heartbeatInterval=setTimeout(function(){t.heartbeat(),t.heartbeatInterval=null},1e3*this.manager.get("heartbeat interval")),this.log.debug("set heartbeat interval for client",this.id)}},Transport.prototype.clearTimeouts=function(){this.clearCloseTimeout(),this.clearHeartbeatTimeout(),this.clearHeartbeatInterval()},Transport.prototype.heartbeat=function(){return this.open&&(this.log.debug("emitting heartbeat for client",this.id),this.packet({type:"heartbeat"}),this.setHeartbeatTimeout()),this},Transport.prototype.onMessage=function(t){var e,o=this.manager.transports[this.id];if("heartbeat"==t.type)this.log.debug("got heartbeat packet"),o&&o.open?o.onHeartbeatClear():this.store.publish("heartbeat-clear:"+this.id);else{if("disconnect"==t.type&&""==t.endpoint)return this.log.debug("got disconnection packet"),o?o.onForcedDisconnect():this.store.publish("disconnect-force:"+this.id),void 0;t.id&&"data"!=t.ack&&(this.log.debug("acknowledging packet automatically"),e=parser.encodePacket({type:"ack",ackId:t.id,endpoint:t.endpoint||""}),o&&o.open?o.onDispatch(e):(this.manager.onClientDispatch(this.id,e),this.store.publish("dispatch:"+this.id,e))),o?this.manager.onClientMessage(this.id,t):this.store.publish("message:"+this.id,t)}},Transport.prototype.clearHeartbeatInterval=function(){this.heartbeatInterval&&this.manager.enabled("heartbeats")&&(clearTimeout(this.heartbeatInterval),this.heartbeatInterval=null,this.log.debug("cleared heartbeat interval for client",this.id))},Transport.prototype.disconnect=function(t){return this.packet({type:"disconnect"}),this.end(t),this},Transport.prototype.close=function(){this.open&&(this.doClose(),this.onClose())},Transport.prototype.onClose=function(){this.open&&(this.setCloseTimeout(),this.clearHandlers(),this.open=!1,this.manager.onClose(this.id),this.store.publish("close",this.id))},Transport.prototype.end=function(t){if(!this.disconnected){this.log.info("transport end ("+t+")");var e=this.manager.transports[this.id];this.close(),this.clearTimeouts(),this.disconnected=!0,e?this.manager.onClientDisconnect(this.id,t,!0):this.store.publish("disconnect:"+this.id,t)}},Transport.prototype.discard=function(){return this.log.debug("discarding transport"),this.discarded=!0,this.clearTimeouts(),this.clearHandlers(),this},Transport.prototype.error=function(t,e){this.packet({type:"error",reason:t,advice:e}),this.log.warn(t,e?"client should "+e:""),this.end("error")},Transport.prototype.packet=function(t){return this.write(parser.encodePacket(t))},Transport.prototype.writeVolatile=function(t){this.open?this.drained?this.write(t):this.log.debug("ignoring volatile packet, buffer not drained"):this.log.debug("ignoring volatile packet, transport not open")};