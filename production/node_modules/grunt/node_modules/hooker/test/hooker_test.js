var hooker=null;exports.hook={setUp:function(e){this.order=[],this.track=function(){[].push.apply(this.order,arguments)},this.prop=1,this.add=function(e,o){return this.track("add",this.prop,e,o),this.prop+e+o},this.obj={that:this,prop:1,add1:function(e,o){return this.that.track("add1",this.prop,e,o),this.prop+e+o},add2:function(e,o){return this.that.track("add2",this.prop,e,o),this.prop+e+o},add3:function(e,o){return this.that.track("add3",this.prop,e,o),this.prop+e+o}},e()},orig:function(e){e.expect(1);var o=this.add;hooker.hook(this,"add",function(){}),e.strictEqual(hooker.orig(this,"add"),o,"should return a refernce to the original function."),e.done()},once:function(e){e.expect(5);var o=this.add;hooker.hook(this,"add",{once:!0,pre:function(e,o){this.track("before",this.prop,e,o)}}),e.strictEqual(this.add(2,3),6,"should return the original function's result."),e.deepEqual(this.order,["before",1,2,3,"add",1,2,3],"functions should execute in-order."),e.strictEqual(this.add,o,"should automatically unhook when once is specified."),this.order=[],e.strictEqual(this.add(2,3),6,"should return the original function's result."),e.deepEqual(this.order,["add",1,2,3],"only the original function should execute."),e.done()},"pre-hook (simple syntax)":function(e){e.expect(3);var o=hooker.hook(this,"add",function(e,o){this.track("before",this.prop,e,o)});e.deepEqual(o,["add"],"add should have been hooked."),e.strictEqual(this.add(2,3),6,"should return the original function's result."),e.deepEqual(this.order,["before",1,2,3,"add",1,2,3],"functions should execute in-order."),e.done()},"pre-hook":function(e){e.expect(3);var o=hooker.hook(this,"add",{pre:function(e,o){this.track("before",this.prop,e,o)}});e.deepEqual(o,["add"],"add should have been hooked."),e.strictEqual(this.add(2,3),6,"should return the original function's result."),e.deepEqual(this.order,["before",1,2,3,"add",1,2,3],"functions should execute in-order."),e.done()},"post-hook":function(e){e.expect(3);var o=hooker.hook(this,"add",{post:function(e,o,t){this.track("after",this.prop,o,t,e)}});e.deepEqual(o,["add"],"add should have been hooked."),e.strictEqual(this.add(2,3),6,"should return the original function's result."),e.deepEqual(this.order,["add",1,2,3,"after",1,2,3,6],"functions should execute in-order."),e.done()},"pre- & post-hook":function(e){e.expect(2),hooker.hook(this,"add",{pre:function(e,o){this.track("before",this.prop,e,o)},post:function(e,o,t){this.track("after",this.prop,o,t,e)}}),e.strictEqual(this.add(2,3),6,"should return the original function's result."),e.deepEqual(this.order,["before",1,2,3,"add",1,2,3,"after",1,2,3,6],"functions should execute in-order."),e.done()},"pre-hook, return value override":function(e){e.expect(2),hooker.hook(this,"add",{pre:function(e,o){return this.track("before",this.prop,e,o),hooker.override("b"+this.prop+e+o)}}),e.strictEqual(this.add(2,3),"b123","should return the overridden result."),e.deepEqual(this.order,["before",1,2,3,"add",1,2,3],"functions should execute in-order."),e.done()},"post-hook, return value override":function(e){e.expect(2),hooker.hook(this,"add",{post:function(e,o,t){return this.track("after",this.prop,o,t,e),hooker.override("a"+this.prop+o+t+e)}}),e.strictEqual(this.add(2,3),"a1236","should return the post-hook overridden result."),e.deepEqual(this.order,["add",1,2,3,"after",1,2,3,6],"functions should execute in-order."),e.done()},"pre- & post-hook, return value override":function(e){e.expect(2),hooker.hook(this,"add",{pre:function(e,o){return this.track("before",this.prop,e,o),hooker.override("b"+this.prop+e+o)},post:function(e,o,t){return this.track("after",this.prop,o,t,e),hooker.override("a"+this.prop+o+t+e)}}),e.strictEqual(this.add(2,3),"a1236","should return the overridden result, and post-hook result should take precedence over pre-hook result."),e.deepEqual(this.order,["before",1,2,3,"add",1,2,3,"after",1,2,3,6],"functions should execute in-order."),e.done()},"pre-hook, filtering arguments":function(e){e.expect(2),hooker.hook(this,"add",{pre:function(e,o){return this.track("before",this.prop,e,o),hooker.filter({prop:"x",track:this.track,order:this.order},["y","z"])}}),e.strictEqual(this.add(2,3),"xyz","should return the original function's result, given filtered context and arguments."),e.deepEqual(this.order,["before",1,2,3,"add","x","y","z"],"functions should execute in-order."),e.done()},"pre- & post-hook, filtering arguments":function(e){e.expect(2),hooker.hook(this,"add",{pre:function(e,o){return this.track("before",this.prop,e,o),hooker.filter({prop:"x",track:this.track,order:this.order},["y","z"])},post:function(e,o,t){this.track("after",this.prop,o,t,e)}}),e.strictEqual(this.add(2,3),"xyz","should return the original function's result, given filtered context and arguments."),e.deepEqual(this.order,["before",1,2,3,"add","x","y","z","after",1,2,3,"xyz"],"functions should execute in-order."),e.done()},"pre- & post-hook, filtering arguments, return value override":function(e){e.expect(2),hooker.hook(this,"add",{pre:function(e,o){return this.track("before",this.prop,e,o),hooker.filter({prop:"x",track:this.track,order:this.order},["y","z"])},post:function(e,o,t){return this.track("after",this.prop,o,t,e),hooker.override("a"+this.prop+o+t+e)}}),e.strictEqual(this.add(2,3),"a123xyz","should return the post-hook overridden result."),e.deepEqual(this.order,["before",1,2,3,"add","x","y","z","after",1,2,3,"xyz"],"functions should execute in-order."),e.done()},"pre-hook, preempt original function":function(e){e.expect(2),hooker.hook(this,"add",{pre:function(e,o){return this.track("before",this.prop,e,o),hooker.preempt()}}),e.strictEqual(this.add(2,3),void 0,"should return the value passed to preempt."),e.deepEqual(this.order,["before",1,2,3],"functions should execute in-order."),e.done()},"pre-hook, preempt original function with value":function(e){e.expect(2),hooker.hook(this,"add",{pre:function(e,o){return this.track("before",this.prop,e,o),hooker.preempt(9e3)}}),e.strictEqual(this.add(2,3),9e3,"should return the value passed to preempt."),e.deepEqual(this.order,["before",1,2,3],"functions should execute in-order."),e.done()},"pre- & post-hook, preempt original function with value":function(e){e.expect(2),hooker.hook(this,"add",{pre:function(e,o){return this.track("before",this.prop,e,o),hooker.preempt(9e3)},post:function(e,o,t){this.track("after",this.prop,o,t,e)}}),e.strictEqual(this.add(2,3),9e3,"should return the value passed to preempt."),e.deepEqual(this.order,["before",1,2,3,"after",1,2,3,9e3],"functions should execute in-order."),e.done()},"pre- & post-hook, preempt original function with value, return value override":function(e){e.expect(2),hooker.hook(this,"add",{pre:function(e,o){return this.track("before",this.prop,e,o),hooker.preempt(9e3)},post:function(e,o,t){return this.track("after",this.prop,o,t,e),hooker.override("a"+this.prop+o+t+e)}}),e.strictEqual(this.add(2,3),"a1239000","should return the overridden result, and post-hook result should take precedence over preempt value."),e.deepEqual(this.order,["before",1,2,3,"after",1,2,3,9e3],"functions should execute in-order."),e.done()},"pre- & post-hook, some properties":function(e){e.expect(7);var o=hooker.hook(this.obj,["add1","add2"],{pre:function(e,o){this.that.track("before",this.prop,e,o)},post:function(e,o,t){this.that.track("after",this.prop,o,t,e)}});e.deepEqual(o.sort(),["add1","add2"],"both functions should have been hooked."),e.strictEqual(this.obj.add1(2,3),6,"should return the original function's result."),e.deepEqual(this.order,["before",1,2,3,"add1",1,2,3,"after",1,2,3,6],"functions should execute in-order."),this.order=[],e.strictEqual(this.obj.add2(2,3),6,"should return the original function's result."),e.deepEqual(this.order,["before",1,2,3,"add2",1,2,3,"after",1,2,3,6],"functions should execute in-order."),this.order=[],e.strictEqual(this.obj.add3(2,3),6,"should return the original function's result."),e.deepEqual(this.order,["add3",1,2,3],"functions should execute in-order."),e.done()},"pre- & post-hook, all properties":function(e){e.expect(7);var o=hooker.hook(this.obj,{pre:function(e,o){this.that.track("before",this.prop,e,o)},post:function(e,o,t){this.that.track("after",this.prop,o,t,e)}});e.deepEqual(o.sort(),["add1","add2","add3"],"all functions should have been hooked."),e.strictEqual(this.obj.add1(2,3),6,"should return the original function's result."),e.deepEqual(this.order,["before",1,2,3,"add1",1,2,3,"after",1,2,3,6],"functions should execute in-order."),this.order=[],e.strictEqual(this.obj.add2(2,3),6,"should return the original function's result."),e.deepEqual(this.order,["before",1,2,3,"add2",1,2,3,"after",1,2,3,6],"functions should execute in-order."),this.order=[],e.strictEqual(this.obj.add3(2,3),6,"should return the original function's result."),e.deepEqual(this.order,["before",1,2,3,"add3",1,2,3,"after",1,2,3,6],"functions should execute in-order."),e.done()},"pre- & post-hook, all properties, passName":function(e){e.expect(6),hooker.hook(this.obj,{passName:!0,pre:function(e,o,t){this.that.track("before",this.prop,e,o,t)},post:function(e,o,t,r){this.that.track("after",this.prop,o,t,r,e)}}),e.strictEqual(this.obj.add1(2,3),6,"should return the original function's result."),e.deepEqual(this.order,["before",1,"add1",2,3,"add1",1,2,3,"after",1,"add1",2,3,6],"functions should execute in-order."),this.order=[],e.strictEqual(this.obj.add2(2,3),6,"should return the original function's result."),e.deepEqual(this.order,["before",1,"add2",2,3,"add2",1,2,3,"after",1,"add2",2,3,6],"functions should execute in-order."),this.order=[],e.strictEqual(this.obj.add3(2,3),6,"should return the original function's result."),e.deepEqual(this.order,["before",1,"add3",2,3,"add3",1,2,3,"after",1,"add3",2,3,6],"functions should execute in-order."),e.done()},"unhook one property":function(e){var o,t;e.expect(5),o=this.add,hooker.hook(this,"add",function(){}),t=hooker.unhook(this,"add"),e.deepEqual(t,["add"],"one function should have been unhooked."),e.strictEqual(this.add,o,"should have unhooked, restoring the original function"),t=hooker.unhook(this,"add"),e.deepEqual(t,[],"nothing should have been unhooked."),e.strictEqual(this.add,o,"shouldn't explode if already unhooked"),e.strictEqual(this.add.orig,void 0,"original function shouldn't have an orig property"),e.done()},"unhook some properties":function(e){var o,t,r;e.expect(6),o=this.obj.add1,t=this.obj.add2,hooker.hook(this.obj,["add1","add2"],function(){}),e.strictEqual(hooker.orig(this.obj,"add1"),o,"should return a refernce to the original function"),e.strictEqual(hooker.orig(this.obj,"add2"),t,"should return a refernce to the original function"),e.strictEqual(hooker.orig(this.obj,"add3"),void 0,"should not have been hooked, so should not have an original function"),r=hooker.unhook(this.obj,["add1","add2"]),e.deepEqual(r.sort(),["add1","add2"],"both functions should have been unhooked."),e.strictEqual(this.obj.add1,o,"should have unhooked, restoring the original function"),e.strictEqual(this.obj.add2,t,"should have unhooked, restoring the original function"),e.done()},"unhook all properties":function(e){var o,t,r,i;e.expect(7),o=this.obj.add1,t=this.obj.add2,r=this.obj.add3,hooker.hook(this.obj,function(){}),e.strictEqual(hooker.orig(this.obj,"add1"),o,"should return a refernce to the original function"),e.strictEqual(hooker.orig(this.obj,"add2"),t,"should return a refernce to the original function"),e.strictEqual(hooker.orig(this.obj,"add3"),r,"should return a refernce to the original function"),i=hooker.unhook(this.obj),e.deepEqual(i.sort(),["add1","add2","add3"],"all functions should have been unhooked."),e.strictEqual(this.obj.add1,o,"should have unhooked, restoring the original function"),e.strictEqual(this.obj.add2,t,"should have unhooked, restoring the original function"),e.strictEqual(this.obj.add3,r,"should have unhooked, restoring the original function"),e.done()}};