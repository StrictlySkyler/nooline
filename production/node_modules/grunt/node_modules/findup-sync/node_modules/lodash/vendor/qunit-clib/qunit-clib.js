/*!
 * QUnit CLI Boilerplate v1.2.0
 * Copyright 2011-2012 John-David Dalton <http://allyoucanleet.com/>
 * Based on a gist by JÃ¶rn Zaefferer <https://gist.github.com/722381>
 * Available under MIT license <http://mths.be/mit>
 */

!function(window){"use strict";!function(){function schedule(fn,delay,args,repeated){var task=ids[++counter]=new JavaAdapter(java.util.TimerTask,{run:function(){fn.apply(window,args)}});return"function"!=typeof fn&&(fn=function(code){return code+="",function(){eval(code)}}(fn)),repeated?timer.schedule(task,delay,delay):timer.schedule(task,delay),counter}function clearTimer(e){ids[e]&&(ids[e].cancel(),timer.purge(),delete ids[e])}function setInterval(e,t){return schedule(e,t,slice.call(arguments,2),!0)}function setTimeout(e,t){return schedule(e,t,slice.call(arguments,2))}try{var counter=0,ids={},slice=Array.prototype.slice,timer=new java.util.Timer;window.clearInterval=window.clearTimeout=clearTimer,window.setInterval=setInterval,window.setTimeout=setTimeout}catch(e){}}(),function(){var e="----------------------------------------";window.QUnit&&(QUnit=QUnit.QUnit||QUnit),QUnit.done(function(){var t;return function(n){if(!t){t=!0,console.log(e),console.log("    PASS: "+n.passed+"  FAIL: "+n.failed+"  TOTAL: "+n.total),console.log("    Finished in "+n.runtime+" milliseconds."),console.log(e);try{quit()}catch(o){}try{var i=window.process||window.phantom;n.failed?(console.error("Error: "+n.failed+" of "+n.total+" tests failed."),i.exit(1)):i.exit(0)}catch(o){}}}}()),QUnit.log(function(e){var t=e.expected,n=e.result,o=void 0!==t?"EQ":"OK",i=[n?"PASS":"FAIL",o,e.message||"ok"];n||"EQ"!=o||i.push("Expected: "+t+", Actual: "+e.actual),QUnit.config.testStats.assertions.push(i.join(" | "))}),QUnit.moduleStart(function(t){console.log(e),console.log(t.name),console.log(e)}),QUnit.jsDump.parsers.object=function(){var e=QUnit.jsDump.parsers.object;return function(t){return"object"==typeof t.rhinoException?t.name+' { message: "'+t.message+'", fileName: "'+t.fileName+'", lineNumber: '+t.lineNumber+" }":e(t)}}(),QUnit.testDone(function(e){var t=QUnit.config.testStats.assertions,n=e.name;e.failed>0?(console.log(" FAIL - "+n),t.forEach(function(e){console.log("    "+e)})):console.log(" PASS - "+n),t.length=0}),QUnit.config.testStats={assertions:[]}}(),"asyncTest deepEqual equal equals expect notDeepEqual notEqual notStrictEqual ok raises same start stop strictEqual test throws".replace(/\S+/g,function(e){window[e]=QUnit[e]}),!window.console&&window.print&&(window.console={log:window.print}),QUnit.init()}("object"==typeof global&&global||this);