$(document).ready(function(){module("Collections"),test("collections: each",function(){var e,n;_.each([1,2,3],function(e,n){equals(e,n+1,"each iterators provide value and iteration count")}),e=[],_.each([1,2,3],function(n){e.push(n*this.multiplier)},{multiplier:5}),equals(e.join(", "),"5, 10, 15","context object property accessed"),e=[],_.forEach([1,2,3],function(n){e.push(n)}),equals(e.join(", "),"1, 2, 3",'aliased as "forEach"'),e=[],n={one:1,two:2,three:3},n.constructor.prototype.four=4,_.each(n,function(n,t){e.push(t)}),equals(e.join(", "),"one, two, three","iterating over objects works, and ignores the object prototype."),delete n.constructor.prototype.four,answer=null,_.each([1,2,3],function(e,n,t){_.include(t,e)&&(answer=!0)}),ok(answer,"can reference the original collection from inside the iterator"),e=0,_.each(null,function(){++e}),equals(e,0,"handles a null properly")}),test("collections: map",function(){var e,n,t,o,a=_.map([1,2,3],function(e){return 2*e});equals(a.join(", "),"2, 4, 6","doubled numbers"),a=_.collect([1,2,3],function(e){return 2*e}),equals(a.join(", "),"2, 4, 6",'aliased as "collect"'),e=_.map([1,2,3],function(e){return e*this.multiplier},{multiplier:3}),equals(e.join(", "),"3, 6, 9","tripled numbers with context"),a=_([1,2,3]).map(function(e){return 2*e}),equals(a.join(", "),"2, 4, 6","OO-style doubled numbers"),n=_.map($("div.underscore-test").children(),function(e){return e.id}),ok(_.include(n,"qunit-header"),"can use collection methods on NodeLists"),n=_.map(document.images,function(e){return e.id}),ok("chart_image"==n[0],"can use collection methods on HTMLCollections"),t=_.map(null,function(){}),ok(_.isArray(t)&&0===t.length,"handles a null properly"),o=_.map(Array(2),function(e){return e}).length,equals(o,2,"can preserve a sparse array's length")}),test("collections: reduce",function(){var e,n,t,o=_.reduce([1,2,3],function(e,n){return e+n},0);equals(o,6,"can sum up an array"),e={multiplier:3},o=_.reduce([1,2,3],function(e,n){return e+n*this.multiplier},0,e),equals(o,18,"can reduce with a context object"),o=_.inject([1,2,3],function(e,n){return e+n},0),equals(o,6,'aliased as "inject"'),o=_([1,2,3]).reduce(function(e,n){return e+n},0),equals(o,6,"OO-style reduce"),o=_.reduce([1,2,3],function(e,n){return e+n}),equals(o,6,"default initial value");try{_.reduce(null,function(){})}catch(a){n=a}ok(n instanceof TypeError,"handles a null (without inital value) properly"),ok(138===_.reduce(null,function(){},138),"handles a null (with initial value) properly"),equals(_.reduce([],function(){},void 0),void 0,"undefined can be passed as a special case"),raises(function(){_.reduce([],function(){})},TypeError,"throws an error for empty arrays with no initial value"),t=[],t[0]=20,t[2]=-5,equals(_.reduce(t,function(e,n){return e-n}),25,"initially-sparse arrays with no memo")}),test("collections: reduceRight",function(){var e,n,t=_.reduceRight(["foo","bar","baz"],function(e,n){return e+n},"");equals(t,"bazbarfoo","can perform right folds"),t=_.foldr(["foo","bar","baz"],function(e,n){return e+n},""),equals(t,"bazbarfoo",'aliased as "foldr"'),t=_.foldr(["foo","bar","baz"],function(e,n){return e+n}),equals(t,"bazbarfoo","default initial value");try{_.reduceRight(null,function(){})}catch(o){e=o}ok(e instanceof TypeError,"handles a null (without inital value) properly"),ok(138===_.reduceRight(null,function(){},138),"handles a null (with initial value) properly"),equals(_.reduceRight([],function(){},void 0),void 0,"undefined can be passed as a special case"),raises(function(){_.reduceRight([],function(){})},TypeError,"throws an error for empty arrays with no initial value"),n=[],n[0]=20,n[2]=-5,equals(_.reduceRight(n,function(e,n){return e-n}),-25,"initially-sparse arrays with no memo")}),test("collections: detect",function(){var e=_.detect([1,2,3],function(e){return 4==2*e});equals(e,2,'found the first "2" and broke the loop')}),test("collections: select",function(){var e=_.select([1,2,3,4,5,6],function(e){return 0==e%2});equals(e.join(", "),"2, 4, 6","selected each even number"),e=_.filter([1,2,3,4,5,6],function(e){return 0==e%2}),equals(e.join(", "),"2, 4, 6",'aliased as "filter"')}),test("collections: reject",function(){var e=_.reject([1,2,3,4,5,6],function(e){return 0==e%2});equals(e.join(", "),"1, 3, 5","rejected each even number")}),test("collections: all",function(){ok(_.all([],_.identity),"the empty set"),ok(_.all([!0,!0,!0],_.identity),"all true values"),ok(!_.all([!0,!1,!0],_.identity),"one false value"),ok(_.all([0,10,28],function(e){return 0==e%2}),"even numbers"),ok(!_.all([0,11,28],function(e){return 0==e%2}),"an odd number"),ok(_.every([!0,!0,!0],_.identity),'aliased as "every"')}),test("collections: any",function(){var e=Array.prototype.some;Array.prototype.some=null,ok(!_.any([]),"the empty set"),ok(!_.any([!1,!1,!1]),"all false values"),ok(_.any([!1,!1,!0]),"one true value"),ok(_.any([null,0,"yes",!1]),"a string"),ok(!_.any([null,0,"",!1]),"falsy values"),ok(!_.any([1,11,29],function(e){return 0==e%2}),"all odd numbers"),ok(_.any([1,10,29],function(e){return 0==e%2}),"an even number"),ok(_.some([!1,!1,!0]),'aliased as "some"'),Array.prototype.some=e}),test("collections: include",function(){ok(_.include([1,2,3],2),"two is in the array"),ok(!_.include([1,3,9],2),"two is not in the array"),ok(_.contains({moe:1,larry:3,curly:9},3)===!0,"_.include on objects checks their values"),ok(_([1,2,3]).include(2),"OO-style include")}),test("collections: invoke",function(){var e=[[5,1,7],[3,2,1]],n=_.invoke(e,"sort");equals(n[0].join(", "),"1, 5, 7","first array sorted"),equals(n[1].join(", "),"1, 2, 3","second array sorted")}),test("collections: invoke w/ function reference",function(){var e=[[5,1,7],[3,2,1]],n=_.invoke(e,Array.prototype.sort);equals(n[0].join(", "),"1, 5, 7","first array sorted"),equals(n[1].join(", "),"1, 2, 3","second array sorted")}),test("collections: invoke when strings have a call method",function(){var e,n,t;String.prototype.call=function(){return 42},e=[[5,1,7],[3,2,1]],n="foo",equals(n.call(),42,"call function exists"),t=_.invoke(e,"sort"),equals(t[0].join(", "),"1, 5, 7","first array sorted"),equals(t[1].join(", "),"1, 2, 3","second array sorted"),delete String.prototype.call,equals(n.call,void 0,"call function removed")}),test("collections: pluck",function(){var e=[{name:"moe",age:30},{name:"curly",age:50}];equals(_.pluck(e,"name").join(", "),"moe, curly","pulls names out of objects")}),test("collections: max",function(){equals(3,_.max([1,2,3]),"can perform a regular Math.max");var e=_.max([1,2,3],function(e){return-e});equals(e,1,"can perform a computation-based max"),equals(-1/0,_.max({}),"Maximum value of an empty object"),equals(-1/0,_.max([]),"Maximum value of an empty array")}),test("collections: min",function(){equals(1,_.min([1,2,3]),"can perform a regular Math.min");var e=_.min([1,2,3],function(e){return-e});equals(e,3,"can perform a computation-based min"),equals(1/0,_.min({}),"Minimum value of an empty object"),equals(1/0,_.min([]),"Minimum value of an empty array")}),test("collections: sortBy",function(){var e=[{name:"curly",age:50},{name:"moe",age:30}];e=_.sortBy(e,function(e){return e.age}),equals(_.pluck(e,"name").join(", "),"moe, curly","stooges sorted by age")}),test("collections: groupBy",function(){var e,n,t=_.groupBy([1,2,3,4,5,6],function(e){return e%2});ok("0"in t&&"1"in t,"created a group for each value"),equals(t[0].join(", "),"2, 4, 6","put each even number in the right group"),e=["one","two","three","four","five","six","seven","eight","nine","ten"],n=_.groupBy(e,"length"),equals(n["3"].join(" "),"one two six ten"),equals(n["4"].join(" "),"four five nine"),equals(n["5"].join(" "),"three seven eight")}),test("collections: sortedIndex",function(){var e=[10,20,30,40,50],n=35,t=_.sortedIndex(e,n);equals(t,3,"35 should be inserted at index 3")}),test("collections: shuffle",function(){var e=_.range(10),n=_.shuffle(e).sort();notStrictEqual(e,n,"original object is unmodified"),equals(n.join(","),e.join(","),"contains the same members before and after shuffle")}),test("collections: toArray",function(){var e,n;ok(!_.isArray(arguments),"arguments object is not an array"),ok(_.isArray(_.toArray(arguments)),"arguments object converted into array"),e=[1,2,3],ok(_.toArray(e)!==e,"array is cloned"),equals(_.toArray(e).join(", "),"1, 2, 3","cloned array contains same elements"),n=_.toArray({one:1,two:2,three:3}),equals(n.join(", "),"1, 2, 3","object flattened into array")}),test("collections: size",function(){equals(_.size({one:1,two:2,three:3}),3,"can compute the size of an object")})});