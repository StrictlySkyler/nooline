$(document).ready(function(){var e,n;module("Objects"),test("objects: keys",function(){var e,n=/object/;equals(_.keys({one:1,two:2}).join(", "),"one, two","can extract the keys from an object"),e=[],e[1]=0,equals(_.keys(e).join(", "),"1","is not fooled by sparse arrays; see issue #95"),raises(function(){_.keys(null)},n,"throws an error for `null` values"),raises(function(){_.keys(void 0)},n,"throws an error for `undefined` values"),raises(function(){_.keys(1)},n,"throws an error for number primitives"),raises(function(){_.keys("a")},n,"throws an error for string primitives"),raises(function(){_.keys(!0)},n,"throws an error for boolean primitives")}),test("objects: values",function(){equals(_.values({one:1,two:2}).join(", "),"1, 2","can extract the values from an object")}),test("objects: functions",function(){var e,n={a:"dash",b:_.map,c:/yo/,d:_.reduce};ok(_.isEqual(["b","d"],_.functions(n)),"can grab the function names of any passed-in object"),e=function(){},e.prototype.run=function(){},equals(_.functions(new e).join(""),"run","also looks up functions on the prototype")}),test("objects: extend",function(){var e;equals(_.extend({},{a:"b"}).a,"b","can extend an object with the attributes of another"),equals(_.extend({a:"x"},{a:"b"}).a,"b","properties in source override destination"),equals(_.extend({x:"x"},{a:"b"}).x,"x","properties not in source dont get overriden"),e=_.extend({x:"x"},{a:"a"},{b:"b"}),ok(_.isEqual(e,{x:"x",a:"a",b:"b"}),"can extend from multiple source objects"),e=_.extend({x:"x"},{a:"a",x:2},{a:"b"}),ok(_.isEqual(e,{x:2,a:"b"}),"extending from multiple source objects last property trumps"),e=_.extend({},{a:void 0,b:null}),equals(_.keys(e).join(""),"ab","extend does not copy undefined values")}),test("objects: defaults",function(){var e={zero:0,one:1,empty:"",nan:0/0,string:"string"};_.defaults(e,{zero:1,one:10,twenty:20}),equals(e.zero,0,"value exists"),equals(e.one,1,"value exists"),equals(e.twenty,20,"default applied"),_.defaults(e,{empty:"full"},{nan:"nan"},{word:"word"},{word:"dog"}),equals(e.empty,"","value exists"),ok(_.isNaN(e.nan),"NaN isn't overridden"),equals(e.word,"word","new value is added, first one wins")}),test("objects: clone",function(){var e={name:"moe",lucky:[13,27,34]},n=_.clone(e);equals(n.name,"moe","the clone as the attributes of the original"),n.name="curly",ok("curly"==n.name&&"moe"==e.name,"clones can change shallow attributes without affecting the original"),n.lucky.push(101),equals(_.last(e.lucky),101,"changes to deep attributes are shared with the original"),equals(_.clone(void 0),void 0,"non objects should not be changed by clone"),equals(_.clone(1),1,"non objects should not be changed by clone"),equals(_.clone(null),null,"non objects should not be changed by clone")}),test("objects: isEqual",function(){function e(){this.value=1}function n(){this.value=1}var t,i,a,o,s,r,u,l,c;e.prototype.value=1,n.prototype.value=2,ok(_.isEqual(null,null),"`null` is equal to `null`"),ok(_.isEqual(),"`undefined` is equal to `undefined`"),ok(!_.isEqual(0,-0),"`0` is not equal to `-0`"),ok(!_.isEqual(-0,0),"Commutative equality is implemented for `0` and `-0`"),ok(!_.isEqual(null,void 0),"`null` is not equal to `undefined`"),ok(!_.isEqual(void 0,null),"Commutative equality is implemented for `null` and `undefined`"),ok(_.isEqual("Curly","Curly"),"Identical string primitives are equal"),ok(_.isEqual(new String("Curly"),new String("Curly")),"String objects with identical primitive values are equal"),ok(_.isEqual(new String("Curly"),"Curly"),"String primitives and their corresponding object wrappers are equal"),ok(_.isEqual("Curly",new String("Curly")),"Commutative equality is implemented for string objects and primitives"),ok(!_.isEqual("Curly","Larry"),"String primitives with different values are not equal"),ok(!_.isEqual(new String("Curly"),new String("Larry")),"String objects with different primitive values are not equal"),ok(!_.isEqual(new String("Curly"),{toString:function(){return"Curly"}}),"String objects and objects with a custom `toString` method are not equal"),ok(_.isEqual(75,75),"Identical number primitives are equal"),ok(_.isEqual(new Number(75),new Number(75)),"Number objects with identical primitive values are equal"),ok(_.isEqual(75,new Number(75)),"Number primitives and their corresponding object wrappers are equal"),ok(_.isEqual(new Number(75),75),"Commutative equality is implemented for number objects and primitives"),ok(!_.isEqual(new Number(0),-0),"`new Number(0)` and `-0` are not equal"),ok(!_.isEqual(0,new Number(-0)),"Commutative equality is implemented for `new Number(0)` and `-0`"),ok(!_.isEqual(new Number(75),new Number(63)),"Number objects with different primitive values are not equal"),ok(!_.isEqual(new Number(63),{valueOf:function(){return 63}}),"Number objects and objects with a `valueOf` method are not equal"),ok(_.isEqual(0/0,0/0),"`NaN` is equal to `NaN`"),ok(!_.isEqual(61,0/0),"A number primitive is not equal to `NaN`"),ok(!_.isEqual(new Number(79),0/0),"A number object is not equal to `NaN`"),ok(!_.isEqual(1/0,0/0),"`Infinity` is not equal to `NaN`"),ok(_.isEqual(!0,!0),"Identical boolean primitives are equal"),ok(_.isEqual(new Boolean,new Boolean),"Boolean objects with identical primitive values are equal"),ok(_.isEqual(!0,new Boolean(!0)),"Boolean primitives and their corresponding object wrappers are equal"),ok(_.isEqual(new Boolean(!0),!0),"Commutative equality is implemented for booleans"),ok(!_.isEqual(new Boolean(!0),new Boolean),"Boolean objects with different primitive values are not equal"),ok(!_.isEqual(!0,new Boolean(!1)),"Boolean objects are not equal to the boolean primitive `true`"),ok(!_.isEqual("75",75),"String and number primitives with like values are not equal"),ok(!_.isEqual(new Number(63),new String(63)),"String and number objects with like values are not equal"),ok(!_.isEqual(75,"75"),"Commutative equality is implemented for like string and number values"),ok(!_.isEqual(0,""),"Number and string primitives with like values are not equal"),ok(!_.isEqual(1,!0),"Number and boolean primitives with like values are not equal"),ok(!_.isEqual(new Boolean(!1),new Number(0)),"Boolean and number objects with like values are not equal"),ok(!_.isEqual(!1,new String("")),"Boolean primitives and string objects with like values are not equal"),ok(!_.isEqual(12564504e5,new Date(2009,9,25)),"Dates and their corresponding numeric primitive values are not equal"),ok(_.isEqual(new Date(2009,9,25),new Date(2009,9,25)),"Date objects referencing identical times are equal"),ok(!_.isEqual(new Date(2009,9,25),new Date(2009,11,13)),"Date objects referencing different times are not equal"),ok(!_.isEqual(new Date(2009,11,13),{getTime:function(){return 12606876e5}}),"Date objects and objects with a `getTime` method are not equal"),ok(!_.isEqual(new Date("Curly"),new Date("Curly")),"Invalid dates are not equal"),ok(!_.isEqual(e,n),"Different functions with identical bodies and source code representations are not equal"),ok(_.isEqual(/(?:)/gim,/(?:)/gim),"RegExps with equivalent patterns and flags are equal"),ok(!_.isEqual(/(?:)/g,/(?:)/gi),"RegExps with equivalent patterns and different flags are not equal"),ok(!_.isEqual(/Moe/gim,/Curly/gim),"RegExps with different patterns and equivalent flags are not equal"),ok(!_.isEqual(/(?:)/gi,/(?:)/g),"Commutative equality is implemented for RegExps"),ok(!_.isEqual(/Curly/g,{source:"Larry",global:!0,ignoreCase:!1,multiline:!1}),"RegExps and RegExp-like objects are not equal"),ok(_.isEqual({},{}),"Empty object literals are equal"),ok(_.isEqual([],[]),"Empty array literals are equal"),ok(_.isEqual([{}],[{}]),"Empty nested arrays and objects are equal"),ok(!_.isEqual({length:0},[]),"Array-like objects and arrays are not equal."),ok(!_.isEqual([],{length:0}),"Commutative equality is implemented for array-like objects"),ok(!_.isEqual({},[]),"Object literals and array literals are not equal"),ok(!_.isEqual([],{}),"Commutative equality is implemented for objects and arrays"),ok(_.isEqual([1,"Larry",!0],[1,"Larry",!0]),"Arrays containing identical primitives are equal"),ok(_.isEqual([/Moe/g,new Date(2009,9,25)],[/Moe/g,new Date(2009,9,25)]),"Arrays containing equivalent elements are equal"),t=[new Number(47),!1,"Larry",/Moe/,new Date(2009,11,13),["running","biking",new String("programming")],{a:47}],i=[new Number(47),!1,"Larry",/Moe/,new Date(2009,11,13),["running","biking",new String("programming")],{a:47}],ok(_.isEqual(t,i),"Arrays containing nested arrays and objects are recursively compared"),t.forEach=t.map=t.filter=t.every=t.indexOf=t.lastIndexOf=t.some=t.reduce=t.reduceRight=null,i.join=i.pop=i.reverse=i.shift=i.slice=i.splice=i.concat=i.sort=i.unshift=null,ok(_.isEqual(t,i),"Arrays containing equivalent elements and different non-numeric properties are equal"),t.push("White Rocks"),ok(!_.isEqual(t,i),"Arrays of different lengths are not equal"),t.push("East Boulder"),i.push("Gunbarrel Ranch","Teller Farm"),ok(!_.isEqual(t,i),"Arrays of identical lengths containing different elements are not equal"),ok(_.isEqual(Array(3),Array(3)),"Sparse arrays of identical lengths are equal"),ok(!_.isEqual(Array(3),Array(6)),"Sparse arrays of different lengths are not equal when both are empty"),0 in[void 0]&&(ok(!_.isEqual(Array(3),[void 0,void 0,void 0]),"Sparse and dense arrays are not equal"),ok(!_.isEqual([void 0,void 0,void 0],Array(3)),"Commutative equality is implemented for sparse and dense arrays")),ok(_.isEqual({a:"Curly",b:1,c:!0},{a:"Curly",b:1,c:!0}),"Objects containing identical primitives are equal"),ok(_.isEqual({a:/Curly/g,b:new Date(2009,11,13)},{a:/Curly/g,b:new Date(2009,11,13)}),"Objects containing equivalent members are equal"),ok(!_.isEqual({a:63,b:75},{a:61,b:55}),"Objects of identical sizes with different values are not equal"),ok(!_.isEqual({a:63,b:75},{a:61,c:55}),"Objects of identical sizes with different property names are not equal"),ok(!_.isEqual({a:1,b:2},{a:1}),"Objects of different sizes are not equal"),ok(!_.isEqual({a:1},{a:1,b:2}),"Commutative equality is implemented for objects"),ok(!_.isEqual({x:1,y:void 0},{x:1,z:2}),"Objects with identical keys and different values are not equivalent"),t={name:new String("Moe Howard"),age:new Number(77),stooge:!0,hobbies:["acting"],film:{name:"Sing a Song of Six Pants",release:new Date(1947,9,30),stars:[new String("Larry Fine"),"Shemp Howard"],minutes:new Number(16),seconds:54}},i={name:new String("Moe Howard"),age:new Number(77),stooge:!0,hobbies:["acting"],film:{name:"Sing a Song of Six Pants",release:new Date(1947,9,30),stars:[new String("Larry Fine"),"Shemp Howard"],minutes:new Number(16),seconds:54}},ok(_.isEqual(t,i),"Objects with nested equivalent members are recursively compared"),ok(_.isEqual(new e,new e),"Object instances are equal"),ok(!_.isEqual(new e,new n),"Objects with different constructors and identical own properties are not equal"),ok(!_.isEqual({value:1},new e),"Object instances and objects sharing equivalent properties are not equal"),ok(!_.isEqual({value:2},new n),"The prototype chain of objects should not be examined"),(t=[]).push(t),(i=[]).push(i),ok(_.isEqual(t,i),"Arrays containing circular references are equal"),t.push(new String("Larry")),i.push(new String("Larry")),ok(_.isEqual(t,i),"Arrays containing circular references and equivalent properties are equal"),t.push("Shemp"),i.push("Curly"),ok(!_.isEqual(t,i),"Arrays containing circular references and different properties are not equal"),t={abc:null},i={abc:null},t.abc=t,i.abc=i,ok(_.isEqual(t,i),"Objects containing circular references are equal"),t.def=75,i.def=75,ok(_.isEqual(t,i),"Objects containing circular references and equivalent properties are equal"),t.def=new Number(75),i.def=new Number(63),ok(!_.isEqual(t,i),"Objects containing circular references and different properties are not equal"),t=[{abc:null}],i=[{abc:null}],(t[0].abc=t).push(t),(i[0].abc=i).push(i),ok(_.isEqual(t,i),"Cyclic structures are equal"),t[0].def="Larry",i[0].def="Larry",ok(_.isEqual(t,i),"Cyclic structures containing equivalent properties are equal"),t[0].def=new String("Larry"),i[0].def=new String("Curly"),ok(!_.isEqual(t,i),"Cyclic structures containing different properties are not equal"),t={foo:{b:{foo:{c:{foo:null}}}}},i={foo:{b:{foo:{c:{foo:null}}}}},t.foo.b.foo.c.foo=t,i.foo.b.foo.c.foo=i,ok(_.isEqual(t,i),"Cyclic structures with nested and identically-named properties are equal"),ok(!_.isEqual(_({x:1,y:void 0}).chain(),_({x:1,z:2}).chain()),"Chained objects containing different values are not equal"),equals(_({x:1,y:2}).chain().isEqual(_({x:1,y:2}).chain()).value(),!0,"`isEqual` can be chained"),a={isEqual:function(e){return e.isEqual==this.isEqual},unique:{}},o={isEqual:a.isEqual,unique:{}},ok(_.isEqual(a,o),"Both objects implement identical `isEqual` methods"),ok(_.isEqual(o,a),"Commutative equality is implemented for objects with custom `isEqual` methods"),ok(!_.isEqual(a,{}),"Objects that do not implement equivalent `isEqual` methods are not equal"),ok(!_.isEqual({},a),"Commutative equality is implemented for objects with different `isEqual` methods"),LocalizedString=function(){function e(e){this.id=e,this.string=10===this.id?"Bonjour":""}return e.prototype.isEqual=function(n){return _.isString(n)?this.string==n:n instanceof e?this.id==n.id:!1},e}(),s=new LocalizedString(10),r=new LocalizedString(10),u=new LocalizedString(11),ok(_.isEqual(s,r),"comparing same typed instances with same ids"),ok(!_.isEqual(s,u),"comparing same typed instances with different ids"),ok(_.isEqual(s,"Bonjour"),"comparing different typed instances with same values"),ok(_.isEqual("Bonjour",s),"comparing different typed instances with same values"),ok(!_.isEqual("Bonjour",u),"comparing two localized strings with different ids"),ok(!_.isEqual(s,"Au revoir"),"comparing different typed instances with different values"),ok(!_.isEqual("Au revoir",s),"comparing different typed instances with different values"),Date.prototype.toJSON=function(){return{_type:"Date",year:this.getUTCFullYear(),month:this.getUTCMonth(),day:this.getUTCDate(),hours:this.getUTCHours(),minutes:this.getUTCMinutes(),seconds:this.getUTCSeconds()}},Date.prototype.isEqual=function(e){var n=this.toJSON(),t=e instanceof Date?e.toJSON():e;return delete n._type,delete t._type,_.isEqual(n,t)},l=new Date,c={_type:"Date",year:l.getUTCFullYear(),month:l.getUTCMonth(),day:l.getUTCDate(),hours:l.getUTCHours(),minutes:l.getUTCMinutes(),seconds:l.getUTCSeconds()},ok(_.isEqual(c,l),"serialized date matches date"),ok(_.isEqual(l,c),"date matches serialized date")}),test("objects: isEmpty",function(){ok(!_([1]).isEmpty(),"[1] is not empty"),ok(_.isEmpty([]),"[] is empty"),ok(!_.isEmpty({one:1}),"{one : 1} is not empty"),ok(_.isEmpty({}),"{} is empty"),ok(_.isEmpty(RegExp("")),"objects with prototype properties are empty"),ok(_.isEmpty(null),"null is empty"),ok(_.isEmpty(),"undefined is empty"),ok(_.isEmpty(""),"the empty string is empty"),ok(!_.isEmpty("moe"),"but other strings are not");var e={one:1};delete e.one,ok(_.isEmpty(e),"deleting all the keys from an object empties it")}),e=document.createElement("iframe"),jQuery(e).appendTo(document.body),n=e.contentDocument||e.contentWindow.document,n.write("<script>      parent.iElement   = document.createElement('div');      parent.iArguments = (function(){ return arguments; })(1, 2, 3);      parent.iArray     = [1, 2, 3];      parent.iString    = new String('hello');      parent.iNumber    = new Number(100);      parent.iFunction  = (function(){});      parent.iDate      = new Date();      parent.iRegExp    = /hi/;      parent.iNaN       = NaN;      parent.iNull      = null;      parent.iBoolean   = new Boolean(false);      parent.iUndefined = undefined;    </script>"),n.close(),test("objects: isElement",function(){ok(!_.isElement("div"),"strings are not dom elements"),ok(_.isElement($("html")[0]),"the html tag is a DOM element"),ok(_.isElement(iElement),"even from another frame")}),test("objects: isArguments",function(){var e=function(){return arguments}(1,2,3);ok(!_.isArguments("string"),"a string is not an arguments object"),ok(!_.isArguments(_.isArguments),"a function is not an arguments object"),ok(_.isArguments(e),"but the arguments object is an arguments object"),ok(!_.isArguments(_.toArray(e)),"but not when it's converted into an array"),ok(!_.isArguments([1,2,3]),"and not vanilla arrays."),ok(_.isArguments(iArguments),"even from another frame")}),test("objects: isObject",function(){ok(_.isObject(arguments),"the arguments object is object"),ok(_.isObject([1,2,3]),"and arrays"),ok(_.isObject($("html")[0]),"and DOM element"),ok(_.isObject(iElement),"even from another frame"),ok(_.isObject(function(){}),"and functions"),ok(_.isObject(iFunction),"even from another frame"),ok(!_.isObject(null),"but not null"),ok(!_.isObject(void 0),"and not undefined"),ok(!_.isObject("string"),"and not string"),ok(!_.isObject(12),"and not number"),ok(!_.isObject(!0),"and not boolean"),ok(_.isObject(new String("string")),"but new String()")}),test("objects: isArray",function(){ok(!_.isArray(arguments),"the arguments object is not an array"),ok(_.isArray([1,2,3]),"but arrays are"),ok(_.isArray(iArray),"even from another frame")}),test("objects: isString",function(){ok(!_.isString(document.body),"the document body is not a string"),ok(_.isString([1,2,3].join(", ")),"but strings are"),ok(_.isString(iString),"even from another frame")}),test("objects: isNumber",function(){ok(!_.isNumber("string"),"a string is not a number"),ok(!_.isNumber(arguments),"the arguments object is not a number"),ok(!_.isNumber(void 0),"undefined is not a number"),ok(_.isNumber(11.3),"but numbers are"),ok(_.isNumber(0/0),"NaN *is* a number"),ok(_.isNumber(1/0),"Infinity is a number"),ok(_.isNumber(iNumber),"even from another frame"),ok(!_.isNumber("1"),"numeric strings are not numbers")}),test("objects: isBoolean",function(){ok(!_.isBoolean(2),"a number is not a boolean"),ok(!_.isBoolean("string"),"a string is not a boolean"),ok(!_.isBoolean("false"),'the string "false" is not a boolean'),ok(!_.isBoolean("true"),'the string "true" is not a boolean'),ok(!_.isBoolean(arguments),"the arguments object is not a boolean"),ok(!_.isBoolean(void 0),"undefined is not a boolean"),ok(!_.isBoolean(0/0),"NaN is not a boolean"),ok(!_.isBoolean(null),"null is not a boolean"),ok(_.isBoolean(!0),"but true is"),ok(_.isBoolean(!1),"and so is false"),ok(_.isBoolean(iBoolean),"even from another frame")}),test("objects: isFunction",function(){ok(!_.isFunction([1,2,3]),"arrays are not functions"),ok(!_.isFunction("moe"),"strings are not functions"),ok(_.isFunction(_.isFunction),"but functions are"),ok(_.isFunction(iFunction),"even from another frame")}),test("objects: isDate",function(){ok(!_.isDate(100),"numbers are not dates"),ok(!_.isDate({}),"objects are not dates"),ok(_.isDate(new Date),"but dates are"),ok(_.isDate(iDate),"even from another frame")}),test("objects: isRegExp",function(){ok(!_.isRegExp(_.identity),"functions are not RegExps"),ok(_.isRegExp(/identity/),"but RegExps are"),ok(_.isRegExp(iRegExp),"even from another frame")}),test("objects: isNaN",function(){ok(!_.isNaN(void 0),"undefined is not NaN"),ok(!_.isNaN(null),"null is not NaN"),ok(!_.isNaN(0),"0 is not NaN"),ok(_.isNaN(0/0),"but NaN is"),ok(_.isNaN(iNaN),"even from another frame")}),test("objects: isNull",function(){ok(!_.isNull(void 0),"undefined is not null"),ok(!_.isNull(0/0),"NaN is not null"),ok(_.isNull(null),"but null is"),ok(_.isNull(iNull),"even from another frame")}),test("objects: isUndefined",function(){ok(!_.isUndefined(1),"numbers are defined"),ok(!_.isUndefined(null),"null is defined"),ok(!_.isUndefined(!1),"false is defined"),ok(!_.isUndefined(0/0),"NaN is defined"),ok(_.isUndefined(),"nothing is undefined"),ok(_.isUndefined(void 0),"undefined is undefined"),ok(_.isUndefined(iUndefined),"even from another frame")}),window.ActiveXObject&&test("objects: IE host objects",function(){var e=new ActiveXObject("Msxml2.DOMDocument.3.0");ok(!_.isNumber(e)),ok(!_.isBoolean(e)),ok(!_.isNaN(e)),ok(!_.isFunction(e)),ok(!_.isNull(e)),ok(!_.isUndefined(e))}),test("objects: tap",function(){var e=null,n=function(n){e=n},t=_.tap(1,n);equals(e,1,"passes tapped object to interceptor"),equals(t,1,"returns tapped object"),t=_([1,2,3]).chain().map(function(e){return 2*e}).max().tap(n).value(),ok(6==t&&6==e,"can use tapped objects in a chain")})});