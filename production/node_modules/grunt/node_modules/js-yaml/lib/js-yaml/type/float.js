"use strict";function resolveYamlFloat(e){var r,a,n,t;return YAML_FLOAT_PATTERN.test(e)?(r=e.replace(/_/g,"").toLowerCase(),a="-"===r[0]?-1:1,t=[],0<="+-".indexOf(r[0])&&(r=r.slice(1)),".inf"===r?1===a?Number.POSITIVE_INFINITY:Number.NEGATIVE_INFINITY:".nan"===r?0/0:0<=r.indexOf(":")?(r.split(":").forEach(function(e){t.unshift(parseFloat(e,10))}),r=0,n=1,t.forEach(function(e){r+=e*n,n*=60}),a*r):a*parseFloat(r,10)):NIL}function representYamlFloat(e,r){if(isNaN(e))switch(r){case"lowercase":return".nan";case"uppercase":return".NAN";case"camelcase":return".NaN"}else if(Number.POSITIVE_INFINITY===e)switch(r){case"lowercase":return".inf";case"uppercase":return".INF";case"camelcase":return".Inf"}else{if(Number.NEGATIVE_INFINITY!==e)return e.toString(10);switch(r){case"lowercase":return"-.inf";case"uppercase":return"-.INF";case"camelcase":return"-.Inf"}}}var NIL=null.NIL,Type=null,YAML_FLOAT_PATTERN=RegExp("^(?:[-+]?(?:[0-9][0-9_]*)\\.[0-9_]*(?:[eE][-+][0-9]+)?|\\.[0-9_]+(?:[eE][-+][0-9]+)?|[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\\.[0-9_]*|[-+]?\\.(?:inf|Inf|INF)|\\.(?:nan|NaN|NAN))$");module.exports=new Type("tag:yaml.org,2002:float",{loader:{kind:"string",resolver:resolveYamlFloat},dumper:{kind:"float",defaultStyle:"lowercase",representer:representYamlFloat}});