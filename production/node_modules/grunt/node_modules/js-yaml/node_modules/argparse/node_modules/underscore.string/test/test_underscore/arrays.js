$(document).ready(function(){module("Arrays"),test("first",function(){equal(_.first([1,2,3]),1,"can pull out the first element of an array"),equal(_([1,2,3]).first(),1,'can perform OO-style "first()"'),equal(_.first([1,2,3],0).join(", "),"","can pass an index to first"),equal(_.first([1,2,3],2).join(", "),"1, 2","can pass an index to first"),equal(_.first([1,2,3],5).join(", "),"1, 2, 3","can pass an index to first");var e=function(){return _.first(arguments)}(4,3,2,1);equal(e,4,"works on an arguments object."),e=_.map([[1,2,3],[1,2,3]],_.first),equal(e.join(","),"1,1","works well with _.map"),e=function(){return _.take([1,2,3],2)}(),equal(e.join(","),"1,2","aliased as take"),equal(_.first(null),void 0,"handles nulls")}),test("rest",function(){var e,n=[1,2,3,4];equal(_.rest(n).join(", "),"2, 3, 4","working rest()"),equal(_.rest(n,0).join(", "),"1, 2, 3, 4","working rest(0)"),equal(_.rest(n,2).join(", "),"3, 4","rest can take an index"),e=function(){return _(arguments).tail()}(1,2,3,4),equal(e.join(", "),"2, 3, 4","aliased as tail and works on arguments object"),e=_.map([[1,2,3],[1,2,3]],_.rest),equal(_.flatten(e).join(","),"2,3,2,3","works well with _.map"),e=function(){return _(arguments).drop()}(1,2,3,4),equal(e.join(", "),"2, 3, 4","aliased as drop and works on arguments object")}),test("initial",function(){equal(_.initial([1,2,3,4,5]).join(", "),"1, 2, 3, 4","working initial()"),equal(_.initial([1,2,3,4],2).join(", "),"1, 2","initial can take an index");var e=function(){return _(arguments).initial()}(1,2,3,4);equal(e.join(", "),"1, 2, 3","initial works on arguments object"),e=_.map([[1,2,3],[1,2,3]],_.initial),equal(_.flatten(e).join(","),"1,2,1,2","initial works with _.map")}),test("last",function(){equal(_.last([1,2,3]),3,"can pull out the last element of an array"),equal(_.last([1,2,3],0).join(", "),"","can pass an index to last"),equal(_.last([1,2,3],2).join(", "),"2, 3","can pass an index to last"),equal(_.last([1,2,3],5).join(", "),"1, 2, 3","can pass an index to last");var e=function(){return _(arguments).last()}(1,2,3,4);equal(e,4,"works on an arguments object"),e=_.map([[1,2,3],[1,2,3]],_.last),equal(e.join(","),"3,3","works well with _.map"),equal(_.last(null),void 0,"handles nulls")}),test("compact",function(){equal(_.compact([0,1,!1,2,!1,3]).length,3,"can trim out all falsy values");var e=function(){return _(arguments).compact().length}(0,1,!1,2,!1,3);equal(e,3,"works on an arguments object")}),test("flatten",function(){var e,n;window.JSON&&(e=[1,[2],[3,[[[4]]]]],equal(JSON.stringify(_.flatten(e)),"[1,2,3,4]","can flatten nested arrays"),equal(JSON.stringify(_.flatten(e,!0)),"[1,2,3,[[[4]]]]","can shallowly flatten nested arrays"),n=function(){return _.flatten(arguments)}(1,[2],[3,[[[4]]]]),equal(JSON.stringify(n),"[1,2,3,4]","works on an arguments object"))}),test("without",function(){var e,n=[1,2,1,0,3,1,4];equal(_.without(n,0,1).join(", "),"2, 3, 4","can remove all instances of an object"),e=function(){return _.without(arguments,0,1)}(1,2,1,0,3,1,4),equal(e.join(", "),"2, 3, 4","works on an arguments object"),n=[{one:1},{two:2}],ok(2==_.without(n,{one:1}).length,"uses real object identity for comparisons."),ok(1==_.without(n,n[0]).length,"ditto.")}),test("uniq",function(){var e,n,a=[1,2,1,3,1,4];equal(_.uniq(a).join(", "),"1, 2, 3, 4","can find the unique values of an unsorted array"),a=[1,1,1,2,2,3],equal(_.uniq(a,!0).join(", "),"1, 2, 3","can find the unique values of a sorted array faster"),a=[{name:"moe"},{name:"curly"},{name:"larry"},{name:"curly"}],e=function(e){return e.name},equal(_.map(_.uniq(a,!1,e),e).join(", "),"moe, curly, larry","can find the unique values of an array using a custom iterator"),e=function(e){return e+1},a=[1,2,2,3,4,4],equal(_.uniq(a,!0,e).join(", "),"1, 2, 3, 4","iterator works with sorted array"),n=function(){return _.uniq(arguments)}(1,2,1,3,1,4),equal(n.join(", "),"1, 2, 3, 4","works on an arguments object")}),test("intersection",function(){var e,n=["moe","curly","larry"],a=["moe","groucho"];equal(_.intersection(n,a).join(""),"moe","can take the set intersection of two arrays"),equal(_(n).intersection(a).join(""),"moe","can perform an OO-style intersection"),e=function(){return _.intersection(arguments,a)}("moe","curly","larry"),equal(e.join(""),"moe","works on an arguments object")}),test("union",function(){var e=_.union([1,2,3],[2,30,1],[1,40]);equal(e.join(" "),"1 2 3 30 40","takes the union of a list of arrays"),e=_.union([1,2,3],[2,30,1],[1,40,[1]]),equal(e.join(" "),"1 2 3 30 40 1","takes the union of a list of nested arrays")}),test("difference",function(){var e=_.difference([1,2,3],[2,30,40]);equal(e.join(" "),"1 3","takes the difference of two arrays"),e=_.difference([1,2,3,4],[2,30,40],[1,11,111]),equal(e.join(" "),"3 4","takes the difference of three arrays")}),test("zip",function(){var e=["moe","larry","curly"],n=[30,40,50],a=[!0],t=_.zip(e,n,a);equal(t+"","moe,30,true,larry,40,,curly,50,","zipped together arrays of different lengths")}),test("object",function(){var e,n=_.object(["moe","larry","curly"],[30,40,50]),a={moe:30,larry:40,curly:50};ok(_.isEqual(n,a),"two arrays zipped together into an object"),n=_.object([["one",1],["two",2],["three",3]]),a={one:1,two:2,three:3},ok(_.isEqual(n,a),"an array of pairs zipped together into an object"),e={moe:30,larry:40,curly:50},ok(_.isEqual(_.object(_.pairs(e)),e),"an object converted to pairs and back to an object"),ok(_.isEqual(_.object(null),{}),"handles nulls")}),test("indexOf",function(){var e,n,a,t=[1,2,3];t.indexOf=null,equal(_.indexOf(t,2),1,"can compute indexOf, even without the native function"),e=function(){return _.indexOf(arguments,2)}(1,2,3),equal(e,1,"works on an arguments object"),equal(_.indexOf(null,2),-1,"handles nulls properly"),t=[10,20,30,40,50],n=35,a=_.indexOf(t,n,!0),equal(a,-1,"35 is not in the list"),t=[10,20,30,40,50],n=40,a=_.indexOf(t,n,!0),equal(a,3,"40 is in the list"),t=[1,40,40,40,40,40,40,40,50,60,70],n=40,a=_.indexOf(t,n,!0),equal(a,1,"40 is in the list"),t=[1,2,3,1,2,3,1,2,3],a=_.indexOf(t,2,5),equal(a,7,"supports the fromIndex argument")}),test("lastIndexOf",function(){var e,n=[1,0,1];equal(_.lastIndexOf(n,1),2),n=[1,0,1,0,0,1,0,0,0],n.lastIndexOf=null,equal(_.lastIndexOf(n,1),5,"can compute lastIndexOf, even without the native function"),equal(_.lastIndexOf(n,0),8,"lastIndexOf the other element"),e=function(){return _.lastIndexOf(arguments,1)}(1,0,1,0,0,1,0,0,0),equal(e,5,"works on an arguments object"),equal(_.indexOf(null,2),-1,"handles nulls properly"),n=[1,2,3,1,2,3,1,2,3],index=_.lastIndexOf(n,2,2),equal(index,1,"supports the fromIndex argument")}),test("range",function(){equal(_.range(0).join(""),"","range with 0 as a first argument generates an empty array"),equal(_.range(4).join(" "),"0 1 2 3","range with a single positive argument generates an array of elements 0,1,2,...,n-1"),equal(_.range(5,8).join(" "),"5 6 7","range with two arguments a &amp; b, a&lt;b generates an array of elements a,a+1,a+2,...,b-2,b-1"),equal(_.range(8,5).join(""),"","range with two arguments a &amp; b, b&lt;a generates an empty array"),equal(_.range(3,10,3).join(" "),"3 6 9","range with three arguments a &amp; b &amp; c, c &lt; b-a, a &lt; b generates an array of elements a,a+c,a+2c,...,b - (multiplier of a) &lt; c"),equal(_.range(3,10,15).join(""),"3","range with three arguments a &amp; b &amp; c, c &gt; b-a, a &lt; b generates an array with a single element, equal to a"),equal(_.range(12,7,-2).join(" "),"12 10 8","range with three arguments a &amp; b &amp; c, a &gt; b, c &lt; 0 generates an array of elements a,a-c,a-2c and ends with the number not less than b"),equal(_.range(0,-10,-1).join(" "),"0 -1 -2 -3 -4 -5 -6 -7 -8 -9","final example in the Python docs")})});