function monkeyPatch(){Object.defineProperty(Array.prototype,"abbrev",{value:function(){return abbrev(this)},enumerable:!1,configurable:!0,writable:!0}),Object.defineProperty(Object.prototype,"abbrev",{value:function(){return abbrev(Object.keys(this))},enumerable:!1,configurable:!0,writable:!0})}function abbrev(e){var r,t,a,o,b,l,u,s,n,c,i,p,f;for(1===arguments.length&&Array.isArray(e)||(e=Array.prototype.slice.call(arguments,0)),r=0,t=e.length,a=[];t>r;r++)a[r]="string"==typeof e[r]?e[r]:e[r]+"";for(a=a.sort(lexSort),o={},b="",r=0,t=a.length;t>r;r++)if(l=a[r],u=a[r+1]||"",s=!0,n=!0,l!==u){for(c=0,i=l.length;i>c;c++)if(p=l.charAt(c),s=s&&p===u.charAt(c),n=n&&p===b.charAt(c),!s&&!n){c++;break}if(b=l,c!==i)for(f=l.substr(0,c);i>=c;c++)o[f]=l,f+=l.charAt(c);else o[l]=l}return o}function lexSort(e,r){return e===r?0:e>r?1:-1}function test(e,r){var t=abbrev(e);assert.deepEqual(t,r,"abbrev("+util.inspect(e)+") === "+util.inspect(r)+"\n"+"actual: "+util.inspect(t)),t=abbrev.apply(exports,e),assert.deepEqual(abbrev.apply(exports,e),r,"abbrev("+e.map(JSON.stringify).join(",")+") === "+util.inspect(r)+"\n"+"actual: "+util.inspect(t))}var assert,util;module.exports=exports=abbrev.abbrev=abbrev,abbrev.monkeyPatch=monkeyPatch,module===require.main&&(assert=require("assert"),util=require("util"),console.log("running tests"),test(["ruby","ruby","rules","rules","rules"],{rub:"ruby",ruby:"ruby",rul:"rules",rule:"rules",rules:"rules"}),test(["fool","foom","pool","pope"],{fool:"fool",foom:"foom",poo:"pool",pool:"pool",pop:"pope",pope:"pope"}),test(["a","ab","abc","abcd","abcde","acde"],{a:"a",ab:"ab",abc:"abc",abcd:"abcd",abcde:"abcde",ac:"acde",acd:"acde",acde:"acde"}),console.log("pass"));