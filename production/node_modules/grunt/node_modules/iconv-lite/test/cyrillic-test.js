var vows=null,assert=null,iconv=require(__dirname+"/../"),baseStrings={empty:"",hi:"Привет!",ascii:"\x00\b	\n\f\r !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~",rus:"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя",additional1:"ЂЃ‚ѓ„…†‡€‰Љ‹ЊЌЋЏђ‘’“”•–—™љ›њќћџ ЎўЈ¤Ґ¦§Ё©Є«¬­®Ї°±Ііґµ¶·ё№є»јЅѕї",additional2:"─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ё╓╔╕╖╗╘╙╚╛╜╝╞╟╠╡Ё╢╣╤╥╦╧╨╩╪╫╬©",additional3:" ЁЂЃЄЅІЇЈЉЊЋЌ­ЎЏ№ёђѓєѕіїјљњћќ§ўџ",untranslatable:"£Åçþÿ¿"},encodings=[{name:"Win-1251",variations:["win1251","Windows-1251","windows1251","CP1251",1251],encodedStrings:{empty:new Buffer(""),hi:new Buffer("Ïðèâåò!","binary"),ascii:new Buffer(baseStrings.ascii,"binary"),rus:new Buffer("ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ","binary"),additional1:new Buffer(" ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿","binary")}},{name:"Koi8-R",variations:["koi8r","KOI8-R","cp20866",20866],encodedStrings:{empty:new Buffer(""),hi:new Buffer("ðÒÉ×ÅÔ!","binary"),ascii:new Buffer(baseStrings.ascii,"binary"),rus:new Buffer("áâ÷çäåöúéêëìíîïðòóôõæèãþûýÿùøüàñÁÂ×ÇÄÅÖÚÉÊËÌÍÎÏÐÒÓÔÕÆÈÃÞÛÝßÙØÜÀÑ","binary"),additional2:new Buffer(" ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿","binary")}},{name:"ISO 8859-5",variations:["iso88595","ISO-8859-5","ISO 8859-5","cp28595",28595],encodedStrings:{empty:new Buffer(""),hi:new Buffer("¿àØÒÕâ!","binary"),ascii:new Buffer(baseStrings.ascii,"binary"),rus:new Buffer("°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîï","binary"),additional3:new Buffer(" ¡¢£¤¥¦§¨©ª«¬­®¯ðñòóôõö÷øùúûüýþÿ","binary")}}],testsBatch={};encodings.forEach(function(n){var i=n.variations[0],r="hi",t={"Convert to empty buffer":function(){assert.strictEqual(iconv.toEncoding("",i).toString("binary"),new Buffer("").toString("binary"))},"Convert from empty buffer":function(){assert.strictEqual(iconv.fromEncoding(new Buffer(""),i),"")},"Convert from buffer":function(){for(var r in n.encodedStrings)assert.strictEqual(iconv.fromEncoding(n.encodedStrings[r],i),baseStrings[r])},"Convert to buffer":function(){for(var r in n.encodedStrings)assert.strictEqual(iconv.toEncoding(baseStrings[r],i).toString("binary"),n.encodedStrings[r].toString("binary"))},"Try different variations of encoding":function(){n.variations.forEach(function(i){assert.strictEqual(iconv.fromEncoding(n.encodedStrings[r],i),baseStrings[r]),assert.strictEqual(iconv.toEncoding(baseStrings[r],i).toString("binary"),n.encodedStrings[r].toString("binary"))})},"Untranslatable chars are converted to defaultCharSingleByte":function(){var n=baseStrings.untranslatable.split("").map(function(){return iconv.defaultCharSingleByte}).join("");assert.strictEqual(iconv.toEncoding(baseStrings.untranslatable,i).toString("binary"),n)}};testsBatch[n.name+":"]=t}),vows.describe("Test Cyrillic encodings").addBatch(testsBatch).export(module);