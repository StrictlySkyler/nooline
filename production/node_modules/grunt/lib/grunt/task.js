/*
 * grunt
 * http://gruntjs.com/
 *
 * Copyright (c) 2013 "Cowboy" Ben Alman
 * Licensed under the MIT license.
 * https://github.com/gruntjs/grunt/blob/master/LICENSE-MIT
 */

"use strict";function isValidMultiTaskTarget(t){return!/^_|^options$/.test(t)}function loadTask(t){var r,e,n,s;loadTaskStack.push(registry),registry={tasks:[],untasks:[],meta:{info:lastInfo,filepath:t}},r=path.basename(t),e='Loading "'+r+'" tasks...',n=0;try{s=require(path.resolve(t)),"function"==typeof s&&s.call(grunt,grunt),grunt.verbose.write(e).ok(),["un",""].forEach(function(t){var r=grunt.util._.chain(registry[t+"tasks"]).uniq().sort().value();r.length>0&&(n++,grunt.verbose.writeln((t?"- ":"+ ")+grunt.log.wordlist(r)))}),0===n&&grunt.verbose.error("No tasks were registered or unregistered.")}catch(a){grunt.log.write(e).error().verbose.error(a.stack).or.error(a)}registry=loadTaskStack.pop()||{}}function loadTasksMessage(t){0===loadTaskDepth&&(lastInfo=t),grunt.verbose.subhead("Registering "+t+" tasks.")}function loadTasks(t){try{var r=grunt.file.glob.sync("*.{js,coffee}",{cwd:t,maxDepth:1});r.forEach(function(r){loadTask(path.join(t,r))})}catch(e){grunt.log.verbose.error(e.stack).or.error(e)}}var lastInfo,errorcount,loadTaskStack,grunt=null,path=null,parent=grunt.util.task.create(),task=module.exports=Object.create(parent),registry={tasks:[],untasks:[],meta:{}},loadTaskDepth=0;task.registerTask=function(t){var r,e;return registry.tasks.push(t),parent.registerTask.apply(task,arguments),r=task._tasks[t],r.meta=grunt.util._.clone(registry.meta),e=r.fn,r.fn=function(n){errorcount=grunt.fail.errorcount,Object.defineProperty(this,"errorCount",{enumerable:!0,get:function(){return grunt.fail.errorcount-errorcount}}),this.requires=task.requires.bind(task),this.requiresConfig=grunt.config.requires,this.options=function(){var r=[{}].concat(grunt.util.toArray(arguments)).concat([grunt.config([t,"options"])]);return grunt.util._.extend.apply(null,r)};var s=e.alias||r.multi&&(!n||"*"===n)?"verbose":"log";return grunt[s].header('Running "'+this.nameArgs+'"'+(this.name!==this.nameArgs?" ("+this.name+")":"")+" task"),grunt[s].debug("Task source: "+r.meta.filepath),e.apply(this,arguments)},task},task.normalizeMultiTaskFiles=function(t,r){var e,n,s=[];if("object"===grunt.util.kindOf(t))if("src"in t||"dest"in t){n={};for(e in t)"options"!==e&&(n[e]=t[e]);s.push(n)}else if("object"===grunt.util.kindOf(t.files))for(e in t.files)s.push({src:t.files[e],dest:grunt.config.process(e)});else Array.isArray(t.files)&&t.files.forEach(function(t){var r;if("src"in t||"dest"in t)s.push(t);else for(r in t)s.push({src:t[r],dest:grunt.config.process(r)})});else s.push({src:t,dest:grunt.config.process(r)});return 0===s.length?(grunt.verbose.writeln("File: "+"[no files]".yellow),[]):(s=grunt.util._(s).chain().forEach(function(t){"src"in t&&t.src&&(t.src=Array.isArray(t.src)?grunt.util._.flatten(t.src):[t.src])}).map(function(t){var r,e=grunt.util._.extend({},t);return delete e.src,delete e.dest,t.expand?grunt.file.expandMapping(t.src,t.dest,e).map(function(r){var e=grunt.util._.extend({},t);return e.orig=grunt.util._.extend({},t),e.src=grunt.config.process(r.src),e.dest=grunt.config.process(r.dest),["expand","cwd","flatten","rename","ext"].forEach(function(t){delete e[t]}),e}):(r=grunt.util._.extend({},t),r.orig=grunt.util._.extend({},t),"src"in r&&Object.defineProperty(r,"src",{enumerable:!0,get:function n(){var r;return"result"in n||(r=t.src,r=Array.isArray(r)?grunt.util._.flatten(r):[r],n.result=grunt.file.expand(e,r)),n.result}}),"dest"in r&&(r.dest=t.dest),r)}).flatten().value(),grunt.option("verbose")&&s.forEach(function(t){var r=[];"src"in t&&r.push(t.src.length>0?grunt.log.wordlist(t.src):"[no src]".yellow),"dest"in t&&r.push("-> "+(t.dest?(t.dest+"").cyan:"[no dest]".yellow)),r.length>0&&grunt.verbose.writeln("Files: "+r.join(" "))}),s)},task.registerMultiTask=function(t,r,e){null==e&&(e=r,r="Custom multi task.");var n;task.registerTask(t,r,function(t){var r=n.name;if(this.args=grunt.util.toArray(arguments).slice(1),!t||"*"===t)return task.runAllTargets(r,this.args);if(!isValidMultiTaskTarget(t))throw Error('Invalid target "'+t+'" specified.');return this.requiresConfig([r,t]),this.options=function(){var e=grunt.config([r,t]),n=[{}].concat(grunt.util.toArray(arguments)).concat([grunt.config([r,"options"]),"object"===grunt.util.kindOf(e)?e.options:{}]);return grunt.util._.extend.apply(null,n)},this.data=grunt.config([r,t]),this.files=task.normalizeMultiTaskFiles(this.data,t),Object.defineProperty(this,"filesSrc",{enumerable:!0,get:function(){return grunt.util._(this.files).chain().pluck("src").flatten().uniq().value()}.bind(this)}),this.target=t,this.flags={},this.args.forEach(function(t){this.flags[t]=!0},this),e.apply(this,this.args)}),n=task._tasks[t],n.multi=!0},task.registerInitTask=function(t,r,e){task.registerTask(t,r,e),task._tasks[t].init=!0},task.renameTask=function(t,r){return registry.untasks.push(t),registry.tasks.push(r),parent.renameTask.apply(task,arguments)},task.runAllTargets=function(t,r){var e=Object.keys(grunt.config.getRaw(t)||{});return 0===e.length?(grunt.log.error('No "'+t+'" targets found.'),!1):(e.filter(isValidMultiTaskTarget).forEach(function(e){task.run([t,e].concat(r||[]).join(":"))}),void 0)},loadTaskStack=[],task.loadTasks=function(t){loadTasksMessage('"'+t+'"'),grunt.file.exists(t)?loadTasks(t):grunt.log.error('Tasks directory "'+t+'" not found.')},task.loadNpmTasks=function(t){var r,e,n,s;return loadTasksMessage('"'+t+'" local Npm module'),r=path.resolve("node_modules"),e=path.join(r,t,"package.json"),n=grunt.file.exists(e)?grunt.file.readJSON(e):{keywords:[]},n.keywords&&-1!==n.keywords.indexOf("gruntcollection")?(loadTaskDepth++,Object.keys(n.dependencies).forEach(function(e){var n=grunt.file.findup("node_modules/"+e,{cwd:path.resolve("node_modules",t),nocase:!0});n&&task.loadNpmTasks(path.relative(r,n))}),loadTaskDepth--,void 0):(s=path.join(r,t,"tasks"),grunt.file.exists(s)?loadTasks(s):grunt.log.error('Local Npm module "'+t+'" not found. Is it installed?'),void 0)},task.init=function(t,r){var e,n,s;r||(r={}),e=t.length>0&&t.every(function(t){var r=task._taskPlusArgs(t).task;return r&&r.init}),n=e?null:grunt.option("gruntfile")||grunt.file.findup("Gruntfile.{js,coffee}",{nocase:!0}),s='Reading "'+(n?path.basename(n):"???")+'" Gruntfile...',n&&grunt.file.exists(n)?(grunt.verbose.writeln().write(s).ok(),process.chdir(grunt.option("base")||path.dirname(n)),loadTasksMessage("Gruntfile"),loadTask(n)):r.help||e||(grunt.option("gruntfile")?(grunt.log.writeln().write(s).error(),grunt.fatal('Unable to find "'+n+'" Gruntfile.',grunt.fail.code.MISSING_GRUNTFILE)):grunt.option("help")||(grunt.verbose.writeln().write(s).error(),grunt.log.writelns("A valid Gruntfile could not be found. Please see the getting started guide for more information on how to configure grunt: http://gruntjs.com/getting-started"),grunt.fatal("Unable to find Gruntfile.",grunt.fail.code.MISSING_GRUNTFILE))),(grunt.option("npm")||[]).forEach(task.loadNpmTasks),(grunt.option("tasks")||[]).forEach(task.loadTasks)};