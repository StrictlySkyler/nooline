"use strict";var grunt=null,fs=null,path=null,Tempfile=null;exports["util.callbackify"]={"return":function(e){function t(e,t){return e+t}e.expect(1),grunt.util.callbackify(t)(1,2,function(t){e.equal(t,3,"should be the correct result."),e.done()})},"callback (sync)":function(e){function t(e,t,n){n(e+t)}e.expect(1),grunt.util.callbackify(t)(1,2,function(t){e.equal(t,3,"should be the correct result."),e.done()})},"callback (async)":function(e){function t(e,t,n){setTimeout(n.bind(null,e+t),0)}e.expect(1),grunt.util.callbackify(t)(1,2,function(t){e.equal(t,3,"should be the correct result."),e.done()})}},exports.util={error:function(e){var t,n,u;e.expect(9),t=Error("Original error."),n=grunt.util.error("Test message."),e.ok(n instanceof Error,"Should be an Error."),e.equal(n.name,"Error","Should be an Error."),e.equal(n.message,"Test message.","Should have the correct message."),n=grunt.util.error("Test message.",t),e.ok(n instanceof Error,"Should be an Error."),e.equal(n.name,"Error","Should be an Error."),e.equal(n.message,"Test message.","Should have the correct message."),e.equal(n.origError,t,"Should reflect the original error."),u=Error("Test message."),n=grunt.util.error(u,t),e.equal(n,u,"Should be the passed-in Error."),e.equal(n.origError,t,"Should reflect the original error."),e.done()},linefeed:function(e){e.expect(1),"win32"===process.platform?e.equal(grunt.util.linefeed,"\r\n","linefeed should be operating-system appropriate."):e.equal(grunt.util.linefeed,"\n","linefeed should be operating-system appropriate."),e.done()},normalizelf:function(e){e.expect(1),"win32"===process.platform?e.equal(grunt.util.normalizelf("foo\nbar\r\nbaz\r\n\r\nqux\n\nquux"),"foo\r\nbar\r\nbaz\r\n\r\nqux\r\n\r\nquux","linefeeds should be normalized"):e.equal(grunt.util.normalizelf("foo\nbar\r\nbaz\r\n\r\nqux\n\nquux"),"foo\nbar\nbaz\n\nqux\n\nquux","linefeeds should be normalized"),e.done()}},exports["util.spawn"]={setUp:function(e){this.script=path.resolve("test/fixtures/spawn.js"),e()},"exit code 0":function(e){e.expect(6),grunt.util.spawn({cmd:process.execPath,args:[this.script,0]},function(t,n,u){e.equals(t,null),e.equals(u,0),e.equals(n.stdout,"stdout"),e.equals(n.stderr,"stderr"),e.equals(n.code,0),e.equals(n+"","stdout"),e.done()})},"exit code 0, fallback":function(e){e.expect(6),grunt.util.spawn({cmd:process.execPath,args:[this.script,0],fallback:"ignored if exit code is 0"},function(t,n,u){e.equals(t,null),e.equals(u,0),e.equals(n.stdout,"stdout"),e.equals(n.stderr,"stderr"),e.equals(n.code,0),e.equals(n+"","stdout"),e.done()})},"non-zero exit code":function(e){e.expect(7),grunt.util.spawn({cmd:process.execPath,args:[this.script,123]},function(t,n,u){e.ok(t instanceof Error),e.equals(t.message,"stderr"),e.equals(u,123),e.equals(n.stdout,"stdout"),e.equals(n.stderr,"stderr"),e.equals(n.code,123),e.equals(n+"","stderr"),e.done()})},"non-zero exit code, fallback":function(e){e.expect(6),grunt.util.spawn({cmd:process.execPath,args:[this.script,123],fallback:"custom fallback"},function(t,n,u){e.equals(t,null),e.equals(u,123),e.equals(n.stdout,"stdout"),e.equals(n.stderr,"stderr"),e.equals(n.code,123),e.equals(n+"","custom fallback"),e.done()})},"cmd not found":function(e){e.expect(3),grunt.util.spawn({cmd:"nodewtfmisspelled"},function(t,n,u){e.ok(t instanceof Error),e.equals(u,127),e.equals(n.code,127),e.done()})},"cmd not found, fallback":function(e){e.expect(4),grunt.util.spawn({cmd:"nodewtfmisspelled",fallback:"use a fallback or good luck"},function(t,n,u){e.equals(t,null),e.equals(u,127),e.equals(n.code,127),e.equals(n+"","use a fallback or good luck"),e.done()})},"cmd not in path":function(e){e.expect(6);var t="win32"===process.platform;grunt.util.spawn({cmd:"test\\fixtures\\exec"+(t?".cmd":".sh")},function(t,n,u){e.equals(t,null),e.equals(u,0),e.equals(n.stdout,"done"),e.equals(n.stderr,""),e.equals(n.code,0),e.equals(n+"","done"),e.done()})},"cmd not in path (with cwd)":function(e){e.expect(6);var t="win32"===process.platform;grunt.util.spawn({cmd:"./exec"+(t?".cmd":".sh"),opts:{cwd:"test/fixtures"}},function(t,n,u){e.equals(t,null),e.equals(u,0),e.equals(n.stdout,"done"),e.equals(n.stderr,""),e.equals(n.code,0),e.equals(n+"","done"),e.done()})},grunt:function(e){e.expect(3),grunt.util.spawn({grunt:!0,args:["--gruntfile","test/fixtures/Gruntfile-print-text.js","print:foo"]},function(t,n,u){e.equals(t,null),e.equals(u,0),e.ok(/^OUTPUT: foo/m.test(n.stdout),"stdout should contain output indicating the grunt task was run."),e.done()})},"grunt (with cwd)":function(e){e.expect(3),grunt.util.spawn({grunt:!0,args:["--gruntfile","Gruntfile-print-text.js","print:foo"],opts:{cwd:"test/fixtures"}},function(t,n,u){e.equals(t,null),e.equals(u,0),e.ok(/^OUTPUT: foo/m.test(n.stdout),"stdout should contain output indicating the grunt task was run."),e.done()})},"grunt result.toString() with error":function(e){e.expect(4),grunt.util.spawn({grunt:!0,args:["nonexistentTask"]},function(t,n,u){e.ok(t instanceof Error,"Should be an Error."),e.equal(t.name,"Error","Should be an Error."),e.equals(u,3),e.ok(/Warning: Task "nonexistentTask" not found./m.test(""+n),"stdout should contain output indicating the grunt task was (attempted to be) run."),e.done()})},"custom stdio stream(s)":function(e){var t,n,u,s,r;e.expect(6),t=new Tempfile,n=new Tempfile,u=fs.openSync(t.path,"a"),s=fs.openSync(n.path,"a"),r=grunt.util.spawn({cmd:process.execPath,args:[this.script,0],opts:{stdio:[null,u,s]}},function(u,s,r){e.equals(r,0),e.equals(fs.readFileSync(t.path)+"","stdout\n","Child process stdout should have been captured via custom stream."),e.equals(fs.readFileSync(n.path)+"","stderr\n","Child process stderr should have been captured via custom stream."),t.unlinkSync(),n.unlinkSync(),e.equals(s.stdout,"","Nothing will be passed to the stdout string when spawn stdio is a custom stream."),e.done()}),e.ok(!r.stdout,"child should not have a stdout property."),e.ok(!r.stderr,"child should not have a stderr property.")}},exports["util.spawn.multibyte"]={setUp:function(e){this.script=path.resolve("test/fixtures/spawn-multibyte.js"),e()},"partial stdout":function(e){e.expect(4),grunt.util.spawn({cmd:process.execPath,args:[this.script]},function(t,n,u){e.equals(t,null),e.equals(u,0),e.equals(n.stdout,"こんにちは"),e.equals(n.stderr,"こんにちは"),e.done()})}},exports["util.underscore.string"]=function(e){e.expect(4),e.equals(grunt.util._.trim("    foo     "),"foo","Should have trimmed the string."),e.equals(grunt.util._.capitalize("foo"),"Foo","Should have capitalized the first letter."),e.equals(grunt.util._.words("one two three").length,3,"Should have counted three words."),e.ok(grunt.util._.isBlank(" "),"Should be blank."),e.done()};