"use strict";var compareBuffers,compareFiles,grunt=null,fs=null,path=null,Tempfile=null,Tempdir=null,tmpdir=new Tempdir;fs.symlinkSync(path.resolve("test/fixtures/octocat.png"),path.join(tmpdir.path,"octocat.png"),"file"),fs.symlinkSync(path.resolve("test/fixtures/expand"),path.join(tmpdir.path,"expand"),"dir"),exports["file.match"]={"empty set":function(e){e.expect(12),e.deepEqual(grunt.file.match(null,null),[],"should return empty set."),e.deepEqual(grunt.file.match({},null,null),[],"should return empty set."),e.deepEqual(grunt.file.match(null,"foo.js"),[],"should return empty set."),e.deepEqual(grunt.file.match("*.js",null),[],"should return empty set."),e.deepEqual(grunt.file.match({},null,"foo.js"),[],"should return empty set."),e.deepEqual(grunt.file.match({},"*.js",null),[],"should return empty set."),e.deepEqual(grunt.file.match({},[],"foo.js"),[],"should return empty set."),e.deepEqual(grunt.file.match({},"*.js",[]),[],"should return empty set."),e.deepEqual(grunt.file.match(null,["foo.js"]),[],"should return empty set."),e.deepEqual(grunt.file.match(["*.js"],null),[],"should return empty set."),e.deepEqual(grunt.file.match({},null,["foo.js"]),[],"should return empty set."),e.deepEqual(grunt.file.match({},["*.js"],null),[],"should return empty set."),e.done()},"basic matching":function(e){e.expect(6),e.deepEqual(grunt.file.match("*.js","foo.js"),["foo.js"],"should match correctly."),e.deepEqual(grunt.file.match("*.js",["foo.js"]),["foo.js"],"should match correctly."),e.deepEqual(grunt.file.match("*.js",["foo.js","bar.css"]),["foo.js"],"should match correctly."),e.deepEqual(grunt.file.match(["*.js","*.css"],"foo.js"),["foo.js"],"should match correctly."),e.deepEqual(grunt.file.match(["*.js","*.css"],["foo.js"]),["foo.js"],"should match correctly."),e.deepEqual(grunt.file.match(["*.js","*.css"],["foo.js","bar.css"]),["foo.js","bar.css"],"should match correctly."),e.done()},"no matches":function(e){e.expect(2),e.deepEqual(grunt.file.match("*.js","foo.css"),[],"should fail to match."),e.deepEqual(grunt.file.match("*.js",["foo.css","bar.css"]),[],"should fail to match."),e.done()},unique:function(e){e.expect(2),e.deepEqual(grunt.file.match("*.js",["foo.js","foo.js"]),["foo.js"],"should return a uniqued set."),e.deepEqual(grunt.file.match(["*.js","*.*"],["foo.js","foo.js"]),["foo.js"],"should return a uniqued set."),e.done()},flatten:function(e){e.expect(1),e.deepEqual(grunt.file.match([["*.js","*.css"],["*.*","*.js"]],["foo.js","bar.css"]),["foo.js","bar.css"],"should process nested pattern arrays correctly."),e.done()},exclusion:function(e){e.expect(5),e.deepEqual(grunt.file.match(["!*.js"],["foo.js","bar.js"]),[],"solitary exclusion should match nothing"),e.deepEqual(grunt.file.match(["*.js","!*.js"],["foo.js","bar.js"]),[],"exclusion should cancel match"),e.deepEqual(grunt.file.match(["*.js","!f*.js"],["foo.js","bar.js","baz.js"]),["bar.js","baz.js"],"partial exclusion should partially cancel match"),e.deepEqual(grunt.file.match(["*.js","!*.js","b*.js"],["foo.js","bar.js","baz.js"]),["bar.js","baz.js"],"inclusion / exclusion order matters"),e.deepEqual(grunt.file.match(["*.js","!f*.js","*.js"],["foo.js","bar.js","baz.js"]),["bar.js","baz.js","foo.js"],"inclusion / exclusion order matters"),e.done()},"options.matchBase":function(e){e.expect(2),e.deepEqual(grunt.file.match({matchBase:!0},"*.js",["foo.js","bar","baz/xyz.js"]),["foo.js","baz/xyz.js"],"should matchBase (minimatch) when specified."),e.deepEqual(grunt.file.match("*.js",["foo.js","bar","baz/xyz.js"]),["foo.js"],"should not matchBase (minimatch) by default."),e.done()}},exports["file.isMatch"]={"basic matching":function(e){e.expect(6),e.ok(grunt.file.isMatch("*.js","foo.js"),"should match correctly."),e.ok(grunt.file.isMatch("*.js",["foo.js"]),"should match correctly."),e.ok(grunt.file.isMatch("*.js",["foo.js","bar.css"]),"should match correctly."),e.ok(grunt.file.isMatch(["*.js","*.css"],"foo.js"),"should match correctly."),e.ok(grunt.file.isMatch(["*.js","*.css"],["foo.js"]),"should match correctly."),e.ok(grunt.file.isMatch(["*.js","*.css"],["foo.js","bar.css"]),"should match correctly."),e.done()},"no matches":function(e){e.expect(6),e.equal(grunt.file.isMatch("*.js","foo.css"),!1,"should fail to match."),e.equal(grunt.file.isMatch("*.js",["foo.css","bar.css"]),!1,"should fail to match."),e.equal(grunt.file.isMatch(null,"foo.css"),!1,"should fail to match."),e.equal(grunt.file.isMatch("*.js",null),!1,"should fail to match."),e.equal(grunt.file.isMatch([],"foo.css"),!1,"should fail to match."),e.equal(grunt.file.isMatch("*.js",[]),!1,"should fail to match."),e.done()},"options.matchBase":function(e){e.expect(2),e.ok(grunt.file.isMatch({matchBase:!0},"*.js",["baz/xyz.js"]),"should matchBase (minimatch) when specified."),e.equal(grunt.file.isMatch("*.js",["baz/xyz.js"]),!1,"should not matchBase (minimatch) by default."),e.done()}},exports["file.expand*"]={setUp:function(e){this.cwd=process.cwd(),process.chdir("test/fixtures/expand"),e()},tearDown:function(e){process.chdir(this.cwd),e()},"basic matching":function(e){e.expect(8),e.deepEqual(grunt.file.expand("**/*.js"),["js/bar.js","js/foo.js"],"should match."),e.deepEqual(grunt.file.expand("**/*.js","**/*.css"),["js/bar.js","js/foo.js","css/baz.css","css/qux.css"],"should match."),e.deepEqual(grunt.file.expand(["**/*.js","**/*.css"]),["js/bar.js","js/foo.js","css/baz.css","css/qux.css"],"should match."),e.deepEqual(grunt.file.expand("**d*/**"),["deep","deep/deep.txt","deep/deeper","deep/deeper/deeper.txt","deep/deeper/deepest","deep/deeper/deepest/deepest.txt"],"should match files and directories."),e.deepEqual(grunt.file.expand({mark:!0},"**d*/**"),["deep/","deep/deep.txt","deep/deeper/","deep/deeper/deeper.txt","deep/deeper/deepest/","deep/deeper/deepest/deepest.txt"],'the minimatch "mark" option ensures directories end in /.'),e.deepEqual(grunt.file.expand("**d*/**/"),["deep/","deep/deeper/","deep/deeper/deepest/"],"should match directories, arbitrary / at the end appears in matches."),e.deepEqual(grunt.file.expand({mark:!0},"**d*/**/"),["deep/","deep/deeper/","deep/deeper/deepest/"],"should match directories, arbitrary / at the end appears in matches."),e.deepEqual(grunt.file.expand("*.xyz"),[],"should fail to match."),e.done()},filter:function(e){e.expect(5),e.deepEqual(grunt.file.expand({filter:"isFile"},"**d*/**"),["deep/deep.txt","deep/deeper/deeper.txt","deep/deeper/deepest/deepest.txt"],"should match files only."),e.deepEqual(grunt.file.expand({filter:"isDirectory"},"**d*/**"),["deep","deep/deeper","deep/deeper/deepest"],"should match directories only."),e.deepEqual(grunt.file.expand({filter:function(e){return/deepest/.test(e)}},"**"),["deep/deeper/deepest","deep/deeper/deepest/deepest.txt"],"should filter arbitrarily."),e.deepEqual(grunt.file.expand({filter:"isFile"},"js","css"),[],"should fail to match."),e.deepEqual(grunt.file.expand({filter:"isDirectory"},"**/*.js"),[],"should fail to match."),e.done()},unique:function(e){e.expect(4),e.deepEqual(grunt.file.expand("**/*.js","js/*.js"),["js/bar.js","js/foo.js"],"file list should be uniqed."),e.deepEqual(grunt.file.expand("**/*.js","**/*.css","js/*.js"),["js/bar.js","js/foo.js","css/baz.css","css/qux.css"],"file list should be uniqed."),e.deepEqual(grunt.file.expand("js","js/"),["js","js/"],"mixed non-ending-/ and ending-/ dirs will not be uniqed by default."),e.deepEqual(grunt.file.expand({mark:!0},"js","js/"),["js/"],'mixed non-ending-/ and ending-/ dirs will be uniqed when "mark" is specified.'),e.done()},"file order":function(e){var t,s;e.expect(4),t=grunt.file.expand("**/*.{js,css}"),s=["css/baz.css","css/qux.css","js/bar.js","js/foo.js"],e.deepEqual(t,s,"should select 4 files in this order, by default."),t=grunt.file.expand("js/foo.js","js/bar.js","**/*.{js,css}"),s=["js/foo.js","js/bar.js","css/baz.css","css/qux.css"],e.deepEqual(t,s,"specifically-specified-up-front file order should be maintained."),t=grunt.file.expand("js/bar.js","js/foo.js","**/*.{js,css}"),s=["js/bar.js","js/foo.js","css/baz.css","css/qux.css"],e.deepEqual(t,s,"specifically-specified-up-front file order should be maintained."),t=grunt.file.expand("js/foo.js","**/*.{js,css}","!js/bar.js","js/bar.js"),s=["js/foo.js","css/baz.css","css/qux.css","js/bar.js"],e.deepEqual(t,s,"if a file is excluded and then re-added, it should be added at the end."),e.done()},flatten:function(e){e.expect(1),e.deepEqual(grunt.file.expand([["**/*.js"],["**/*.css","js/*.js"]]),["js/bar.js","js/foo.js","css/baz.css","css/qux.css"],"should match."),e.done()},exclusion:function(e){e.expect(8),e.deepEqual(grunt.file.expand(["!js/*.js"]),[],"solitary exclusion should match nothing"),e.deepEqual(grunt.file.expand(["js/bar.js","!js/bar.js"]),[],"exclusion should cancel match"),e.deepEqual(grunt.file.expand(["**/*.js","!js/foo.js"]),["js/bar.js"],"should omit single file from matched set"),e.deepEqual(grunt.file.expand(["!js/foo.js","**/*.js"]),["js/bar.js","js/foo.js"],"inclusion / exclusion order matters"),e.deepEqual(grunt.file.expand(["**/*.js","**/*.css","!js/bar.js","!css/baz.css"]),["js/foo.js","css/qux.css"],"multiple exclusions should be removed from the set"),e.deepEqual(grunt.file.expand(["**/*.js","**/*.css","!**/*.css"]),["js/bar.js","js/foo.js"],"excluded wildcards should be removed from the matched set"),e.deepEqual(grunt.file.expand(["js/bar.js","js/foo.js","css/baz.css","css/qux.css","!**/b*.*"]),["js/foo.js","css/qux.css"],"different pattern for exclusion should still work"),e.deepEqual(grunt.file.expand(["js/bar.js","!**/b*.*","js/foo.js","css/baz.css","css/qux.css"]),["js/foo.js","css/baz.css","css/qux.css"],"inclusion / exclusion order matters"),e.done()},"options.matchBase":function(e){e.expect(4);var t={matchBase:!0};e.deepEqual(grunt.file.expand("*.js"),[],"should not matchBase (minimatch) by default."),e.deepEqual(grunt.file.expand(t,"*.js"),["js/bar.js","js/foo.js"],"options should be passed through to minimatch."),e.deepEqual(grunt.file.expand(t,"*.js","*.css"),["js/bar.js","js/foo.js","css/baz.css","css/qux.css"],"should match."),e.deepEqual(grunt.file.expand(t,["*.js","*.css"]),["js/bar.js","js/foo.js","css/baz.css","css/qux.css"],"should match."),e.done()},"options.cwd":function(e){e.expect(4);var t=path.resolve(process.cwd(),"..");e.deepEqual(grunt.file.expand({cwd:t},["expand/js","expand/js/*"]),["expand/js","expand/js/bar.js","expand/js/foo.js"],"should match."),e.deepEqual(grunt.file.expand({cwd:t,filter:"isFile"},["expand/js","expand/js/*"]),["expand/js/bar.js","expand/js/foo.js"],"should match."),e.deepEqual(grunt.file.expand({cwd:t,filter:"isDirectory"},["expand/js","expand/js/*"]),["expand/js"],"should match."),e.deepEqual(grunt.file.expand({cwd:t,filter:"isFile"},["expand/js","expand/js/*","!**/b*.js"]),["expand/js/foo.js"],"should negate properly."),e.done()},"options.nonull":function(e){e.expect(2);var t={nonull:!0};e.deepEqual(grunt.file.expand(t,["js/a*","js/b*","js/c*"]),["js/a*","js/bar.js","js/c*"],"non-matching patterns should be returned in result set."),e.deepEqual(grunt.file.expand(t,["js/foo.js","js/bar.js","js/baz.js"]),["js/foo.js","js/bar.js","js/baz.js"],"non-matching filenames should be returned in result set."),e.done()}},exports["file.expandMapping"]={setUp:function(e){this.cwd=process.cwd(),process.chdir("test/fixtures"),e()},tearDown:function(e){process.chdir(this.cwd),e()},"basic matching":function(e){var t,s;e.expect(2),t=grunt.file.expandMapping(["expand/**/*.txt"],"dest"),s=[{dest:"dest/expand/deep/deep.txt",src:["expand/deep/deep.txt"]},{dest:"dest/expand/deep/deeper/deeper.txt",src:["expand/deep/deeper/deeper.txt"]},{dest:"dest/expand/deep/deeper/deepest/deepest.txt",src:["expand/deep/deeper/deepest/deepest.txt"]}],e.deepEqual(t,s,"basic src-dest options"),t=grunt.file.expandMapping(["expand/**/*.txt"],"dest/"),e.deepEqual(t,s,"destBase should behave the same both with or without trailing slash"),e.done()},flatten:function(e){var t,s;e.expect(1),t=grunt.file.expandMapping(["expand/**/*.txt"],"dest",{flatten:!0}),s=[{dest:"dest/deep.txt",src:["expand/deep/deep.txt"]},{dest:"dest/deeper.txt",src:["expand/deep/deeper/deeper.txt"]},{dest:"dest/deepest.txt",src:["expand/deep/deeper/deepest/deepest.txt"]}],e.deepEqual(t,s,"dest paths should be flattened pre-destBase+destPath join"),e.done()},ext:function(e){e.expect(2);var t,s;t=grunt.file.expandMapping(["expand/**/*.txt"],"dest",{ext:".foo"}),s=[{dest:"dest/expand/deep/deep.foo",src:["expand/deep/deep.txt"]},{dest:"dest/expand/deep/deeper/deeper.foo",src:["expand/deep/deeper/deeper.txt"]},{dest:"dest/expand/deep/deeper/deepest/deepest.foo",src:["expand/deep/deeper/deepest/deepest.txt"]}],e.deepEqual(t,s,"specified extension should be added"),t=grunt.file.expandMapping(["expand-mapping-ext/**/file*"],"dest",{ext:".foo"}),s=[{dest:"dest/expand-mapping-ext/dir.ectory/file-no-extension.foo",src:["expand-mapping-ext/dir.ectory/file-no-extension"]},{dest:"dest/expand-mapping-ext/dir.ectory/sub.dir.ectory/file.foo",src:["expand-mapping-ext/dir.ectory/sub.dir.ectory/file.ext.ension"]},{dest:"dest/expand-mapping-ext/file.foo",src:["expand-mapping-ext/file.ext.ension"]}],e.deepEqual(t,s,"specified extension should be added"),e.done()},cwd:function(e){var t,s;e.expect(1),t=grunt.file.expandMapping(["**/*.txt"],"dest",{cwd:"expand"}),s=[{dest:"dest/deep/deep.txt",src:["expand/deep/deep.txt"]},{dest:"dest/deep/deeper/deeper.txt",src:["expand/deep/deeper/deeper.txt"]},{dest:"dest/deep/deeper/deepest/deepest.txt",src:["expand/deep/deeper/deepest/deepest.txt"]}],e.deepEqual(t,s,"cwd should be stripped from front of destPath, pre-destBase+destPath join"),e.done()},rename:function(e){var t,s;e.expect(1),t=grunt.file.expandMapping(["**/*.txt"],"dest",{cwd:"expand",flatten:!0,rename:function(e,t,s){return path.join(e,s.cwd,"o-m-g",t)}}),s=[{dest:"dest/expand/o-m-g/deep.txt",src:["expand/deep/deep.txt"]},{dest:"dest/expand/o-m-g/deeper.txt",src:["expand/deep/deeper/deeper.txt"]},{dest:"dest/expand/o-m-g/deepest.txt",src:["expand/deep/deeper/deepest/deepest.txt"]}],e.deepEqual(t,s,"custom rename function should be used to build dest, post-flatten"),e.done()},"rename to same dest":function(e){var t,s;e.expect(1),t=grunt.file.expandMapping(["**/*"],"dest",{filter:"isFile",cwd:"expand",flatten:!0,rename:function(e,t){return path.join(e,"all"+path.extname(t))}}),s=[{dest:"dest/all.md",src:["expand/README.md"]},{dest:"dest/all.css",src:["expand/css/baz.css","expand/css/qux.css"]},{dest:"dest/all.txt",src:["expand/deep/deep.txt","expand/deep/deeper/deeper.txt","expand/deep/deeper/deepest/deepest.txt"]},{dest:"dest/all.js",src:["expand/js/bar.js","expand/js/foo.js"]}],e.deepEqual(t,s,"if dest is same for multiple src, create an array of src"),e.done()}},compareBuffers=function(e,t){if(!Buffer.isBuffer(e)||!Buffer.isBuffer(t))return!1;if(e.length!==t.length)return!1;for(var s=0;s<t.length;s++)if(e[s]!==t[s])return!1;return!0},compareFiles=function(e,t){return compareBuffers(fs.readFileSync(e),fs.readFileSync(t))},exports.file={setUp:function(e){this.defaultEncoding=grunt.file.defaultEncoding,grunt.file.defaultEncoding="utf8",this.string="Ação é isso aí\n",this.object={foo:"Ação é isso aí",bar:["ømg","pønies"]},this.writeOption=grunt.option("write"),e()},tearDown:function(e){grunt.file.defaultEncoding=this.defaultEncoding,grunt.option("write",this.writeOption),e()},read:function(e){e.expect(5),e.strictEqual(grunt.file.read("test/fixtures/utf8.txt"),this.string,"file should be read as utf8 by default."),e.strictEqual(grunt.file.read("test/fixtures/iso-8859-1.txt",{encoding:"iso-8859-1"}),this.string,"file should be read using the specified encoding."),e.ok(compareBuffers(grunt.file.read("test/fixtures/octocat.png",{encoding:null}),fs.readFileSync("test/fixtures/octocat.png")),"file should be read as a buffer if encoding is specified as null."),e.strictEqual(grunt.file.read("test/fixtures/BOM.txt"),"foo","file should have BOM stripped."),grunt.file.defaultEncoding="iso-8859-1",e.strictEqual(grunt.file.read("test/fixtures/iso-8859-1.txt"),this.string,"changing the default encoding should work."),e.done()},readJSON:function(e){e.expect(3);var t;t=grunt.file.readJSON("test/fixtures/utf8.json"),e.deepEqual(t,this.object,"file should be read as utf8 by default and parsed correctly."),t=grunt.file.readJSON("test/fixtures/iso-8859-1.json",{encoding:"iso-8859-1"}),e.deepEqual(t,this.object,"file should be read using the specified encoding."),grunt.file.defaultEncoding="iso-8859-1",t=grunt.file.readJSON("test/fixtures/iso-8859-1.json"),e.deepEqual(t,this.object,"changing the default encoding should work."),e.done()},readYAML:function(e){e.expect(3);var t;t=grunt.file.readYAML("test/fixtures/utf8.yaml"),e.deepEqual(t,this.object,"file should be read as utf8 by default and parsed correctly."),t=grunt.file.readYAML("test/fixtures/iso-8859-1.yaml",{encoding:"iso-8859-1"}),e.deepEqual(t,this.object,"file should be read using the specified encoding."),grunt.file.defaultEncoding="iso-8859-1",t=grunt.file.readYAML("test/fixtures/iso-8859-1.yaml"),e.deepEqual(t,this.object,"changing the default encoding should work."),e.done()},write:function(e){var t,s,n;e.expect(5),t=new Tempfile,grunt.file.write(t.path,this.string),e.strictEqual(fs.readFileSync(t.path,"utf8"),this.string,"file should be written as utf8 by default."),t.unlinkSync(),t=new Tempfile,grunt.file.write(t.path,this.string,{encoding:"iso-8859-1"}),e.strictEqual(grunt.file.read(t.path,{encoding:"iso-8859-1"}),this.string,"file should be written using the specified encoding."),t.unlinkSync(),grunt.file.defaultEncoding="iso-8859-1",t=new Tempfile,grunt.file.write(t.path,this.string),grunt.file.defaultEncoding="utf8",e.strictEqual(grunt.file.read(t.path,{encoding:"iso-8859-1"}),this.string,"changing the default encoding should work."),t.unlinkSync(),t=new Tempfile,s=fs.readFileSync("test/fixtures/octocat.png"),grunt.file.write(t.path,s),e.ok(compareBuffers(fs.readFileSync(t.path),s),"buffers should always be written as-specified, with no attempt at re-encoding."),t.unlinkSync(),grunt.option("write",!1),n=path.join(tmpdir.path,"should-not-exist.txt"),grunt.file.write(n,"test"),e.equal(grunt.file.exists(n),!1,"file should NOT be created if --no-write was specified."),e.done()},copy:function(e){var t,s;e.expect(4),t=new Tempfile,grunt.file.copy("test/fixtures/utf8.txt",t.path),e.ok(compareFiles(t.path,"test/fixtures/utf8.txt"),"files should just be copied as encoding-agnostic by default."),t.unlinkSync(),t=new Tempfile,grunt.file.copy("test/fixtures/iso-8859-1.txt",t.path),e.ok(compareFiles(t.path,"test/fixtures/iso-8859-1.txt"),"files should just be copied as encoding-agnostic by default."),t.unlinkSync(),t=new Tempfile,grunt.file.copy("test/fixtures/octocat.png",t.path),e.ok(compareFiles(t.path,"test/fixtures/octocat.png"),"files should just be copied as encoding-agnostic by default."),t.unlinkSync(),grunt.option("write",!1),s=path.join(tmpdir.path,"should-not-exist.txt"),grunt.file.copy("test/fixtures/utf8.txt",s),e.equal(grunt.file.exists(s),!1,"file should NOT be created if --no-write was specified."),e.done()},"copy and process":function(e){var t,s;e.expect(13),t=new Tempfile,grunt.file.copy("test/fixtures/utf8.txt",t.path,{process:function(t,s){return e.equal(s,"test/fixtures/utf8.txt","filepath should be passed in, as-specified."),e.equal(Buffer.isBuffer(t),!1,"when no encoding is specified, use default encoding and process src as a string"),e.equal(typeof t,"string","when no encoding is specified, use default encoding and process src as a string"),"føø"+t+"bår"}}),e.equal(grunt.file.read(t.path),"føø"+this.string+"bår","file should be saved as properly encoded processed string."),t.unlinkSync(),t=new Tempfile,grunt.file.copy("test/fixtures/iso-8859-1.txt",t.path,{encoding:"iso-8859-1",process:function(t){return e.equal(Buffer.isBuffer(t),!1,"use specified encoding and process src as a string"),e.equal(typeof t,"string","use specified encoding and process src as a string"),"føø"+t+"bår"}}),e.equal(grunt.file.read(t.path,{encoding:"iso-8859-1"}),"føø"+this.string+"bår","file should be saved as properly encoded processed string."),t.unlinkSync(),t=new Tempfile,grunt.file.copy("test/fixtures/utf8.txt",t.path,{encoding:null,process:function(t){return e.ok(Buffer.isBuffer(t),"when encoding is specified as null, process src as a buffer"),new Buffer("føø"+(""+t)+"bår")}}),e.equal(grunt.file.read(t.path),"føø"+this.string+"bår","file should be saved as the buffer returned by process."),t.unlinkSync(),grunt.file.defaultEncoding="iso-8859-1",t=new Tempfile,grunt.file.copy("test/fixtures/iso-8859-1.txt",t.path,{process:function(t){return e.equal(Buffer.isBuffer(t),!1,"use non-utf8 default encoding and process src as a string"),e.equal(typeof t,"string","use non-utf8 default encoding and process src as a string"),"føø"+t+"bår"}}),e.equal(grunt.file.read(t.path),"føø"+this.string+"bår","file should be saved as properly encoded processed string."),t.unlinkSync(),s=path.join(tmpdir.path,"should-not-exist.txt"),grunt.file.copy("test/fixtures/iso-8859-1.txt",s,{process:function(){return!1}}),e.equal(grunt.file.exists(s),!1,"file should NOT be created if process returns false."),e.done()},"copy and process, noprocess":function(e){e.expect(4);var t;t=new Tempfile,grunt.file.copy("test/fixtures/utf8.txt",t.path,{noProcess:!0,process:function(e){return"føø"+e+"bår"}}),e.equal(grunt.file.read(t.path),this.string,"file should not have been processed."),t.unlinkSync(),["process","noprocess","othernoprocess"].forEach(function(t){var s,n=path.join(tmpdir.path,t);grunt.file.copy("test/fixtures/utf8.txt",n),s=new Tempfile,grunt.file.copy(n,s.path,{noProcess:["**/*no*"],process:function(e){return"føø"+e+"bår"}}),"process"===t?e.equal(grunt.file.read(s.path),"føø"+this.string+"bår","file should have been processed."):e.equal(grunt.file.read(s.path),this.string,"file should not have been processed."),s.unlinkSync()},this),e.done()},"delete":function(e){var t,s;e.expect(2),t=process.cwd(),s=path.resolve(tmpdir.path,"delete","folder"),grunt.file.mkdir(s),grunt.file.setBase(tmpdir.path),grunt.file.write(path.join(s,"test.js"),"var test;"),e.ok(grunt.file.delete(s),"should return true after deleting file."),e.equal(grunt.file.exists(s),!1,"file should have been deleted."),grunt.file.setBase(t),e.done()},"delete nonexistent file":function(e){e.expect(1),e.ok(!grunt.file.delete("nonexistent"),"should return false if file does not exist."),e.done()},"delete outside working directory":function(e){var t,s,n,i;e.expect(3),t=process.cwd(),s=grunt.fail.warn,grunt.fail.warn=function(){},n=path.resolve(tmpdir.path,"delete","folder"),i=path.resolve(tmpdir.path,"delete","outsidecwd"),grunt.file.mkdir(n),grunt.file.mkdir(i),grunt.file.setBase(n),grunt.file.write(path.join(i,"test.js"),"var test;"),e.equal(grunt.file.delete(path.join(i,"test.js")),!1,"should not delete anything outside the cwd."),e.ok(grunt.file.delete(path.join(i),{force:!0}),"should delete outside cwd when using the --force."),e.equal(grunt.file.exists(i),!1,"file outside cwd should have been deleted when using the --force."),grunt.file.setBase(t),grunt.fail.warn=s,e.done()},"dont delete current working directory":function(e){var t,s,n;e.expect(2),t=process.cwd(),s=grunt.fail.warn,grunt.fail.warn=function(){},n=path.resolve(tmpdir.path,"dontdelete","folder"),grunt.file.mkdir(n),grunt.file.setBase(n),e.equal(grunt.file.delete(n),!1,"should not delete the cwd."),e.ok(grunt.file.exists(n),"the cwd should exist."),grunt.file.setBase(t),grunt.fail.warn=s,e.done()},"dont actually delete with no-write option on":function(e){var t,s;e.expect(2),grunt.option("write",!1),t=process.cwd(),s=path.resolve(tmpdir.path,"dontdelete","folder"),grunt.file.mkdir(s),grunt.file.setBase(tmpdir.path),grunt.file.write(path.join(s,"test.js"),"var test;"),e.ok(grunt.file.delete(s),"should return true after not actually deleting file."),e.equal(grunt.file.exists(s),!0,"file should NOT be deleted if --no-write was specified."),grunt.file.setBase(t),e.done()},mkdir:function(e){e.expect(5),e.doesNotThrow(function(){grunt.file.mkdir(tmpdir.path)},"Should not explode if the directory already exists."),e.ok(fs.existsSync(tmpdir.path),"path should still exist."),e.doesNotThrow(function(){grunt.file.mkdir(path.join(tmpdir.path,"aa/bb/cc"))},"Should also not explode, otherwise."),e.ok(path.join(tmpdir.path,"aa/bb/cc"),"path should have been created."),fs.writeFileSync(path.join(tmpdir.path,"aa/bb/xx"),"test"),e.throws(function(){grunt.file.mkdir(path.join(tmpdir.path,"aa/bb/xx/yy"))},"Should throw if a path cannot be created (ENOTDIR)."),e.done()},recurse:function(e){var t,s,n;e.expect(1),t="test/fixtures/expand",s={},s[t+"/css/baz.css"]=[t,"css","baz.css"],s[t+"/css/qux.css"]=[t,"css","qux.css"],s[t+"/deep/deep.txt"]=[t,"deep","deep.txt"],s[t+"/deep/deeper/deeper.txt"]=[t,"deep/deeper","deeper.txt"],s[t+"/deep/deeper/deepest/deepest.txt"]=[t,"deep/deeper/deepest","deepest.txt"],s[t+"/js/bar.js"]=[t,"js","bar.js"],s[t+"/js/foo.js"]=[t,"js","foo.js"],s[t+"/README.md"]=[t,void 0,"README.md"],n={},grunt.file.recurse(t,function(e,t,s,i){n[e]=[t,s,i]}),e.deepEqual(n,s,"paths and arguments should match."),e.done()},exists:function(e){e.expect(6),e.ok(grunt.file.exists("test/fixtures/octocat.png"),"files exist."),e.ok(grunt.file.exists("test","fixtures","octocat.png"),"should work for paths in parts."),e.ok(grunt.file.exists("test/fixtures"),"directories exist."),e.ok(grunt.file.exists(path.join(tmpdir.path,"octocat.png")),"file links exist."),e.ok(grunt.file.exists(path.join(tmpdir.path,"expand")),"directory links exist."),e.equal(grunt.file.exists("test/fixtures/does/not/exist"),!1,"nonexistent files do not exist."),e.done()},isLink:function(e){e.expect(6),e.equals(grunt.file.isLink("test/fixtures/octocat.png"),!1,"files are not links."),e.equals(grunt.file.isLink("test/fixtures"),!1,"directories are not links."),e.ok(grunt.file.isLink(path.join(tmpdir.path,"octocat.png")),"file links are links."),e.ok(grunt.file.isLink(path.join(tmpdir.path,"expand")),"directory links are links."),e.ok(grunt.file.isLink(tmpdir.path,"octocat.png"),"should work for paths in parts."),e.equals(grunt.file.isLink("test/fixtures/does/not/exist"),!1,"nonexistent files are not links."),e.done()},isDir:function(e){e.expect(6),e.equals(grunt.file.isDir("test/fixtures/octocat.png"),!1,"files are not directories."),e.ok(grunt.file.isDir("test/fixtures"),"directories are directories."),e.ok(grunt.file.isDir("test","fixtures"),"should work for paths in parts."),e.equals(grunt.file.isDir(path.join(tmpdir.path,"octocat.png")),!1,"file links are not directories."),e.ok(grunt.file.isDir(path.join(tmpdir.path,"expand")),"directory links are directories."),e.equals(grunt.file.isDir("test/fixtures/does/not/exist"),!1,"nonexistent files are not directories."),e.done()},isFile:function(e){e.expect(6),e.ok(grunt.file.isFile("test/fixtures/octocat.png"),"files are files."),e.ok(grunt.file.isFile("test","fixtures","octocat.png"),"should work for paths in parts."),e.equals(grunt.file.isFile("test/fixtures"),!1,"directories are not files."),e.ok(grunt.file.isFile(path.join(tmpdir.path,"octocat.png")),"file links are files."),e.equals(grunt.file.isFile(path.join(tmpdir.path,"expand")),!1,"directory links are not files."),e.equals(grunt.file.isFile("test/fixtures/does/not/exist"),!1,"nonexistent files are not files."),e.done()},isPathAbsolute:function(e){e.expect(5),e.ok(grunt.file.isPathAbsolute(path.resolve("/foo")),"should return true"),e.ok(grunt.file.isPathAbsolute(path.resolve("/foo")+path.sep),"should return true"),e.equal(grunt.file.isPathAbsolute("foo"),!1,"should return false"),e.ok(grunt.file.isPathAbsolute(path.resolve("test/fixtures/a.js")),"should return true"),e.equal(grunt.file.isPathAbsolute("test/fixtures/a.js"),!1,"should return false"),e.done()},arePathsEquivalent:function(e){e.expect(5),e.ok(grunt.file.arePathsEquivalent("/foo"),"should return true"),e.ok(grunt.file.arePathsEquivalent("/foo","/foo/","/foo/../foo/"),"should return true"),e.ok(grunt.file.arePathsEquivalent(process.cwd(),".","./","test/.."),"should return true"),e.equal(grunt.file.arePathsEquivalent(process.cwd(),".."),!1,"should return false"),e.equal(grunt.file.arePathsEquivalent(".",".."),!1,"should return false"),e.done()},doesPathContain:function(e){e.expect(6),e.ok(grunt.file.doesPathContain("/foo","/foo/bar"),"should return true"),e.ok(grunt.file.doesPathContain("/foo/","/foo/bar/baz","/foo/bar","/foo/whatever"),"should return true"),e.equal(grunt.file.doesPathContain("/foo","/foo"),!1,"should return false"),e.equal(grunt.file.doesPathContain("/foo/xyz","/foo/xyz/123","/foo/bar/baz"),!1,"should return false"),e.equal(grunt.file.doesPathContain("/foo/xyz","/foo"),!1,"should return false"),e.ok(grunt.file.doesPathContain(process.cwd(),"test","test/fixtures","lib"),"should return true"),e.done()},isPathCwd:function(e){e.expect(8),e.ok(grunt.file.isPathCwd(process.cwd()),"cwd is cwd"),e.ok(grunt.file.isPathCwd("."),"cwd is cwd"),e.equal(grunt.file.isPathCwd("test"),!1,"subdirectory is not cwd"),e.equal(grunt.file.isPathCwd(path.resolve("test")),!1,"subdirectory is not cwd"),e.equal(grunt.file.isPathCwd(".."),!1,"parent is not cwd"),e.equal(grunt.file.isPathCwd(path.resolve("..")),!1,"parent is not cwd"),e.equal(grunt.file.isPathCwd("/"),!1,"root is not cwd (I hope)"),e.equal(grunt.file.isPathCwd("nonexistent"),!1,"nonexistent path is not cwd"),e.done()},isPathInCwd:function(e){e.expect(8),e.equal(grunt.file.isPathInCwd(process.cwd()),!1,"cwd is not IN cwd"),e.equal(grunt.file.isPathInCwd("."),!1,"cwd is not IN cwd"),e.ok(grunt.file.isPathInCwd("test"),"subdirectory is in cwd"),e.ok(grunt.file.isPathInCwd(path.resolve("test")),"subdirectory is in cwd"),e.equal(grunt.file.isPathInCwd(".."),!1,"parent is not in cwd"),e.equal(grunt.file.isPathInCwd(path.resolve("..")),!1,"parent is not in cwd"),e.equal(grunt.file.isPathInCwd("/"),!1,"root is not in cwd (I hope)"),e.equal(grunt.file.isPathInCwd("nonexistent"),!1,"nonexistent path is not in cwd"),e.done()}};