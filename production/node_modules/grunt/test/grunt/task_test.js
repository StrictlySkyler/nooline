"use strict";var grunt=null;exports["task.normalizeMultiTaskFiles"]={setUp:function(s){this.cwd=process.cwd(),process.chdir("test/fixtures/files"),s()},tearDown:function(s){process.chdir(this.cwd),s()},normalize:function(s){var i,e,t,r,l;s.expect(7),l=grunt.util._.flatten,t="dist/built.js",r="src/*1.js",i=grunt.task.normalizeMultiTaskFiles(r,t),e=[{dest:"dist/built.js",src:["src/file1.js"],orig:{dest:t,src:[r]}}],s.deepEqual(i,e,"should normalize destTarget: srcString."),t="dist/built.js",r=[["src/*1.js"],["src/*2.js"]],i=grunt.task.normalizeMultiTaskFiles(r,t),e=[{dest:"dist/built.js",src:["src/file1.js","src/file2.js"],orig:{dest:t,src:l(r)}}],s.deepEqual(i,e,"should normalize destTarget: srcArray."),r={src:["src/*1.js","src/*2.js"],dest:"dist/built.js"},i=grunt.task.normalizeMultiTaskFiles(r,"ignored"),e=[{dest:"dist/built.js",src:["src/file1.js","src/file2.js"],orig:r}],s.deepEqual(i,e,"should normalize target: {src: srcStuff, dest: destStuff}."),r={files:{"dist/built-a.js":"src/*1.js","dist/built-b.js":["src/*1.js",[["src/*2.js"]]]}},i=grunt.task.normalizeMultiTaskFiles(r,"ignored"),e=[{dest:"dist/built-a.js",src:["src/file1.js"],orig:{dest:"dist/built-a.js",src:[r.files["dist/built-a.js"]]}},{dest:"dist/built-b.js",src:["src/file1.js","src/file2.js"],orig:{dest:"dist/built-b.js",src:l(r.files["dist/built-b.js"])}}],s.deepEqual(i,e,"should normalize target: {files: {destTarget: srcStuff, ...}}."),r={files:[{"dist/built-a.js":"src/*.whoops"},{"dist/built-b.js":[[["src/*1.js"],"src/*2.js"]]}]},i=grunt.task.normalizeMultiTaskFiles(r,"ignored"),e=[{dest:"dist/built-a.js",src:[],orig:{dest:Object.keys(r.files[0])[0],src:[r.files[0]["dist/built-a.js"]]}},{dest:"dist/built-b.js",src:["src/file1.js","src/file2.js"],orig:{dest:Object.keys(r.files[1])[0],src:l(r.files[1]["dist/built-b.js"])}}],s.deepEqual(i,e,"should normalize target: {files: [{destTarget: srcStuff}, ...]}."),r={files:[{dest:"dist/built-a.js",src:["src/*2.js"]},{dest:"dist/built-b.js",src:["src/*1.js","src/*2.js"]}]},i=grunt.task.normalizeMultiTaskFiles(r,"ignored"),e=[{dest:"dist/built-a.js",src:["src/file2.js"],orig:r.files[0]},{dest:"dist/built-b.js",src:["src/file1.js","src/file2.js"],orig:r.files[1]}],s.deepEqual(i,e,"should normalize target: {files: [{src: srcStuff, dest: destStuff}, ...]}."),r={files:[{dest:"dist/built-a.js",src:["src/*2.js"],foo:123,bar:!0},{dest:"dist/built-b.js",src:["src/*1.js","src/*2.js"],foo:456,bar:null}]},i=grunt.task.normalizeMultiTaskFiles(r,"ignored"),e=[{dest:"dist/built-a.js",src:["src/file2.js"],foo:123,bar:!0,orig:r.files[0]},{dest:"dist/built-b.js",src:["src/file1.js","src/file2.js"],foo:456,bar:null,orig:r.files[1]}],s.deepEqual(i,e,"should propagate extra properties."),s.done()},nonull:function(s){s.expect(2);var i,e,t;t={src:["src/xxx*.js","src/yyy*.js"],dest:"dist/built.js"},i=grunt.task.normalizeMultiTaskFiles(t,"ignored"),e=[{dest:t.dest,src:[],orig:t}],s.deepEqual(i,e,"if nonull is not set, should not include non-matching patterns."),t={src:["src/xxx*.js","src/yyy*.js"],dest:"dist/built.js",nonull:!0},i=grunt.task.normalizeMultiTaskFiles(t,"ignored"),e=[{dest:t.dest,src:t.src,nonull:!0,orig:t}],s.deepEqual(i,e,"if nonull is set, should include non-matching patterns."),s.done()},expandMapping:function(s){s.expect(3);var i,e,t;t={files:[{dest:"dist/",src:["src/file?.js"],expand:!0},{dest:"dist/",src:["file?.js"],expand:!0,cwd:"src"}]},i=grunt.task.normalizeMultiTaskFiles(t,"ignored"),e=[{dest:"dist/src/file1.js",src:["src/file1.js"],orig:t.files[0]},{dest:"dist/src/file2.js",src:["src/file2.js"],orig:t.files[0]},{dest:"dist/file1.js",src:["src/file1.js"],orig:t.files[1]},{dest:"dist/file2.js",src:["src/file2.js"],orig:t.files[1]}],s.deepEqual(i,e,"expand to file mapping, removing cwd from destination paths."),t={files:[{dest:"dist/",src:["src/file?.js"],expand:!0,flatten:!0}]},i=grunt.task.normalizeMultiTaskFiles(t,"ignored"),e=[{dest:"dist/file1.js",src:["src/file1.js"],orig:t.files[0]},{dest:"dist/file2.js",src:["src/file2.js"],orig:t.files[0]}],s.deepEqual(i,e,"expand to file mapping, flattening destination paths."),t={files:[{dest:"dist/",src:["src/file?.js"],expand:!0,rename:function(s,i){return s+"min/"+i.replace(/(\.js)$/,".min$1")}}]},i=grunt.task.normalizeMultiTaskFiles(t,"ignored"),e=[{dest:"dist/min/src/file1.min.js",src:["src/file1.js"],orig:t.files[0]},{dest:"dist/min/src/file2.min.js",src:["src/file2.js"],orig:t.files[0]}],s.deepEqual(i,e,"expand to file mapping, renaming files."),s.done()}};