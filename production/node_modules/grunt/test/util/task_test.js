"use strict";function delay(s){setTimeout(s,10)}var result=function(){var s,e=function(){[].push.apply(s,arguments)};return{reset:function(){s=[]},push:e,pushTaskname:function(){e(this.name)},get:function(){return s},getJoined:function(){return s.join("")}}}(),requireTask=require.bind(exports,"../../lib/util/task.js");exports["new Task"]={create:function(s){s.expect(1);var e=requireTask();s.ok(e.create()instanceof e.Task,"It should return a Task instance."),s.done()}},exports.Tasks={setUp:function(s){result.reset(),this.task=requireTask().create();var e=this.task;e.registerTask("nothing","Do nothing.",function(){}),s()},"Task#registerTask":function(s){s.expect(1);var e=this.task;s.ok("nothing"in e._tasks,"It should register the passed task."),s.done()},"Task#registerTask (alias)":function(s){s.expect(1);var e=this.task;e.registerTask("a","Push task name onto result.",result.pushTaskname),e.registerTask("b","Push task name onto result.",result.pushTaskname),e.registerTask("c d","Push task name onto result.",result.pushTaskname),e.registerTask("y",["a","b","c d"]),e.registerTask("z",["a","b","nonexistent","c d"]),e.options({error:function(){result.push("!"+this.name)},done:function(){s.strictEqual(result.getJoined(),"abc d!z","The specified tasks should have run, in-order."),s.done()}}),e.run("y","z").start()},"Task#isTaskAlias":function(s){s.expect(2);var e=this.task;e.registerTask("a","nothing",function(){}),e.registerTask("b",["a"]),s.strictEqual(e.isTaskAlias("a"),!1,"It should not be an alias."),s.strictEqual(e.isTaskAlias("b"),!0,"It should be an alias."),s.done()},"Task#renameTask":function(s){s.expect(4);var e=this.task;e.renameTask("nothing","newnothing"),s.ok("newnothing"in e._tasks,"It should rename the specified task."),s.equal("nothing"in e._tasks,!1,"It should remove the previous task."),s.doesNotThrow(function(){e.run("newnothing")},"It should be accessible by its new name."),s.throws(function(){e.run("nothing")},"It should not be accessible by its previous name and throw an exception."),s.done()},"Task#run (exception handling)":function(s){s.expect(4);var e=this.task;s.doesNotThrow(function(){e.run("nothing")},"Registered tasks should be runnable."),s.throws(function(){e.run("nonexistent")},"Attempting to run unregistered tasks should throw an exception."),e.options({error:result.pushTaskname}),s.doesNotThrow(function(){e.run("nonexistent")},"It should not throw an exception because an error handler is defined."),s.deepEqual(result.get(),[null],"Non-nested tasks have a null name."),s.done()},"Task#run (async failing)":function(s){var e,a;s.expect(1),e=this.task,a=[],e.registerTask("sync1","sync, gonna succeed",function(){}),e.registerTask("sync2","sync, gonna fail",function(){return!1}),e.registerTask("sync3","sync, gonna fail",function(){return Error("sync3: Error")}),e.registerTask("sync4","sync, gonna fail",function(){return new TypeError("sync4: TypeError")}),e.registerTask("sync5","sync, gonna fail",function(){throw Error("sync5: Error")}),e.registerTask("sync6","sync, gonna fail",function(){throw new TypeError("sync6: TypeError")}),e.registerTask("syncs",["sync1","sync2","sync3","sync4","sync5","sync6"]),e.registerTask("async1","async, gonna succeed",function(){var s=this.async();setTimeout(function(){s()},1)}),e.registerTask("async2","async, gonna fail",function(){var s=this.async();setTimeout(function(){s(!1)},1)}),e.registerTask("async3","async, gonna fail",function(){var s=this.async();setTimeout(function(){s(Error("async3: Error"))},1)}),e.registerTask("async4","async, gonna fail",function(){var s=this.async();setTimeout(function(){s(new TypeError("async4: TypeError"))},1)}),e.registerTask("asyncs",["async1","async2","async3","async4"]),e.options({error:function(s){a.push({name:s.name,message:s.message})},done:function(){s.deepEqual(a,[{name:"Error",message:'Task "sync2" failed.'},{name:"Error",message:"sync3: Error"},{name:"TypeError",message:"sync4: TypeError"},{name:"Error",message:"sync5: Error"},{name:"TypeError",message:"sync6: TypeError"},{name:"Error",message:'Task "async2" failed.'},{name:"Error",message:"async3: Error"},{name:"TypeError",message:"async4: TypeError"}],"The specified tasks should have run, in-order."),s.done()}}),e.run("syncs","asyncs").start()},"Task#run (nested, exception handling)":function(s){s.expect(2);var e=this.task;e.registerTask("yay","Run a registered task.",function(){s.doesNotThrow(function(){e.run("nothing")},"Registered tasks should be runnable.")}),e.registerTask("nay","Attempt to run an unregistered task.",function(){s.throws(function(){e.run("nonexistent")},"Attempting to run unregistered tasks should throw an exception.")}),e.options({done:s.done}),e.run("yay","nay").start()},"Task#run (signatures, queue order)":function(s){s.expect(1);var e=this.task;e.registerTask("a","Push task name onto result.",result.pushTaskname),e.registerTask("b","Push task name onto result.",result.pushTaskname),e.registerTask("c","Push task name onto result.",result.pushTaskname),e.registerTask("d","Push task name onto result.",result.pushTaskname),e.registerTask("e","Push task name onto result.",result.pushTaskname),e.registerTask("f g","Push task name onto result.",result.pushTaskname),e.options({done:function(){s.strictEqual(result.getJoined(),"abcdef g","The specified tasks should have run, in-order."),s.done()}}),e.run("a").run("b","c").run(["d","e"]).run("f g").start()},"Task#run (colon separated arguments)":function(s){s.expect(1);var e=this.task;e.registerTask("a","Push task name and args onto result.",function(s,e){result.push([this.nameArgs,1,this.name,s,e])}),e.registerTask("a:b","Push task name and args onto result.",function(s,e){result.push([this.nameArgs,2,this.name,s,e])}),e.registerTask("a:b:c","Push task name and args onto result.",function(s,e){result.push([this.nameArgs,3,this.name,s,e])}),e.options({done:function(){s.deepEqual(result.get(),[["a",1,"a",void 0,void 0],["a:x",1,"a","x",void 0],["a:x:c",1,"a","x","c"],["a:b ",1,"a","b ",void 0],["a: b:c",1,"a"," b","c"],["a:x\\:y:\\:z\\:",1,"a","x:y",":z:"],["a:b",2,"a:b",void 0,void 0],["a:b:x",2,"a:b","x",void 0],["a:b:x:y",2,"a:b","x","y"],["a:b:c ",2,"a:b","c ",void 0],["a:b:x\\:y:\\:z\\:",2,"a:b","x:y",":z:"],["a:b:c",3,"a:b:c",void 0,void 0],["a:b:c: d",3,"a:b:c"," d",void 0]],"Named tasks should be called as-specified if possible, and arguments should be passed properly."),s.done()}}),e.run("a","a:x","a:x:c","a:b ","a: b:c","a:x\\:y:\\:z\\:","a:b","a:b:x","a:b:x:y","a:b:c ","a:b:x\\:y:\\:z\\:","a:b:c","a:b:c: d").start()},"Task#run (nested tasks, queue order)":function(s){s.expect(1);var e=this.task;e.registerTask("a","Push task name onto result and run other tasks.",function(){result.push(this.name),e.run("b","e")}),e.registerTask("b","Push task name onto result and run other tasks.",function(){result.push(this.name),e.run("c","d d")}),e.registerTask("c","Push task name onto result.",result.pushTaskname),e.registerTask("d d","Push task name onto result.",result.pushTaskname),e.registerTask("e","Push task name onto result and run other tasks.",function(){result.push(this.name),e.run("f f")}),e.registerTask("f f","Push task name onto result.",result.pushTaskname),e.registerTask("g","Push task name onto result.",result.pushTaskname),e.options({done:function(){s.strictEqual(result.getJoined(),"abcd def fg","The specified tasks should have run, in-order."),s.done()}}),e.run("a","g").start()},"Task#run (async, nested tasks, queue order)":function(s){s.expect(1);var e=this.task;e.registerTask("a","Push task name onto result and run other tasks.",function(){result.push(this.name),e.run("b","e"),delay(this.async())}),e.registerTask("b","Push task name onto result and run other tasks.",function(){result.push(this.name),delay(this.async()),e.run("c","d d")}),e.registerTask("c","Push task name onto result.",result.pushTaskname),e.registerTask("d d","Push task name onto result.",result.pushTaskname),e.registerTask("e","Push task name onto result and run other tasks.",function(){delay(this.async()),result.push(this.name),e.run("f f")}),e.registerTask("f f","Push task name onto result and run other tasks.",function(){this.async()(),result.push(this.name),e.run("g")}),e.registerTask("g","Push task name onto result.",result.pushTaskname),e.registerTask("h","Push task name onto result.",result.pushTaskname),e.options({done:function(){s.strictEqual(result.getJoined(),"abcd def fgh","The specified tasks should have run, in-order."),s.done()}}),e.run("a","h").start()},"Task#current":function(s){s.expect(8);var e=this.task;s.deepEqual(e.current,{},"Should start empty."),e.registerTask("a","Sample task.",function(){s.equal(e.current,this,"This and task.current should be the same object."),s.equal(e.current.nameArgs,"a:b:c","Should be task name + args, as-specified."),s.equal(e.current.name,"a","Should be just the task name, no args."),s.equal(typeof e.current.async,"function","Should be a function."),s.deepEqual(e.current.args,["b","c"],"Should be an array of args."),s.deepEqual(e.current.flags,{b:!0,c:!0},"Should be a map of flags.")}),e.options({done:function(){s.deepEqual(e.current,{},"Should be empty again once tasks are done."),s.done()}}),e.run("a:b:c").start()},"Task#clearQueue":function(s){s.expect(1);var e=this.task;e.registerTask("a","Push task name onto result.",result.pushTaskname),e.registerTask("b","Push task name onto result.",result.pushTaskname),e.registerTask("c","Clear the queue.",function(){result.push(this.name),e.clearQueue().run("f")}),e.registerTask("d","Push task name onto result.",result.pushTaskname),e.registerTask("e","Push task name onto result.",result.pushTaskname),e.registerTask("f","Push task name onto result.",result.pushTaskname),e.options({done:function(){s.strictEqual(result.getJoined(),"abcf","The specified tasks should have run, in-order."),s.done()}}),e.run("a","b","c","d","e").start()},"Task#mark":function(s){s.expect(1);var e=this.task;e.registerTask("a","Explode.",function(){throw e.taskError("whoops.")}),e.registerTask("b","This task should never run.",result.pushTaskname),e.registerTask("c","This task should never run.",result.pushTaskname),e.registerTask("d","Push task name onto result.",result.pushTaskname),e.registerTask("e","Explode.",function(){throw e.taskError("whoops.")}),e.registerTask("f","This task should never run.",result.pushTaskname),e.registerTask("g","Push task name onto result.",result.pushTaskname),e.registerTask("h","Push task name onto result.",result.pushTaskname),e.registerTask("i","Explode.",function(){throw e.taskError("whoops.")}),e.registerTask("j","Run a task and push task name onto result.",function(){e.run("k"),result.push(this.name)}),e.registerTask("k","Explode.",function(){throw e.taskError("whoops.")}),e.registerTask("l","This task should never run.",result.pushTaskname),e.registerTask("m","Push task name onto result.",result.pushTaskname),e.registerTask("n","Run a task and push task name onto result.",function(){e.run("o"),result.push(this.name)}),e.registerTask("o","Explode.",function(){throw e.taskError("whoops.")}),e.registerTask("p","Push task name onto result.",result.pushTaskname),e.options({error:function(){result.push("!"+this.name),e.clearQueue({untilMarker:!0})},done:function(){s.strictEqual(result.getJoined(),"!ad!egh!ij!kmn!op","The specified tasks should have run, in-order."),s.done()}}),e.run("a","b","c").mark().run("d","e","f").mark().run("g","h","i").mark().run("j","l").mark().run("m","n").mark().run("p").mark().start()},"Task#requires":function(s){s.expect(1);var e=this.task;e.registerTask("notrun","This task is never run.",function(){}),e.registerTask("a a","Push task name onto result, but fail.",function(){return result.push(this.name),!1}),e.registerTask("b","Push task name onto result, but fail.",function(){var s=this.async();delay(function(){s(!1)}),result.push(this.name)}),e.registerTask("c","Succeed.",result.pushTaskname),e.registerTask("d","Succeed.",result.pushTaskname),e.registerTask("e","Succeed because all required tasks ran and succeeded.",function(){e.requires("c","d"),result.push(this.name)}),e.registerTask("x","Fail because a required task never ran.",function(){e.requires("c","notrun","d"),result.push(this.name)}),e.registerTask("y","Fail because a synchronous required task has failed.",function(){e.requires("a a","c","d"),result.push(this.name)}),e.registerTask("z","Fail because an asynchronous required task has failed.",function(){e.requires("b","c","d"),result.push(this.name)}),e.options({error:function(){result.push("!"+this.name)},done:function(){s.strictEqual(result.getJoined(),"a a!a ab!bcde!x!y!z","Tasks whose requirements have failed or are missing should not run."),s.done()}}),e.run("a a","b","c","d","e","x","y","z").start()}},exports["Task#parseArgs"]={setUp:function(s){var e=requireTask().create();this.parseTest=function(){return e.parseArgs(arguments)},s()},arguments:function(s){s.expect(4),s.deepEqual(this.parseTest("foo bar"),["foo bar"],"single argument should be converted to array."),s.deepEqual(this.parseTest("foo bar: aa : bb "),["foo bar: aa : bb "],"single argument should be converted to array."),s.deepEqual(this.parseTest("foo bar","baz","test 1 2 3"),["foo bar","baz","test 1 2 3"],"arguments should be converted to array."),s.deepEqual(this.parseTest("foo bar","baz:x y z","test 1 2 3: 4 : 5"),["foo bar","baz:x y z","test 1 2 3: 4 : 5"],"arguments should be converted to array."),s.done()},array:function(s){s.expect(1),s.deepEqual(this.parseTest(["foo bar","baz:x y z","test 1 2 3: 4 : 5"]),["foo bar","baz:x y z","test 1 2 3: 4 : 5"],"passed array should be used."),s.done()},object:function(s){s.expect(1);var e={};s.deepEqual(this.parseTest(e),[e],"single object should be returned as array."),s.done()},nothing:function(s){s.expect(1),s.deepEqual(this.parseTest(),[],"should return an empty array if nothing passed."),s.done()}},exports["Task#splitArgs"]={setUp:function(s){this.task=requireTask().create(),s()},arguments:function(s){s.expect(9);var e=this.task;s.deepEqual(e.splitArgs(),[],"missing items = empty array."),s.deepEqual(e.splitArgs(""),[],"missing items = empty array."),s.deepEqual(e.splitArgs("a"),["a"],"single item should be parsed."),s.deepEqual(e.splitArgs("a:b:c"),["a","b","c"],"mutliple items should be parsed."),s.deepEqual(e.splitArgs("a::c"),["a","","c"],"missing items should be parsed."),s.deepEqual(e.splitArgs("::"),["","",""],"missing items should be parsed."),s.deepEqual(e.splitArgs("\\:a:\\:b\\::c\\:"),[":a",":b:","c:"],"escaped colons should be unescaped."),s.deepEqual(e.splitArgs("a\\\\:b\\\\:c"),["a\\","b\\","c"],"escaped backslashes should not be parsed."),s.deepEqual(e.splitArgs("\\:a\\\\:\\\\\\:b\\:\\\\:c\\\\\\:\\\\"),[":a\\","\\:b:\\","c\\:\\"],"please avoid doing this, ok?"),s.done()}};