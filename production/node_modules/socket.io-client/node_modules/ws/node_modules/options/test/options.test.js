var Options=null,assert=null;describe("Options",function(){describe("#ctor",function(){it("initializes options",function(){var e=new Options({a:!0,b:!1});assert.strictEqual(!0,e.value.a),assert.strictEqual(!1,e.value.b)})}),describe("#merge",function(){it("merges options from another object",function(){var e=new Options({a:!0,b:!1});e.merge({b:!0}),assert.strictEqual(!0,e.value.a),assert.strictEqual(!0,e.value.b)}),it("does nothing when arguments are undefined",function(){var e=new Options({a:!0,b:!1});e.merge(void 0),assert.strictEqual(!0,e.value.a),assert.strictEqual(!1,e.value.b)}),it("cannot set values that werent already there",function(){var e=new Options({a:!0,b:!1});e.merge({c:!0}),assert.strictEqual("undefined",typeof e.value.c)}),it("can require certain options to be defined",function(){var e=new Options({a:!0,b:!1,c:3}),t=!1;try{e.merge({},["a","b","c"])}catch(a){t="Error: options a, b and c must be defined"==""+a}assert.strictEqual(!0,t)}),it("can require certain options to be defined, when options are undefined",function(){var e=new Options({a:!0,b:!1,c:3}),t=!1;try{e.merge(void 0,["a","b","c"])}catch(a){t="Error: options a, b and c must be defined"==""+a}assert.strictEqual(!0,t)}),it('returns "this"',function(){var e=new Options({a:!0,b:!1,c:3});assert.strictEqual(e,e.merge())})}),describe("#copy",function(){it("returns a new object with the indicated options",function(){var e,t=new Options({a:!0,b:!1,c:3});t.merge({c:4}),e=t.copy(["a","c"]),assert.strictEqual(!0,e.a),assert.strictEqual(4,e.c),assert.strictEqual("undefined",typeof e.b)})}),describe("#value",function(){it("can be enumerated",function(){var e=new Options({a:!0,b:!1});assert.strictEqual(2,Object.keys(e.value).length)}),it("can not be used to set values",function(){var e=new Options({a:!0,b:!1});e.value.b=!0,assert.strictEqual(!1,e.value.b)}),it("can not be used to add values",function(){var e=new Options({a:!0,b:!1});e.value.c=3,assert.strictEqual("undefined",typeof e.value.c)})}),describe("#isDefined",function(){it("returns true if the named value is defined",function(){var e=new Options({a:void 0});assert.strictEqual(!1,e.isDefined("a")),e.merge({a:!1}),assert.strictEqual(!0,e.isDefined("a"))})}),describe("#isDefinedAndNonNull",function(){it("returns true if the named value is defined and non-null",function(){var e=new Options({a:void 0});assert.strictEqual(!1,e.isDefinedAndNonNull("a")),e.merge({a:null}),assert.strictEqual(!1,e.isDefinedAndNonNull("a")),e.merge({a:2}),assert.strictEqual(!0,e.isDefinedAndNonNull("a"))})}),describe("#read",function(){it("reads and merges config from a file",function(){var e=new Options({a:!0,b:!0});e.read(__dirname+"/fixtures/test.conf"),assert.strictEqual("foobar",e.value.a),assert.strictEqual(!1,e.value.b)}),it("asynchronously reads and merges config from a file when a callback is passed",function(e){var t=new Options({a:!0,b:!0});t.read(__dirname+"/fixtures/test.conf",function(){assert.strictEqual("foobar",t.value.a),assert.strictEqual(!1,t.value.b),e()})})}),describe("#reset",function(){it("resets options to defaults",function(){var e=new Options({a:!0,b:!1});e.merge({b:!0}),assert.strictEqual(!0,e.value.b),e.reset(),assert.strictEqual(!1,e.value.b)})}),it("is immutable",function(){var e=new Options({a:!0,b:!1});e.foo=2,assert.strictEqual("undefined",typeof e.foo)})});