var BufferPool=null;describe("BufferPool",function(){describe("#ctor",function(){it("allocates pool",function(){var e=new BufferPool(1e3);e.size.should.eql(1e3)})}),describe("#get",function(){it("grows the pool if necessary",function(){var e=new BufferPool(1e3),o=e.get(2e3);e.size.should.be.above(1e3),e.used.should.eql(2e3),o.length.should.eql(2e3)}),it("grows the pool after the first call, if necessary",function(){var e,o=new BufferPool(1e3),t=o.get(1e3);o.used.should.eql(1e3),o.size.should.eql(1e3),t.length.should.eql(1e3),e=o.get(1e3),o.used.should.eql(2e3),o.size.should.be.above(1e3),e.length.should.eql(1e3)}),it("grows the pool according to the growStrategy if necessary",function(){var e=new BufferPool(1e3,function(e){return e.size+2345}),o=e.get(2e3);e.size.should.eql(3345),o.length.should.eql(2e3)}),it("doesnt grow the pool if theres enough room available",function(){var e=new BufferPool(1e3),o=e.get(1e3);e.size.should.eql(1e3),o.length.should.eql(1e3)})}),describe("#reset",function(){it("shinks the pool",function(){var e=new BufferPool(1e3);e.get(2e3),e.reset(!0),e.size.should.eql(1e3)}),it("shrinks the pool according to the shrinkStrategy",function(){var e=new BufferPool(1e3,function(e,o){return e.used+o},function(){return 0});e.get(2e3),e.reset(!0),e.size.should.eql(0)})})});