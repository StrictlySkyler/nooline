function getArrayBuffer(e){var t,o=e.length,n=new ArrayBuffer(o),r=new Uint8Array(n);for(t=0;o>t;t++)r[t]=e[t];return r.buffer}function areArraysEqual(e,t){if(e.length!=t.length)return!1;for(var o=0,n=e.length;n>o;++o)if(e[o]!==t[o])return!1;return!0}var assert=null,https=null,http=null,should=null,WebSocket=null,WebSocketServer=null.Server,fs=null,server=null,crypto=null,port=2e4;describe("WebSocket",function(){describe("#ctor",function(){it("throws exception for invalid url",function(e){try{new WebSocket("echo.websocket.org")}catch(t){e()}})}),describe("options",function(){it("should accept an `agent` option",function(e){var t=new WebSocketServer({port:++port},function(){var o={addRequest:function(){t.close(),e()}};new WebSocket("ws://localhost:"+port,{agent:o})})}),it("should accept the `options` object as the 3rd argument",function(e){var t=new WebSocketServer({port:++port},function(){var o={addRequest:function(){t.close(),e()}};new WebSocket("ws://localhost:"+port,[],{agent:o})})})}),describe("properties",function(){it("#bytesReceived exposes number of bytes received",function(e){var t=new WebSocketServer({port:++port},function(){var o=new WebSocket("ws://localhost:"+port);o.on("message",function(){o.bytesReceived.should.eql(8),t.close(),e()})});t.on("connection",function(e){e.send("foobar")})}),it("#url exposes the server url",function(e){server.createServer(++port,function(t){var o="ws://localhost:"+port,n=new WebSocket(o);assert.equal(o,n.url),n.terminate(),n.on("close",function(){t.close(),e()})})}),it("#protocolVersion exposes the protocol version",function(e){server.createServer(++port,function(t){var o="ws://localhost:"+port,n=new WebSocket(o);assert.equal(13,n.protocolVersion),n.terminate(),n.on("close",function(){t.close(),e()})})}),describe("#bufferedAmount",function(){it("defaults to zero",function(e){server.createServer(++port,function(t){var o="ws://localhost:"+port,n=new WebSocket(o);assert.equal(0,n.bufferedAmount),n.terminate(),n.on("close",function(){t.close(),e()})})}),it('defaults to zero upon "open"',function(e){server.createServer(++port,function(t){var o="ws://localhost:"+port,n=new WebSocket(o);n.onopen=function(){assert.equal(0,n.bufferedAmount),n.terminate(),n.on("close",function(){t.close(),e()})}})}),it("stress kernel write buffer",function(e){var t=new WebSocketServer({port:++port},function(){new WebSocket("ws://localhost:"+port)});t.on("connection",function(o){for(;;){if(o.bufferedAmount>0)break;o.send(Array(1e4).join("hello"))}o.terminate(),o.on("close",function(){t.close(),e()})})})}),describe("Custom headers",function(){it("request has an authorization header",function(e){var t,o="test:testpass",n=http.createServer(function(){}),r=new WebSocketServer({server:n});n.listen(++port),t=new WebSocket("ws://"+o+"@localhost:"+port),n.on("upgrade",function(s){assert(s.headers.authorization,"auth header exists"),assert.equal(s.headers.authorization,"Basic "+new Buffer(o).toString("base64")),t.terminate(),t.on("close",function(){n.close(),r.close(),e()})})}),it("accepts custom headers",function(e){var t,o=http.createServer(function(){}),n=new WebSocketServer({server:o});o.listen(++port),t=new WebSocket("ws://localhost:"+port,{headers:{Cookie:"foo=bar"}}),o.on("upgrade",function(r){assert(r.headers.cookie,"auth header exists"),assert.equal(r.headers.cookie,"foo=bar"),t.terminate(),t.on("close",function(){o.close(),n.close(),e()})})})}),describe("#readyState",function(){it("defaults to connecting",function(e){server.createServer(++port,function(t){var o=new WebSocket("ws://localhost:"+port);assert.equal(WebSocket.CONNECTING,o.readyState),o.terminate(),o.on("close",function(){t.close(),e()})})}),it("set to open once connection is established",function(e){server.createServer(++port,function(t){var o=new WebSocket("ws://localhost:"+port);o.on("open",function(){assert.equal(WebSocket.OPEN,o.readyState),t.close(),e()})})}),it("set to closed once connection is closed",function(e){server.createServer(++port,function(t){var o=new WebSocket("ws://localhost:"+port);o.close(1001),o.on("close",function(){assert.equal(WebSocket.CLOSED,o.readyState),t.close(),e()})})}),it("set to closed once connection is terminated",function(e){server.createServer(++port,function(t){var o=new WebSocket("ws://localhost:"+port);o.terminate(),o.on("close",function(){assert.equal(WebSocket.CLOSED,o.readyState),t.close(),e()})})})});var e={CONNECTING:0,OPEN:1,CLOSING:2,CLOSED:3};Object.keys(e).forEach(function(t){describe("."+t,function(){it("is enumerable property of class",function(){var o=Object.getOwnPropertyDescriptor(WebSocket,t);assert.equal(e[t],o.value),assert.equal(!0,o.enumerable)})})}),server.createServer(++port,function(){var t=new WebSocket("ws://localhost:"+port);Object.keys(e).forEach(function(o){describe("."+o,function(){it("is property of instance",function(){assert.equal(e[o],t[o])})})})})}),describe("events",function(){it("emits a ping event",function(e){var t,o=new WebSocketServer({port:++port});o.on("connection",function(e){e.ping()}),t=new WebSocket("ws://localhost:"+port),t.on("ping",function(){t.terminate(),o.close(),e()})}),it("emits a pong event",function(e){var t,o=new WebSocketServer({port:++port});o.on("connection",function(e){e.pong()}),t=new WebSocket("ws://localhost:"+port),t.on("pong",function(){t.terminate(),o.close(),e()})})}),describe("connection establishing",function(){it("can disconnect before connection is established",function(e){server.createServer(++port,function(t){var o=new WebSocket("ws://localhost:"+port);o.terminate(),o.on("open",function(){assert.fail("connect shouldnt be raised here")}),o.on("close",function(){t.close(),e()})})}),it("can close before connection is established",function(e){server.createServer(++port,function(t){var o=new WebSocket("ws://localhost:"+port);o.close(1001),o.on("open",function(){assert.fail("connect shouldnt be raised here")}),o.on("close",function(){t.close(),e()})})}),it("invalid server key is denied",function(e){server.createServer(++port,server.handlers.invalidKey,function(t){var o=new WebSocket("ws://localhost:"+port);o.on("error",function(){t.close(),e()})})}),it("close event is raised when server closes connection",function(e){server.createServer(++port,server.handlers.closeAfterConnect,function(t){var o=new WebSocket("ws://localhost:"+port);o.on("close",function(){t.close(),e()})})}),it("error is emitted if server aborts connection",function(e){server.createServer(++port,server.handlers.return401,function(t){var o=new WebSocket("ws://localhost:"+port);o.on("open",function(){assert.fail("connect shouldnt be raised here")}),o.on("error",function(){t.close(),e()})})})}),describe("#pause and #resume",function(){it("pauses the underlying stream",function(e){function t(){if(2==++r){var t=!0;n.on("message",function(){t.should.not.be.ok,s.close(),e()}),n.pause(),setTimeout(function(){t=!1,n.resume()},200),o.send("foo")}}var o,n,r=0,s=new WebSocketServer({port:++port},function(){var e=new WebSocket("ws://localhost:"+port);n=e,n.on("open",t)});s.on("connection",function(e){o=e,t()})})}),describe("#ping",function(){it("before connect should fail",function(e){server.createServer(++port,function(t){var o=new WebSocket("ws://localhost:"+port);o.on("error",function(){});try{o.ping()}catch(n){t.close(),o.terminate(),e()}})}),it("before connect can silently fail",function(e){server.createServer(++port,function(t){var o=new WebSocket("ws://localhost:"+port);o.on("error",function(){}),o.ping("",{},!0),t.close(),o.terminate(),e()})}),it("without message is successfully transmitted to the server",function(e){server.createServer(++port,function(t){var o=new WebSocket("ws://localhost:"+port);o.on("open",function(){o.ping()}),t.on("ping",function(){t.close(),o.terminate(),e()})})}),it("with message is successfully transmitted to the server",function(e){server.createServer(++port,function(t){var o=new WebSocket("ws://localhost:"+port);o.on("open",function(){o.ping("hi")}),t.on("ping",function(n){assert.equal("hi",n),t.close(),o.terminate(),e()})})}),it("with encoded message is successfully transmitted to the server",function(e){server.createServer(++port,function(t){var o=new WebSocket("ws://localhost:"+port);o.on("open",function(){o.ping("hi",{mask:!0})}),t.on("ping",function(n,r){assert.ok(r.masked),assert.equal("hi",n),t.close(),o.terminate(),e()})})})}),describe("#pong",function(){it("before connect should fail",function(e){server.createServer(++port,function(t){var o=new WebSocket("ws://localhost:"+port);o.on("error",function(){});try{o.pong()}catch(n){t.close(),o.terminate(),e()}})}),it("before connect can silently fail",function(e){server.createServer(++port,function(t){var o=new WebSocket("ws://localhost:"+port);o.on("error",function(){}),o.pong("",{},!0),t.close(),o.terminate(),e()})}),it("without message is successfully transmitted to the server",function(e){server.createServer(++port,function(t){var o=new WebSocket("ws://localhost:"+port);o.on("open",function(){o.pong()}),t.on("pong",function(){t.close(),o.terminate(),e()})})}),it("with message is successfully transmitted to the server",function(e){server.createServer(++port,function(t){var o=new WebSocket("ws://localhost:"+port);o.on("open",function(){o.pong("hi")}),t.on("pong",function(n){assert.equal("hi",n),t.close(),o.terminate(),e()})})}),it("with encoded message is successfully transmitted to the server",function(e){server.createServer(++port,function(t){var o=new WebSocket("ws://localhost:"+port);o.on("open",function(){o.pong("hi",{mask:!0})}),t.on("pong",function(n,r){assert.ok(r.masked),assert.equal("hi",n),t.close(),o.terminate(),e()})})})}),describe("#send",function(){it("very long binary data can be sent and received (with echoing server)",function(e){server.createServer(++port,function(t){var o,n=new WebSocket("ws://localhost:"+port),r=new Float32Array(5242880);for(o=0;o<r.length;++o)r[o]=o/5;n.on("open",function(){n.send(r,{binary:!0})}),n.on("message",function(o,s){assert.ok(s.binary),assert.ok(areArraysEqual(r,new Float32Array(getArrayBuffer(o)))),n.terminate(),t.close(),e()})})}),it("can send and receive text data",function(e){server.createServer(++port,function(t){var o=new WebSocket("ws://localhost:"+port);o.on("open",function(){o.send("hi")}),o.on("message",function(n){assert.equal("hi",n),o.terminate(),t.close(),e()})})}),it("send and receive binary data as an array",function(e){server.createServer(++port,function(t){var o,n,r=new WebSocket("ws://localhost:"+port),s=new Float32Array(6);for(o=0;o<s.length;++o)s[o]=o/2;n=s.subarray(2,5),r.on("open",function(){r.send(n,{binary:!0})}),r.on("message",function(o,s){assert.ok(s.binary),assert.ok(areArraysEqual(n,new Float32Array(getArrayBuffer(o)))),r.terminate(),t.close(),e()})})}),it("binary data can be sent and received as buffer",function(e){server.createServer(++port,function(t){var o=new WebSocket("ws://localhost:"+port),n=new Buffer("foobar");o.on("open",function(){o.send(n,{binary:!0})}),o.on("message",function(r,s){assert.ok(s.binary),assert.ok(areArraysEqual(n,r)),o.terminate(),t.close(),e()})})}),it("ArrayBuffer is auto-detected without binary flag",function(e){server.createServer(++port,function(t){var o,n=new WebSocket("ws://localhost:"+port),r=new Float32Array(5);for(o=0;o<r.length;++o)r[o]=o/2;n.on("open",function(){n.send(r.buffer)}),n.onmessage=function(o){assert.ok(o.type="Binary"),assert.ok(areArraysEqual(r,new Float32Array(getArrayBuffer(o.data)))),n.terminate(),t.close(),e()}})}),it("Buffer is auto-detected without binary flag",function(e){server.createServer(++port,function(t){var o=new WebSocket("ws://localhost:"+port),n=new Buffer("foobar");o.on("open",function(){o.send(n)}),o.onmessage=function(r){assert.ok(r.type="Binary"),assert.ok(areArraysEqual(r.data,n)),o.terminate(),t.close(),e()}})}),it("before connect should fail",function(e){server.createServer(++port,function(t){var o=new WebSocket("ws://localhost:"+port);o.on("error",function(){});try{o.send("hi")}catch(n){o.terminate(),t.close(),e()}})}),it("before connect should pass error through callback, if present",function(e){server.createServer(++port,function(t){var o=new WebSocket("ws://localhost:"+port);o.on("error",function(){}),o.send("hi",function(n){assert.ok(n instanceof Error),o.terminate(),t.close(),e()})})}),it("without data should be successful",function(e){server.createServer(++port,function(t){var o=new WebSocket("ws://localhost:"+port);o.on("open",function(){o.send()}),t.on("message",function(n){assert.equal("",n),t.close(),o.terminate(),e()})})}),it("calls optional callback when flushed",function(e){server.createServer(++port,function(t){var o=new WebSocket("ws://localhost:"+port);o.on("open",function(){o.send("hi",function(){t.close(),o.terminate(),e()})})})}),it("with unencoded message is successfully transmitted to the server",function(e){server.createServer(++port,function(t){var o=new WebSocket("ws://localhost:"+port);o.on("open",function(){o.send("hi")}),t.on("message",function(n){assert.equal("hi",n),t.close(),o.terminate(),e()})})}),it("with encoded message is successfully transmitted to the server",function(e){server.createServer(++port,function(t){var o=new WebSocket("ws://localhost:"+port);o.on("open",function(){o.send("hi",{mask:!0})}),t.on("message",function(n,r){assert.ok(r.masked),assert.equal("hi",n),t.close(),o.terminate(),e()})})}),it("with unencoded binary message is successfully transmitted to the server",function(e){server.createServer(++port,function(t){var o,n=new WebSocket("ws://localhost:"+port),r=new Float32Array(5);for(o=0;o<r.length;++o)r[o]=o/2;n.on("open",function(){n.send(r,{binary:!0})}),t.on("message",function(o,s){assert.ok(s.binary),assert.ok(areArraysEqual(r,new Float32Array(getArrayBuffer(o)))),t.close(),n.terminate(),e()})})}),it("with encoded binary message is successfully transmitted to the server",function(e){server.createServer(++port,function(t){var o,n=new WebSocket("ws://localhost:"+port),r=new Float32Array(5);for(o=0;o<r.length;++o)r[o]=o/2;n.on("open",function(){n.send(r,{mask:!0,binary:!0})}),t.on("message",function(o,s){assert.ok(s.binary),assert.ok(s.masked),assert.ok(areArraysEqual(r,new Float32Array(getArrayBuffer(o)))),t.close(),n.terminate(),e()})})}),it("with binary stream will send fragmented data",function(e){server.createServer(++port,function(t){var o=new WebSocket("ws://localhost:"+port),n=!1;o.on("open",function(){var e=fs.createReadStream("test/fixtures/textfile");e.bufferSize=100,o.send(e,{binary:!0},function(e){assert.equal(null,e),n=!0})}),t.on("message",function(e,t){assert.ok(t.binary),assert.ok(areArraysEqual(fs.readFileSync("test/fixtures/textfile"),e)),o.terminate()}),o.on("close",function(){assert.ok(n),t.close(),e()})})}),it("with text stream will send fragmented data",function(e){server.createServer(++port,function(t){var o=new WebSocket("ws://localhost:"+port),n=!1;o.on("open",function(){var e=fs.createReadStream("test/fixtures/textfile");e.setEncoding("utf8"),e.bufferSize=100,o.send(e,{binary:!1},function(e){assert.equal(null,e),n=!0})}),t.on("message",function(e,t){assert.ok(!t.binary),assert.ok(areArraysEqual(fs.readFileSync("test/fixtures/textfile","utf8"),e)),o.terminate()}),o.on("close",function(){assert.ok(n),t.close(),e()})})}),it("will cause intermittent send to be delayed in order",function(e){server.createServer(++port,function(t){var o,n=new WebSocket("ws://localhost:"+port);n.on("open",function(){var e=fs.createReadStream("test/fixtures/textfile");e.setEncoding("utf8"),e.bufferSize=100,n.send(e),n.send("foobar"),n.send("baz")}),o=0,t.on("message",function(r,s){++o,1==o?(assert.ok(!s.binary),assert.ok(areArraysEqual(fs.readFileSync("test/fixtures/textfile","utf8"),r))):2==o?(assert.ok(!s.binary),assert.equal("foobar",r)):(assert.ok(!s.binary),assert.equal("baz",r),t.close(),n.terminate(),e())})})}),it("will cause intermittent stream to be delayed in order",function(e){server.createServer(++port,function(t){var o,n=new WebSocket("ws://localhost:"+port);n.on("open",function(){var e,t=fs.createReadStream("test/fixtures/textfile");t.setEncoding("utf8"),t.bufferSize=100,n.send(t),e=0,n.stream(function(t,o){assert.ok(!t),1==++e?o("foo"):o("bar",!0)})}),o=0,t.on("message",function(r,s){++o,1==o?(assert.ok(!s.binary),assert.ok(areArraysEqual(fs.readFileSync("test/fixtures/textfile","utf8"),r))):2==o&&(assert.ok(!s.binary),assert.equal("foobar",r),t.close(),n.terminate(),e())})})}),it("will cause intermittent ping to be delivered",function(e){server.createServer(++port,function(t){var o,n=new WebSocket("ws://localhost:"+port);n.on("open",function(){var e=fs.createReadStream("test/fixtures/textfile");e.setEncoding("utf8"),e.bufferSize=100,n.send(e),n.ping("foobar")}),o=0,t.on("message",function(r,s){assert.ok(!s.binary),assert.ok(areArraysEqual(fs.readFileSync("test/fixtures/textfile","utf8"),r)),2==++o&&(t.close(),n.terminate(),e())}),t.on("ping",function(r){assert.equal("foobar",r),2==++o&&(t.close(),n.terminate(),e())})})}),it("will cause intermittent pong to be delivered",function(e){server.createServer(++port,function(t){var o,n=new WebSocket("ws://localhost:"+port);n.on("open",function(){var e=fs.createReadStream("test/fixtures/textfile");e.setEncoding("utf8"),e.bufferSize=100,n.send(e),n.pong("foobar")}),o=0,t.on("message",function(r,s){assert.ok(!s.binary),assert.ok(areArraysEqual(fs.readFileSync("test/fixtures/textfile","utf8"),r)),2==++o&&(t.close(),n.terminate(),e())}),t.on("pong",function(r){assert.equal("foobar",r),2==++o&&(t.close(),n.terminate(),e())})})}),it("will cause intermittent close to be delivered",function(e){server.createServer(++port,function(t){var o=new WebSocket("ws://localhost:"+port);o.on("open",function(){var e=fs.createReadStream("test/fixtures/textfile");e.setEncoding("utf8"),e.bufferSize=100,o.send(e),o.close(1e3,"foobar")}),o.on("close",function(){t.close(),o.terminate(),e()}),o.on("error",function(){}),t.on("message",function(e,t){assert.ok(!t.binary),assert.ok(areArraysEqual(fs.readFileSync("test/fixtures/textfile","utf8"),e))}),t.on("close",function(e,t){assert.equal(1e3,e),assert.equal("foobar",t)})})})}),describe("#stream",function(){it("very long binary data can be streamed",function(e){server.createServer(++port,function(t){var o,n=new WebSocket("ws://localhost:"+port),r=new Buffer(10240);for(o=0;o<r.length;++o)r[o]=o%255;n.on("open",function(){var e=0,t=800,o=r.length;n.stream({binary:!0},function(n,s){var a,c,i,u;assert.ok(!n),a=e*t,c=Math.min(t,o-e*t),i=a+c,u=t>c,s(r.slice(a,i),u),e+=1})}),t.on("message",function(o,s){assert.ok(s.binary),assert.ok(areArraysEqual(r,o)),n.terminate(),t.close(),e()})})}),it("before connect should pass error through callback",function(e){server.createServer(++port,function(t){var o=new WebSocket("ws://localhost:"+port);o.on("error",function(){}),o.stream(function(n){assert.ok(n instanceof Error),o.terminate(),t.close(),e()})})}),it("without callback should fail",function(e){server.createServer(++port,function(t){var o=new WebSocket("ws://localhost:"+port);o.on("open",function(){try{o.stream()}catch(n){t.close(),o.terminate(),e()}})})}),it("will cause intermittent send to be delayed in order",function(e){server.createServer(++port,function(t){var o,n=new WebSocket("ws://localhost:"+port),r="HelloWorld";n.on("open",function(){var e=0;n.stream(function(t,o){assert.ok(!t),1==++e?(o(r.substr(0,5)),n.send("foobar"),n.send("baz")):o(r.substr(5,5),!0)})}),o=0,t.on("message",function(s,a){++o,1==o?(assert.ok(!a.binary),assert.equal(r,s)):2==o?(assert.ok(!a.binary),assert.equal("foobar",s)):(assert.ok(!a.binary),assert.equal("baz",s),t.close(),n.terminate(),e())})})}),it("will cause intermittent stream to be delayed in order",function(e){server.createServer(++port,function(t){var o,n=new WebSocket("ws://localhost:"+port),r="HelloWorld";n.on("open",function(){var e=0;n.stream(function(t,o){if(assert.ok(!t),1==++e){o(r.substr(0,5));var s=0;n.stream(function(e,t){assert.ok(!e),1==++s?t("foo"):t("bar",!0)}),n.send("baz")}else o(r.substr(5,5),!0)})}),o=0,t.on("message",function(s,a){if(++o,1==o)assert.ok(!a.binary),assert.equal(r,s);else if(2==o)assert.ok(!a.binary),assert.equal("foobar",s);else{if(3!=o)throw Error("more messages than we actually sent just arrived");assert.ok(!a.binary),assert.equal("baz",s),setTimeout(function(){t.close(),n.terminate(),e()},1e3)}})})}),it("will cause intermittent ping to be delivered",function(e){server.createServer(++port,function(t){var o,n=new WebSocket("ws://localhost:"+port),r="HelloWorld";n.on("open",function(){var e=0;n.stream(function(t,o){assert.ok(!t),1==++e?(o(r.substr(0,5)),n.ping("foobar")):o(r.substr(5,5),!0)})}),o=0,t.on("message",function(s,a){assert.ok(!a.binary),assert.equal(r,s),2==++o&&(t.close(),n.terminate(),e())}),t.on("ping",function(r){assert.equal("foobar",r),2==++o&&(t.close(),n.terminate(),e())})})}),it("will cause intermittent pong to be delivered",function(e){server.createServer(++port,function(t){var o,n=new WebSocket("ws://localhost:"+port),r="HelloWorld";n.on("open",function(){var e=0;n.stream(function(t,o){assert.ok(!t),1==++e?(o(r.substr(0,5)),n.pong("foobar")):o(r.substr(5,5),!0)})}),o=0,t.on("message",function(s,a){assert.ok(!a.binary),assert.equal(r,s),2==++o&&(t.close(),n.terminate(),e())}),t.on("pong",function(r){assert.equal("foobar",r),2==++o&&(t.close(),n.terminate(),e())})})}),it("will cause intermittent close to be delivered",function(e){server.createServer(++port,function(t){var o=new WebSocket("ws://localhost:"+port),n="HelloWorld",r=!1;o.on("open",function(){var e=0;o.stream(function(t,s){1==++e?(s(n.substr(0,5)),o.close(1e3,"foobar")):2==e?s(n.substr(5,5),!0):3==e&&(assert.ok(t),r=!0)})}),o.on("close",function(){assert.ok(r),t.close(),o.terminate(),e()}),t.on("message",function(e,t){assert.ok(!t.binary),assert.equal(n,e)}),t.on("close",function(e,t){assert.equal(1e3,e),assert.equal("foobar",t)})})})}),describe("#close",function(){it("will raise error callback, if any, if called during send stream",function(e){server.createServer(++port,function(t){var o=new WebSocket("ws://localhost:"+port),n=!1;o.on("open",function(){var e=fs.createReadStream("test/fixtures/textfile");e.setEncoding("utf8"),e.bufferSize=100,o.send(e,function(e){n=null!=e}),o.close(1e3,"foobar")}),o.on("close",function(){setTimeout(function(){assert.ok(n),t.close(),o.terminate(),e()},1e3)})})}),it("without invalid first argument throws exception",function(e){server.createServer(++port,function(t){var o=new WebSocket("ws://localhost:"+port);o.on("open",function(){try{o.close("error")}catch(n){t.close(),o.terminate(),e()}})})}),it("without reserved error code 1004 throws exception",function(e){server.createServer(++port,function(t){var o=new WebSocket("ws://localhost:"+port);o.on("open",function(){try{o.close(1004)}catch(n){t.close(),o.terminate(),e()}})})}),it("without message is successfully transmitted to the server",function(e){server.createServer(++port,function(t){var o=new WebSocket("ws://localhost:"+port);o.on("open",function(){o.close(1e3)}),t.on("close",function(n,r){assert.equal("",r),t.close(),o.terminate(),e()})})}),it("with message is successfully transmitted to the server",function(e){server.createServer(++port,function(t){var o=new WebSocket("ws://localhost:"+port);o.on("open",function(){o.close(1e3,"some reason")}),t.on("close",function(n,r,s){assert.ok(s.masked),assert.equal("some reason",r),t.close(),o.terminate(),e()})})}),it("with encoded message is successfully transmitted to the server",function(e){server.createServer(++port,function(t){var o=new WebSocket("ws://localhost:"+port);o.on("open",function(){o.close(1e3,"some reason",{mask:!0})}),t.on("close",function(n,r,s){assert.ok(s.masked),assert.equal("some reason",r),t.close(),o.terminate(),e()})})}),it("ends connection to the server",function(e){server.createServer(++port,function(t){var o=new WebSocket("ws://localhost:"+port),n=!1;o.on("open",function(){n=!0,o.close(1e3,"some reason",{mask:!0})}),o.on("close",function(){assert.ok(n),t.close(),o.terminate(),e()})})})}),describe("W3C API emulation",function(){it("should not throw errors when getting and setting",function(e){server.createServer(++port,function(t){var o=new WebSocket("ws://localhost:"+port),n=function(){};o.onmessage=n,o.onerror=n,o.onclose=n,o.onopen=n,assert.ok(o.onopen===n),assert.ok(o.onmessage===n),assert.ok(o.onclose===n),assert.ok(o.onerror===n),t.close(),o.terminate(),e()})}),it("should work the same as the EventEmitter api",function(e){server.createServer(++port,function(t){var o=new WebSocket("ws://localhost:"+port),n=0,r=0,s=0;o.onmessage=function(e){assert.ok(!!e.data),++n,o.close()},o.onopen=function(){++s},o.onclose=function(){++r},o.on("open",function(){o.send("foo")}),o.on("close",function(){process.nextTick(function(){assert.ok(1===n),assert.ok(1===s),assert.ok(1===r),t.close(),o.terminate(),e()})})})}),it("should receive text data wrapped in a MessageEvent when using addEventListener",function(e){server.createServer(++port,function(t){var o=new WebSocket("ws://localhost:"+port);o.addEventListener("open",function(){o.send("hi")}),o.addEventListener("message",function(n){assert.equal("hi",n.data),o.terminate(),t.close(),e()})})}),it("should receive valid CloseEvent when server closes with code 1000",function(e){var t=new WebSocketServer({port:++port},function(){var o=new WebSocket("ws://localhost:"+port);o.addEventListener("close",function(n){assert.equal(!0,n.wasClean),assert.equal(1e3,n.code),o.terminate(),t.close(),e()})});t.on("connection",function(e){e.close(1e3)})}),it("should receive valid CloseEvent when server closes with code 1001",function(e){var t=new WebSocketServer({port:++port},function(){var o=new WebSocket("ws://localhost:"+port);o.addEventListener("close",function(n){assert.equal(!1,n.wasClean),assert.equal(1001,n.code),assert.equal("some daft reason",n.reason),o.terminate(),t.close(),e()})});t.on("connection",function(e){e.close(1001,"some daft reason")})}),it("should have target set on Events",function(e){var t=new WebSocketServer({port:++port},function(){var o=new WebSocket("ws://localhost:"+port);o.addEventListener("open",function(e){assert.equal(o,e.target)}),o.addEventListener("message",function(e){assert.equal(o,e.target),t.close()}),o.addEventListener("close",function(e){assert.equal(o,e.target),o.emit("error",Error("forced"))}),o.addEventListener("error",function(t){assert.equal(t.message,"forced"),assert.equal(o,t.target),o.terminate(),e()})});t.on("connection",function(e){e.send("hi")})})}),describe("ssl",function(){it("can connect to secure websocket server",function(e){var t={key:fs.readFileSync("test/fixtures/key.pem"),cert:fs.readFileSync("test/fixtures/certificate.pem")},o=https.createServer(t,function(e,t){t.writeHead(200),t.end()}),n=new WebSocketServer({server:o});o.listen(++port,function(){new WebSocket("wss://localhost:"+port)}),n.on("connection",function(t){o.close(),t.terminate(),n.close(),e()})}),it("can connect to secure websocket server with client side certificate",function(e){var t={key:fs.readFileSync("test/fixtures/key.pem"),cert:fs.readFileSync("test/fixtures/certificate.pem"),ca:[fs.readFileSync("test/fixtures/ca1-cert.pem")],requestCert:!0},o={key:fs.readFileSync("test/fixtures/agent1-key.pem"),cert:fs.readFileSync("test/fixtures/agent1-cert.pem")},n=https.createServer(t,function(e,t){t.writeHead(200),t.end()}),r=!1,s=new WebSocketServer({server:n,verifyClient:function(e){return r=!!e.req.client.authorized,!0}});n.listen(++port,function(){new WebSocket("wss://localhost:"+port,o)}),s.on("connection",function(t){n.close(),t.terminate(),s.close(),r.should.be.ok,e()})}),it("cannot connect to secure websocket server via ws://",function(e){var t={key:fs.readFileSync("test/fixtures/key.pem"),cert:fs.readFileSync("test/fixtures/certificate.pem")},o=https.createServer(t,function(e,t){t.writeHead(200),t.end()}),n=new WebSocketServer({server:o});o.listen(++port,function(){var t=new WebSocket("ws://localhost:"+port,{rejectUnauthorized:!1});t.on("error",function(){o.close(),t.terminate(),n.close(),e()})})}),it("can send and receive text data",function(e){var t={key:fs.readFileSync("test/fixtures/key.pem"),cert:fs.readFileSync("test/fixtures/certificate.pem")},o=https.createServer(t,function(e,t){t.writeHead(200),t.end()}),n=new WebSocketServer({server:o});o.listen(++port,function(){var e=new WebSocket("wss://localhost:"+port);e.on("open",function(){e.send("foobar")})}),n.on("connection",function(t){t.on("message",function(r){r.should.eql("foobar"),o.close(),t.terminate(),n.close(),e()})})}),it("can send and receive very long binary data",function(e){var t={key:fs.readFileSync("test/fixtures/key.pem"),cert:fs.readFileSync("test/fixtures/certificate.pem")},o=https.createServer(t,function(e,t){t.writeHead(200),t.end()});crypto.randomBytes(5242880,function(t,n){if(t)throw t;var r=new WebSocketServer({server:o});o.listen(++port,function(){var t=new WebSocket("wss://localhost:"+port);t.on("open",function(){t.send(n,{binary:!0})}),t.on("message",function(s,a){a.binary.should.be.ok,areArraysEqual(n,s).should.be.ok,o.close(),t.terminate(),r.close(),e()})}),r.on("connection",function(e){e.on("message",function(t){e.send(t,{binary:!0})})})})})}),describe("protocol support discovery",function(){describe("#supports",function(){describe("#binary",function(){it("returns true for hybi transport",function(e){var t=new WebSocketServer({port:++port},function(){new WebSocket("ws://localhost:"+port)});t.on("connection",function(o){assert.equal(!0,o.supports.binary),t.close(),e()})}),it("returns false for hixie transport",function(e){var t=new WebSocketServer({port:++port},function(){var e={port:port,host:"127.0.0.1",headers:{Connection:"Upgrade",Upgrade:"WebSocket","Sec-WebSocket-Key1":"3e6b263  4 17 80","Sec-WebSocket-Key2":"17  9 G`ZD9   2 2b 7X 3 /r90"}},t=http.request(e);t.write("WjN}|M(6"),t.end()});t.on("connection",function(o){assert.equal(!1,o.supports.binary),t.close(),e()})})})})}),describe("host and origin headers",function(){it("includes the host header with port number",function(e){var t=http.createServer();t.listen(++port,function(){t.on("upgrade",function(o){assert.equal("localhost:"+port,o.headers.host),t.close(),e()}),new WebSocket("ws://localhost:"+port)})}),it("includes the origin header with port number",function(e){var t=http.createServer();t.listen(++port,function(){t.on("upgrade",function(o){assert.equal("localhost:"+port,o.headers.origin),t.close(),e()}),new WebSocket("ws://localhost:"+port)})})})});