function instrument(t){function n(t,n){var r=pro.gen_code(t,{beautify:!0}),e=t[0],i=[];return n||(n=""),"object"==typeof e?(r=r.split(/\n/).shift(),i=[["string",""+e],["string",r],["num",e.start.line],["num",e.start.col],["num",e.end.line],["num",e.end.col]]):i=[["string",e],["string",r]],["call",["name","trace"],i]}function r(){var t;return this[0].start&&u.indexOf(this)<0&&(u.push(this),t=["splice",[["stat",n(this)],a.walk(this)]],u.pop(this)),t}function e(t,r,e){return[this[0],a.walk(t),["seq",n(r),a.walk(r)],["seq",n(e),a.walk(e)]]}function i(t,r,e){return"&&"!==t&&"||"!==t?[this[0],t,a.walk(r),a.walk(e)]:[this[0],t,["seq",n(r),a.walk(r)],["seq",n(e),a.walk(e)]]}var s=jsp.parse(t,!1,!0),a=pro.ast_walker(),u=[],o=a.with_walkers({stat:r,label:r,"break":r,"continue":r,"debugger":r,"var":r,"const":r,"return":r,"throw":r,"try":r,defun:r,"if":r,"while":r,"do":r,"for":r,"for-in":r,"switch":r,"with":r,conditional:e,binary:i},function(){return a.walk(s)});return pro.gen_code(o,{beautify:!0})}function test(){return a=5,c+=a+b,1}var jsp=require("uglify-js").parser,pro=require("uglify-js").uglify,code=instrument(""+test);console.log(code);