function HOP(_,e){return Object.prototype.hasOwnProperty.call(_,e)}function AST_Node(_){this.parent=_}function DEFINE_NODE_CLASS(_,e,S){function o(_,S){t.apply(this,arguments),e&&e.forEach(function(_,e){this["_"+_]=S[e]}),this.init()}var N,n,t=S&&S.BASE||AST_Node;if(t||(t=AST_Node),N=o.prototype=new AST_Node,N.node_type=function(){return _},e&&e.forEach(function(_){var e="_"+_;N["set_"+_]=function(_){return this[e]=_,this},N["get_"+_]=function(){return this[e]}}),null!=_&&(BY_TYPE[_]=o),S)for(n in S)HOP(S,n)&&(N[n]=S[n]);return o}var AST_String_Node,AST_Number_Node,AST_Name_Node,AST_Statlist_Node,AST_Root_Node,AST_Block_Node,AST_Splice_Node,AST_Var_Node,AST_Const_Node,AST_Try_Node,AST_Throw_Node,AST_New_Node,AST_Switch_Node,AST_Switch_Branch_Node,AST_Break_Node,AST_Continue_Node,AST_Assign_Node,AST_Dot_Node,AST_Call_Node,AST_Lambda_Node,AST_Function_Node,AST_Defun_Node,AST_If_Node,jsp=require("./parse-js"),pro=require("./process"),BY_TYPE={};AST_Node.prototype.init=function(){},AST_String_Node=DEFINE_NODE_CLASS("string",["value"]),AST_Number_Node=DEFINE_NODE_CLASS("num",["value"]),AST_Name_Node=DEFINE_NODE_CLASS("name",["value"]),AST_Statlist_Node=DEFINE_NODE_CLASS(null,["body"]),AST_Root_Node=DEFINE_NODE_CLASS("toplevel",null,{BASE:AST_Statlist_Node}),AST_Block_Node=DEFINE_NODE_CLASS("block",null,{BASE:AST_Statlist_Node}),AST_Splice_Node=DEFINE_NODE_CLASS("splice",null,{BASE:AST_Statlist_Node}),AST_Var_Node=DEFINE_NODE_CLASS("var",["definitions"]),AST_Const_Node=DEFINE_NODE_CLASS("const",["definitions"]),AST_Try_Node=DEFINE_NODE_CLASS("try",["body","catch","finally"]),AST_Throw_Node=DEFINE_NODE_CLASS("throw",["exception"]),AST_New_Node=DEFINE_NODE_CLASS("new",["constructor","arguments"]),AST_Switch_Node=DEFINE_NODE_CLASS("switch",["expression","branches"]),AST_Switch_Branch_Node=DEFINE_NODE_CLASS(null,["expression","body"]),AST_Break_Node=DEFINE_NODE_CLASS("break",["label"]),AST_Continue_Node=DEFINE_NODE_CLASS("continue",["label"]),AST_Assign_Node=DEFINE_NODE_CLASS("assign",["operator","lvalue","rvalue"]),AST_Dot_Node=DEFINE_NODE_CLASS("dot",["expression","name"]),AST_Call_Node=DEFINE_NODE_CLASS("call",["function","arguments"]),AST_Lambda_Node=DEFINE_NODE_CLASS(null,["name","arguments","body"]),AST_Function_Node=DEFINE_NODE_CLASS("function",null,AST_Lambda_Node),AST_Defun_Node=DEFINE_NODE_CLASS("defun",null,AST_Lambda_Node),AST_If_Node=DEFINE_NODE_CLASS("if",["condition","then","else"]);